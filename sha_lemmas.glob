DIGEST a3b0cfb9d67e091d09a72d0b67473fce
Fsha.sha_lemmas
R72:86 floyd.proofauto <> <> lib
R104:113 sha.SHA256 <> <> lib
R131:142 sha.spec_sha <> <> lib
R160:166 sha.sha <> <> lib
R184:198 sha.pure_lemmas <> <> lib
R216:219 sha.SHA256 <> K256 def
R235:237 compcert.lib.Coqlib <> peq def
def 252:264 <> field_offset'
R270:274 compcert.common.AST <> ident def
R281:284 compcert.cfrontend.Ctypes <> type ind
R289:289 Coq.Numbers.BinNums <> Z ind
R300:300 sha.sha_lemmas <> t var
R309:315 compcert.cfrontend.Ctypes <> Tstruct constr
R337:348 compcert.cfrontend.Ctypes <> field_offset def
R350:350 sha.sha_lemmas <> i var
R359:367 compcert.common.Errors <> OK constr
def 417:427 <> data_offset
R431:431 Coq.Numbers.BinNums <> Z ind
R508:520 sha.sha_lemmas <> field_offset' def
R528:550 sha.sha <> t_struct_SHA256state_st def
R522:526 sha.sha <> _data def
R508:520 sha.sha_lemmas <> field_offset' def
R528:550 sha.sha <> t_struct_SHA256state_st def
R522:526 sha.sha <> _data def
prf 750:768 <> elim_globals_only''
R915:915 Coq.Init.Logic <> :type_scope:x_'='_x not
R947:950 Coq.Init.Logic <> :type_scope:x_'='_x not
R916:923 veric.expr <> eval_var def
R930:941 veric.SeparationLogic <> globals_only def
R943:945 sha.sha_lemmas <> rho var
R927:927 sha.sha_lemmas <> t var
R925:925 sha.sha_lemmas <> i var
R951:958 veric.expr <> eval_var def
R964:966 sha.sha_lemmas <> rho var
R962:962 sha.sha_lemmas <> t var
R960:960 sha.sha_lemmas <> i var
R795:801 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R807:808 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R829:839 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R809:818 veric.SeparationLogic <> tc_environ def
R826:828 sha.sha_lemmas <> rho var
R820:824 sha.sha_lemmas <> Delta var
R868:871 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R861:863 Coq.Init.Logic <> :type_scope:x_'='_x not
R840:840 compcert.lib.Maps <> ::x_'!'_x not
R856:859 compcert.lib.Maps <> ::x_'!'_x not
R860:860 sha.sha_lemmas <> i var
R841:849 veric.expr <> var_types def
R851:855 sha.sha_lemmas <> Delta var
R864:867 Coq.Init.Datatypes <> None constr
R872:877 veric.expr <> isSome def
R880:880 compcert.lib.Maps <> ::x_'!'_x not
R897:900 compcert.lib.Maps <> ::x_'!'_x not
R901:901 sha.sha_lemmas <> i var
R881:890 veric.expr <> glob_types def
R892:896 sha.sha_lemmas <> Delta var
R1047:1047 compcert.lib.Maps <> ::x_'!'_x not
R1064:1067 compcert.lib.Maps <> ::x_'!'_x not
R1048:1057 veric.expr <> glob_types def
R1047:1047 compcert.lib.Maps <> ::x_'!'_x not
R1064:1067 compcert.lib.Maps <> ::x_'!'_x not
R1048:1057 veric.expr <> glob_types def
R1108:1124 floyd.forward <> elim_globals_only thm
R1108:1124 floyd.forward <> elim_globals_only thm
R1153:1171 sha.sha_lemmas <> elim_globals_only'' thm
R1232:1232 Coq.Init.Logic <> I constr
prf 1251:1264 <> elim_make_args
R1417:1417 Coq.Init.Logic <> :type_scope:x_'='_x not
R1452:1455 Coq.Init.Logic <> :type_scope:x_'='_x not
R1418:1425 veric.expr <> eval_var def
R1432:1440 veric.SeparationLogic <> make_args def
R1448:1450 sha.sha_lemmas <> rho var
R1445:1446 sha.sha_lemmas <> vl var
R1442:1443 sha.sha_lemmas <> il var
R1429:1429 sha.sha_lemmas <> t var
R1427:1427 sha.sha_lemmas <> i var
R1456:1463 veric.expr <> eval_var def
R1469:1471 sha.sha_lemmas <> rho var
R1467:1467 sha.sha_lemmas <> t var
R1465:1465 sha.sha_lemmas <> i var
R1297:1303 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R1309:1310 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R1331:1341 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R1311:1320 veric.SeparationLogic <> tc_environ def
R1328:1330 sha.sha_lemmas <> rho var
R1322:1326 sha.sha_lemmas <> Delta var
R1370:1373 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R1363:1365 Coq.Init.Logic <> :type_scope:x_'='_x not
R1342:1342 compcert.lib.Maps <> ::x_'!'_x not
R1358:1361 compcert.lib.Maps <> ::x_'!'_x not
R1362:1362 sha.sha_lemmas <> i var
R1343:1351 veric.expr <> var_types def
R1353:1357 sha.sha_lemmas <> Delta var
R1366:1369 Coq.Init.Datatypes <> None constr
R1374:1379 veric.expr <> isSome def
R1382:1382 compcert.lib.Maps <> ::x_'!'_x not
R1399:1402 compcert.lib.Maps <> ::x_'!'_x not
R1403:1403 sha.sha_lemmas <> i var
R1383:1392 veric.expr <> glob_types def
R1394:1398 sha.sha_lemmas <> Delta var
R1551:1569 sha.sha_lemmas <> elim_globals_only'' thm
R1551:1569 sha.sha_lemmas <> elim_globals_only'' thm
R1643:1656 sha.sha_lemmas <> elim_make_args thm
R1717:1717 Coq.Init.Logic <> I constr
def 1739:1743 <> loops
R1749:1757 compcert.cfrontend.Clight <> statement ind
R1762:1765 Coq.Init.Datatypes <> list ind
R1767:1775 compcert.cfrontend.Clight <> statement ind
R1787:1787 sha.sha_lemmas <> s var
R1799:1807 compcert.cfrontend.Clight <> Ssequence constr
R1823:1826 Coq.Init.Datatypes <> :list_scope:x_'++'_x not
R1816:1820 sha.sha_lemmas <> loops def
R1827:1831 sha.sha_lemmas <> loops def
R1839:1843 compcert.cfrontend.Clight <> Sloop constr
R1852:1852 sha.SHA256 <> ::'['_x_','_'..'_','_x_']' not
R1854:1854 sha.SHA256 <> ::'['_x_','_'..'_','_x_']' not
R1853:1853 sha.sha_lemmas <> s var
R1860:1870 compcert.cfrontend.Clight <> Sifthenelse constr
R1888:1891 Coq.Init.Datatypes <> :list_scope:x_'++'_x not
R1881:1885 sha.sha_lemmas <> loops def
R1892:1896 sha.sha_lemmas <> loops def
R1909:1911 Coq.Init.Datatypes <> nil constr
prf 1927:1948 <> nth_big_endian_integer
R2004:2006 Coq.Init.Logic <> :type_scope:x_'='_x not
R2003:2003 sha.sha_lemmas <> w var
R2007:2024 sha.SHA256 <> big_endian_integer def
R2052:2052 Coq.Numbers.BinNums <> Z ind
R2075:2083 veric.expr <> force_int def
R2106:2110 floyd.data_at_lemmas <> ZnthV def
R2192:2194 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R2191:2191 sha.sha_lemmas <> z var
R2205:2207 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R2195:2202 Coq.ZArith.BinInt Z of_nat def
R2204:2204 sha.sha_lemmas <> i var
R2208:2211 sha.SHA256 <> WORD def
R2120:2122 Coq.Lists.List <> map def
R2130:2132 Coq.Lists.List <> map def
R2144:2159 sha.SHA256 <> intlist_to_Zlist def
R2161:2162 sha.sha_lemmas <> bl var
R2134:2141 compcert.lib.Integers Int repr def
R2124:2127 compcert.common.Values <> Vint constr
R2112:2117 compcert.exportclight.Clightdefs <> tuchar def
R1986:1988 Coq.Init.Logic <> :type_scope:x_'='_x not
R1972:1980 Coq.Lists.List <> nth_error def
R1985:1985 sha.sha_lemmas <> i var
R1982:1983 sha.sha_lemmas <> bl var
R1989:1992 Coq.Init.Datatypes <> Some constr
R1994:1994 sha.sha_lemmas <> w var
R2283:2300 sha.SHA256 <> big_endian_integer def
R2326:2342 compcert.lib.Integers Int repr_unsigned thm
R2326:2342 compcert.lib.Integers Int repr_unsigned thm
R2326:2342 compcert.lib.Integers Int repr_unsigned thm
R2326:2342 compcert.lib.Integers Int repr_unsigned thm
R2326:2342 compcert.lib.Integers Int repr_unsigned thm
R2326:2342 compcert.lib.Integers Int repr_unsigned thm
R2367:2367 Coq.Init.Logic <> :type_scope:x_'='_x not
R2354:2366 compcert.lib.Integers Int zwordsize def
R2367:2367 Coq.Init.Logic <> :type_scope:x_'='_x not
R2354:2366 compcert.lib.Integers Int zwordsize def
R2398:2405 sha.SHA256 <> Z_to_Int def
R2408:2410 sha.SHA256 <> Shr def
R2440:2445 Coq.ZArith.BinInt Z ones def
R2440:2445 Coq.ZArith.BinInt Z ones def
R2458:2473 compcert.lib.Integers Int same_bits_eq thm
R2458:2473 compcert.lib.Integers Int same_bits_eq thm
R2616:2623 msl.Coqlib2 <> if_false thm
R2616:2623 msl.Coqlib2 <> if_false thm
R2686:2693 msl.Coqlib2 <> if_false thm
R2686:2693 msl.Coqlib2 <> if_false thm
R2713:2720 msl.Coqlib2 <> if_false thm
R2713:2720 msl.Coqlib2 <> if_false thm
R2832:2853 sha.pure_lemmas <> big_endian_integer_ext thm
R2832:2853 sha.pure_lemmas <> big_endian_integer_ext thm
R2885:2889 Coq.ZArith.Znat <> inj_S syndef
R2885:2889 Coq.ZArith.Znat <> inj_S syndef
R2899:2904 Coq.ZArith.BinInt Z succ def
R2914:2918 floyd.data_at_lemmas <> ZnthV def
R2930:2932 Coq.Init.Peano <> :nat_scope:x_'<'_x not
R2933:2938 Coq.Init.Datatypes <> length def
R2930:2932 Coq.Init.Peano <> :nat_scope:x_'<'_x not
R2933:2938 Coq.Init.Datatypes <> length def
R3097:3100 sha.SHA256 <> WORD def
R3078:3084 msl.Coqlib2 <> if_true thm
R3145:3148 sha.SHA256 <> WORD def
R3125:3132 msl.Coqlib2 <> if_false thm
R3078:3084 msl.Coqlib2 <> if_true thm
R3125:3132 msl.Coqlib2 <> if_false thm
R3177:3187 floyd.data_at_lemmas <> default_val def
R3177:3187 floyd.data_at_lemmas <> default_val def
R3198:3214 Coq.ZArith.BinInt Z mul_add_distr_r thm
R3198:3214 Coq.ZArith.BinInt Z mul_add_distr_r thm
R3225:3233 Coq.ZArith.BinInt Z mul_1_l thm
R3225:3233 Coq.ZArith.BinInt Z mul_1_l thm
R3292:3294 Coq.Init.Logic <> :type_scope:x_'='_x not
R3251:3258 Coq.ZArith.BinInt Z to_nat def
R3262:3265 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R3290:3290 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R3283:3285 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R3276:3278 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R3266:3273 Coq.ZArith.BinInt Z of_nat def
R3279:3282 sha.SHA256 <> WORD def
R3286:3289 sha.SHA256 <> WORD def
R3295:3295 Coq.Init.Peano <> :nat_scope:x_'+'_x not
R3309:3312 Coq.Init.Peano <> :nat_scope:x_'+'_x not
R3296:3303 Coq.ZArith.BinInt Z to_nat def
R3305:3308 sha.SHA256 <> WORD def
R3313:3320 Coq.ZArith.BinInt Z to_nat def
R3324:3326 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R3337:3339 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R3327:3334 Coq.ZArith.BinInt Z of_nat def
R3340:3343 sha.SHA256 <> WORD def
R3292:3294 Coq.Init.Logic <> :type_scope:x_'='_x not
R3251:3258 Coq.ZArith.BinInt Z to_nat def
R3262:3265 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R3290:3290 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R3283:3285 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R3276:3278 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R3266:3273 Coq.ZArith.BinInt Z of_nat def
R3279:3282 sha.SHA256 <> WORD def
R3286:3289 sha.SHA256 <> WORD def
R3295:3295 Coq.Init.Peano <> :nat_scope:x_'+'_x not
R3309:3312 Coq.Init.Peano <> :nat_scope:x_'+'_x not
R3296:3303 Coq.ZArith.BinInt Z to_nat def
R3305:3308 sha.SHA256 <> WORD def
R3313:3320 Coq.ZArith.BinInt Z to_nat def
R3324:3326 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R3337:3339 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R3327:3334 Coq.ZArith.BinInt Z of_nat def
R3340:3343 sha.SHA256 <> WORD def
R3392:3395 sha.SHA256 <> WORD def
R3367:3379 Coq.ZArith.Znat Z2Nat inj_add thm
R3367:3379 Coq.ZArith.Znat Z2Nat inj_add thm
R3367:3379 Coq.ZArith.Znat Z2Nat inj_add thm
R3367:3379 Coq.ZArith.Znat Z2Nat inj_add thm
R3367:3379 Coq.ZArith.Znat Z2Nat inj_add thm
R3417:3424 Coq.ZArith.BinInt Z to_nat def
R3434:3437 sha.SHA256 <> WORD def
R3417:3424 Coq.ZArith.BinInt Z to_nat def
def 3492:3499 <> sequence
R3506:3509 Coq.Init.Datatypes <> list ind
R3511:3519 compcert.cfrontend.Clight <> statement ind
R3534:3535 sha.sha_lemmas <> cs var
R3545:3547 Coq.Init.Datatypes <> nil constr
R3552:3552 sha.sha_lemmas <> s var
R3558:3559 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R3567:3575 compcert.cfrontend.Clight <> Ssequence constr
R3580:3587 sha.sha_lemmas <> sequence def
R3593:3593 sha.sha_lemmas <> s var
def 3612:3620 <> rsequence
R3627:3630 Coq.Init.Datatypes <> list ind
R3632:3640 compcert.cfrontend.Clight <> statement ind
R3655:3656 sha.sha_lemmas <> cs var
R3666:3668 Coq.Init.Datatypes <> nil constr
R3673:3673 sha.sha_lemmas <> s var
R3679:3680 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R3688:3696 compcert.cfrontend.Clight <> Ssequence constr
R3699:3707 sha.sha_lemmas <> rsequence def
R3713:3713 sha.sha_lemmas <> s var
prf 3731:3748 <> sequence_rsequence
R3842:3849 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R3790:3794 veric.SeparationLogicSoundness SoundSeparationLogic.CSL semax defax
R3841:3841 sha.sha_lemmas <> R var
R3811:3819 compcert.cfrontend.Clight <> Ssequence constr
R3825:3832 sha.sha_lemmas <> sequence def
R3837:3837 sha.sha_lemmas <> s var
R3834:3835 sha.sha_lemmas <> cs var
R3821:3822 sha.sha_lemmas <> s0 var
R3808:3808 sha.sha_lemmas <> P var
R3802:3806 sha.sha_lemmas <> Delta var
R3796:3800 sha.sha_lemmas <> Espec var
R3851:3855 veric.SeparationLogicSoundness SoundSeparationLogic.CSL semax defax
R3909:3909 sha.sha_lemmas <> R var
R3872:3880 compcert.cfrontend.Clight <> Ssequence constr
R3906:3906 sha.sha_lemmas <> s var
R3883:3891 sha.sha_lemmas <> rsequence def
R3902:3903 sha.sha_lemmas <> s0 var
R3894:3896 Coq.Lists.List <> rev def
R3898:3899 sha.sha_lemmas <> cs var
R3869:3869 sha.sha_lemmas <> P var
R3863:3867 sha.sha_lemmas <> Delta var
R3857:3861 sha.sha_lemmas <> Espec var
R3985:3992 Coq.Init.Logic <> iff_refl thm
R3985:3992 Coq.Init.Logic <> iff_refl thm
R4010:4018 veric.SeparationLogicSoundness SoundSeparationLogic.CSL seq_assoc prfax
R4010:4018 veric.SeparationLogicSoundness SoundSeparationLogic.CSL seq_assoc prfax
R4056:4064 sha.sha_lemmas <> rsequence def
R4073:4076 Coq.Init.Datatypes <> :list_scope:x_'++'_x not
R4067:4069 Coq.Lists.List <> rev def
R4077:4077 sha.SHA256 <> ::'['_x_','_'..'_','_x_']' not
R4079:4079 sha.SHA256 <> ::'['_x_','_'..'_','_x_']' not
R4096:4104 sha.sha_lemmas <> rsequence def
R4116:4124 compcert.cfrontend.Clight <> Ssequence constr
R4107:4109 Coq.Lists.List <> rev def
R4141:4148 Coq.Init.Logic <> iff_refl thm
R4096:4104 sha.sha_lemmas <> rsequence def
R4116:4124 compcert.cfrontend.Clight <> Ssequence constr
R4107:4109 Coq.Lists.List <> rev def
R4056:4064 sha.sha_lemmas <> rsequence def
R4073:4076 Coq.Init.Datatypes <> :list_scope:x_'++'_x not
R4067:4069 Coq.Lists.List <> rev def
R4077:4077 sha.SHA256 <> ::'['_x_','_'..'_','_x_']' not
R4079:4079 sha.SHA256 <> ::'['_x_','_'..'_','_x_']' not
R4141:4148 Coq.Init.Logic <> iff_refl thm
R4179:4181 Coq.Lists.List <> rev def
R4179:4181 Coq.Lists.List <> rev def
prf 4240:4249 <> seq_assocN
R4271:4280 veric.juicy_extspec <> OracleKind class
R4475:4479 veric.SeparationLogicSoundness SoundSeparationLogic.CSL semax defax
R4511:4511 sha.sha_lemmas <> R var
R4496:4503 sha.sha_lemmas <> sequence def
R4508:4508 sha.sha_lemmas <> s var
R4505:4506 sha.sha_lemmas <> cs var
R4493:4493 sha.sha_lemmas <> P var
R4487:4491 sha.sha_lemmas <> Delta var
R4481:4485 sha.sha_lemmas <> Espec var
R4396:4400 veric.SeparationLogicSoundness SoundSeparationLogic.CSL semax defax
R4461:4461 sha.sha_lemmas <> R var
R4459:4459 sha.sha_lemmas <> s var
R4457:4457 sha.sha_lemmas <> Q var
R4417:4428 veric.expr <> update_tycon def
R4437:4444 sha.sha_lemmas <> sequence def
R4449:4453 compcert.cfrontend.Clight <> Sskip constr
R4446:4447 sha.sha_lemmas <> cs var
R4430:4434 sha.sha_lemmas <> Delta var
R4402:4406 sha.sha_lemmas <> Espec var
R4321:4325 veric.SeparationLogicSoundness SoundSeparationLogic.CSL semax defax
R4362:4378 veric.SeparationLogic <> normal_ret_assert def
R4380:4380 sha.sha_lemmas <> Q var
R4342:4349 sha.sha_lemmas <> sequence def
R4354:4358 compcert.cfrontend.Clight <> Sskip constr
R4351:4352 sha.sha_lemmas <> cs var
R4339:4339 sha.sha_lemmas <> P var
R4333:4337 sha.sha_lemmas <> Delta var
R4327:4331 sha.sha_lemmas <> Espec var
R4537:4550 veric.SeparationLogicSoundness SoundSeparationLogic.CSL semax_skip_seq prfax
R4537:4550 veric.SeparationLogicSoundness SoundSeparationLogic.CSL semax_skip_seq prfax
R4561:4578 sha.sha_lemmas <> sequence_rsequence thm
R4561:4578 sha.sha_lemmas <> sequence_rsequence thm
R4589:4602 veric.SeparationLogicSoundness SoundSeparationLogic.CSL semax_skip_seq prfax
R4589:4602 veric.SeparationLogicSoundness SoundSeparationLogic.CSL semax_skip_seq prfax
R4618:4635 sha.sha_lemmas <> sequence_rsequence thm
R4618:4635 sha.sha_lemmas <> sequence_rsequence thm
R4654:4667 veric.SeparationLogicSoundness SoundSeparationLogic.CSL semax_seq_skip prfax
R4654:4667 veric.SeparationLogicSoundness SoundSeparationLogic.CSL semax_seq_skip prfax
R4682:4691 floyd.client_lemmas <> semax_seq' thm
R4682:4691 floyd.client_lemmas <> semax_seq' thm
R4715:4740 veric.SeparationLogicSoundness SoundSeparationLogic.CSL semax_extensionality_Delta prfax
R4715:4740 veric.SeparationLogicSoundness SoundSeparationLogic.CSL semax_extensionality_Delta prfax
R4813:4842 veric.expr_lemmas <> tycontext_sub_refl thm
R4813:4842 veric.expr_lemmas <> tycontext_sub_refl thm
R4852:4883 veric.semax_lemmas <> tycontext_sub_trans thm
R4852:4883 veric.semax_lemmas <> tycontext_sub_trans thm
R4935:4937 Coq.Lists.List <> rev def
R4935:4937 Coq.Lists.List <> rev def
R4965:4994 veric.expr_lemmas <> tycontext_sub_refl thm
R4965:4994 veric.expr_lemmas <> tycontext_sub_refl thm
R5003:5030 veric.expr_lemmas <> update_tycon_sub thm
R5003:5030 veric.expr_lemmas <> update_tycon_sub thm
def 5059:5067 <> sequenceN
R5073:5075 Coq.Init.Datatypes <> nat ind
R5082:5090 compcert.cfrontend.Clight <> statement ind
R5095:5098 Coq.Init.Datatypes <> list ind
R5100:5108 compcert.cfrontend.Clight <> statement ind
R5123:5123 sha.sha_lemmas <> s var
R5120:5120 sha.sha_lemmas <> n var
R5134:5134 Coq.Init.Datatypes <> S constr
R5140:5148 compcert.cfrontend.Clight <> Ssequence constr
R5159:5160 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R5161:5169 sha.sha_lemmas <> sequenceN def
R5188:5190 Coq.Init.Datatypes <> nil constr
prf 5205:5225 <> datablock_local_facts
R5269:5273 msl.seplog <> ::x_'|--'_x not
R5249:5258 sha.spec_sha <> data_block def
R5265:5268 sha.sha_lemmas <> data var
R5263:5263 sha.sha_lemmas <> f var
R5260:5261 sha.sha_lemmas <> sh var
R5274:5277 msl.seplog <> prop meth
R5290:5293 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R5280:5284 veric.expr <> isptr def
R5286:5289 sha.sha_lemmas <> data var
R5294:5299 Coq.Lists.List <> Forall ind
R5309:5309 sha.sha_lemmas <> f var
R5301:5307 sha.SHA256 <> isbyteZ def
R5335:5344 sha.spec_sha <> data_block def
R5382:5402 sha.sha_lemmas <> datablock_local_facts thm
prf 5429:5441 <> array_at_ext'
R5470:5476 floyd.data_at_lemmas <> reptype def
R5478:5478 sha.sha_lemmas <> t var
R5465:5465 Coq.Numbers.BinNums <> Z ind
R5597:5599 Coq.Init.Logic <> :type_scope:x_'='_x not
R5576:5583 floyd.data_at_lemmas <> array_at def
R5595:5596 sha.sha_lemmas <> hi var
R5592:5593 sha.sha_lemmas <> lo var
R5590:5590 sha.sha_lemmas <> f var
R5587:5588 sha.sha_lemmas <> sh var
R5585:5585 sha.sha_lemmas <> t var
R5600:5607 floyd.data_at_lemmas <> array_at def
R5621:5623 sha.sha_lemmas <> hi' var
R5617:5619 sha.sha_lemmas <> lo' var
R5614:5615 sha.sha_lemmas <> f' var
R5611:5612 sha.sha_lemmas <> sh var
R5609:5609 sha.sha_lemmas <> t var
R5565:5565 Coq.Init.Logic <> :type_scope:x_'='_x not
R5563:5564 sha.sha_lemmas <> hi var
R5566:5568 sha.sha_lemmas <> hi' var
R5555:5555 Coq.Init.Logic <> :type_scope:x_'='_x not
R5553:5554 sha.sha_lemmas <> lo var
R5556:5558 sha.sha_lemmas <> lo' var
R5512:5512 Coq.Numbers.BinNums <> Z ind
R5538:5540 Coq.Init.Logic <> :type_scope:x_'='_x not
R5535:5535 sha.sha_lemmas <> f var
R5537:5537 sha.sha_lemmas <> i var
R5541:5542 sha.sha_lemmas <> f' var
R5544:5544 sha.sha_lemmas <> i var
R5518:5521 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R5523:5525 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R5516:5517 sha.sha_lemmas <> lo var
R5522:5522 sha.sha_lemmas <> i var
R5522:5522 sha.sha_lemmas <> i var
R5526:5527 sha.sha_lemmas <> hi var
R5650:5661 floyd.array_lemmas <> array_at_ext thm
R5650:5661 floyd.array_lemmas <> array_at_ext thm
prf 5737:5753 <> split2_data_block
R5822:5827 Coq.Init.Logic <> :type_scope:x_'='_x not
R5802:5811 sha.spec_sha <> data_block def
R5821:5821 sha.sha_lemmas <> d var
R5816:5819 sha.sha_lemmas <> data var
R5813:5814 sha.sha_lemmas <> sh var
R5917:5921 msl.seplog <> :logic:x_'*'_x not
R5880:5885 msl.seplog <> :logic:x_'&&'_x not
R5829:5831 msl.seplog <> :logic:'!!'_x not
R5832:5846 floyd.data_at_lemmas <> offset_in_range def
R5879:5879 sha.sha_lemmas <> d var
R5862:5864 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R5849:5854 compcert.cfrontend.Ctypes <> sizeof def
R5856:5861 compcert.exportclight.Clightdefs <> tuchar def
R5865:5871 Coq.ZArith.Zcomplements <> Zlength def
R5873:5876 sha.sha_lemmas <> data var
R5886:5895 sha.spec_sha <> data_block def
R5916:5916 sha.sha_lemmas <> d var
R5901:5906 Coq.Lists.List <> firstn def
R5910:5913 sha.sha_lemmas <> data var
R5908:5908 sha.sha_lemmas <> n var
R5897:5898 sha.sha_lemmas <> sh var
R5922:5931 sha.spec_sha <> data_block def
R5952:5961 veric.expr <> offset_val def
R5987:5987 sha.sha_lemmas <> d var
R5964:5971 compcert.lib.Integers Int repr def
R5974:5981 Coq.ZArith.BinInt Z of_nat def
R5983:5983 sha.sha_lemmas <> n var
R5937:5941 Coq.Lists.List <> skipn def
R5945:5948 sha.sha_lemmas <> data var
R5943:5943 sha.sha_lemmas <> n var
R5933:5934 sha.sha_lemmas <> sh var
R5781:5784 Coq.Init.Peano <> :nat_scope:x_'<='_x not
R5780:5780 sha.sha_lemmas <> n var
R5785:5790 Coq.Init.Datatypes <> length def
R5792:5795 sha.sha_lemmas <> data var
R6032:6035 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R6025:6029 veric.expr <> isptr def
R6036:6036 Coq.Init.Logic <> :type_scope:'~'_x not
R6037:6041 veric.expr <> isptr def
R6032:6035 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R6025:6029 veric.expr <> isptr def
R6036:6036 Coq.Init.Logic <> :type_scope:'~'_x not
R6037:6041 veric.expr <> isptr def
R0:-1 sha.sha_lemmas <> y var
R0:-1 sha.sha_lemmas <> y var
R0:-1 sha.sha_lemmas <> y var
R0:-1 sha.sha_lemmas <> y var
R0:-1 sha.sha_lemmas <> y var
R0:-1 sha.sha_lemmas <> y var
R0:-1 sha.sha_lemmas <> y var
R0:-1 sha.sha_lemmas <> y var
R0:-1 sha.sha_lemmas <> y var
R0:-1 sha.sha_lemmas <> y var
R0:-1 sha.sha_lemmas <> y var
R0:-1 sha.sha_lemmas <> y var
R0:-1 sha.sha_lemmas <> y var
R0:-1 sha.sha_lemmas <> y var
R0:-1 sha.sha_lemmas <> y var
R0:-1 sha.sha_lemmas <> y var
R0:-1 sha.sha_lemmas <> y var
R6113:6120 msl.seplog <> pred_ext meth
R6113:6120 msl.seplog <> pred_ext meth
R6143:6152 sha.spec_sha <> data_block def
R6167:6172 compcert.cfrontend.Ctypes <> sizeof def
R6174:6179 compcert.exportclight.Clightdefs <> tuchar def
R6167:6172 compcert.cfrontend.Ctypes <> sizeof def
R6174:6179 compcert.exportclight.Clightdefs <> tuchar def
R6233:6240 floyd.client_lemmas <> prop_and thm
R6233:6240 floyd.client_lemmas <> prop_and thm
R6254:6262 msl.log_normalize <> andp_comm thm
R6265:6268 msl.seplog <> prop meth
R6271:6285 floyd.data_at_lemmas <> offset_in_range def
R6301:6303 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R6288:6293 compcert.cfrontend.Ctypes <> sizeof def
R6295:6300 compcert.exportclight.Clightdefs <> tuchar def
R6304:6310 Coq.ZArith.Zcomplements <> Zlength def
R6254:6262 msl.log_normalize <> andp_comm thm
R6265:6268 msl.seplog <> prop meth
R6271:6285 floyd.data_at_lemmas <> offset_in_range def
R6301:6303 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R6288:6293 compcert.cfrontend.Ctypes <> sizeof def
R6295:6300 compcert.exportclight.Clightdefs <> tuchar def
R6304:6310 Coq.ZArith.Zcomplements <> Zlength def
R6334:6343 msl.log_normalize <> andp_assoc thm
R6334:6343 msl.log_normalize <> andp_assoc thm
R6393:6400 msl.Axioms <> prop_ext prfax
R6393:6400 msl.Axioms <> prop_ext prfax
R6425:6434 sha.pure_lemmas <> Forall_app thm
R6425:6434 sha.pure_lemmas <> Forall_app thm
R6425:6434 sha.pure_lemmas <> Forall_app thm
R6449:6460 Coq.Lists.List <> firstn_skipn thm
R6449:6460 Coq.Lists.List <> firstn_skipn thm
R0:-1 sha.sha_lemmas <> y var
R6518:6520 Coq.Init.Logic <> :type_scope:x_'='_x not
R6518:6520 Coq.Init.Logic <> :type_scope:x_'='_x not
R6535:6542 floyd.data_at_lemmas <> add_andp thm
R6547:6548 msl.seplog <> :logic:'!!'_x not
R6549:6563 floyd.data_at_lemmas <> offset_in_range def
R6579:6581 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R6566:6571 compcert.cfrontend.Ctypes <> sizeof def
R6573:6578 compcert.exportclight.Clightdefs <> tuchar def
R6582:6588 Coq.ZArith.Zcomplements <> Zlength def
R6627:6634 floyd.data_at_lemmas <> array_at def
R6644:6649 compcert.cfrontend.Ctypes <> sizeof def
R6651:6656 compcert.exportclight.Clightdefs <> tuchar def
R6669:6677 Coq.ZArith.BinInt <> Zmult_1_l syndef
R6535:6542 floyd.data_at_lemmas <> add_andp thm
R6547:6548 msl.seplog <> :logic:'!!'_x not
R6549:6563 floyd.data_at_lemmas <> offset_in_range def
R6579:6581 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R6566:6571 compcert.cfrontend.Ctypes <> sizeof def
R6573:6578 compcert.exportclight.Clightdefs <> tuchar def
R6582:6588 Coq.ZArith.Zcomplements <> Zlength def
R6644:6649 compcert.cfrontend.Ctypes <> sizeof def
R6651:6656 compcert.exportclight.Clightdefs <> tuchar def
R6669:6677 Coq.ZArith.BinInt <> Zmult_1_l syndef
R6669:6677 Coq.ZArith.BinInt <> Zmult_1_l syndef
R6669:6677 Coq.ZArith.BinInt <> Zmult_1_l syndef
R6702:6710 msl.log_normalize <> andp_comm thm
R6702:6710 msl.log_normalize <> andp_comm thm
R6757:6764 Coq.ZArith.BinInt Z of_nat def
R6724:6744 floyd.array_lemmas <> split_offset_array_at thm
R6785:6799 Coq.ZArith.Zcomplements <> Zlength_correct thm
R6757:6764 Coq.ZArith.BinInt Z of_nat def
R6724:6744 floyd.array_lemmas <> split_offset_array_at thm
R6785:6799 Coq.ZArith.Zcomplements <> Zlength_correct thm
R6848:6856 msl.log_normalize <> andp_comm thm
R6848:6856 msl.log_normalize <> andp_comm thm
R6873:6880 floyd.data_at_lemmas <> add_andp thm
R6873:6880 floyd.data_at_lemmas <> add_andp thm
R6906:6920 floyd.data_at_lemmas <> offset_in_range def
R6936:6938 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R6923:6928 compcert.cfrontend.Ctypes <> sizeof def
R6930:6935 compcert.exportclight.Clightdefs <> tuchar def
R6985:6999 floyd.data_at_lemmas <> offset_in_range def
R7013:7030 compcert.lib.Integers Int unsigned_range thm
R6906:6920 floyd.data_at_lemmas <> offset_in_range def
R6936:6938 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R6923:6928 compcert.cfrontend.Ctypes <> sizeof def
R6930:6935 compcert.exportclight.Clightdefs <> tuchar def
R7013:7030 compcert.lib.Integers Int unsigned_range thm
R7101:7107 Coq.Logic.FunctionalExtensionality <> equal_f thm
R7116:7128 sha.sha_lemmas <> array_at_ext' thm
R7101:7107 Coq.Logic.FunctionalExtensionality <> equal_f thm
R7116:7128 sha.sha_lemmas <> array_at_ext' thm
R7156:7162 sha.spec_sha <> tuchars def
R7165:7169 floyd.data_at_lemmas <> ZnthV def
R7191:7198 msl.Coqlib2 <> if_false thm
R7191:7198 msl.Coqlib2 <> if_false thm
R7191:7198 msl.Coqlib2 <> if_false thm
R7191:7198 msl.Coqlib2 <> if_false thm
R7229:7235 Coq.Lists.List <> map_map thm
R7229:7235 Coq.Lists.List <> map_map thm
R7229:7235 Coq.Lists.List <> map_map thm
R7229:7235 Coq.Lists.List <> map_map thm
R7258:7265 floyd.assert_lemmas <> nth_map' thm
R7258:7265 floyd.assert_lemmas <> nth_map' thm
R7258:7265 floyd.assert_lemmas <> nth_map' thm
R7258:7265 floyd.assert_lemmas <> nth_map' thm
R7258:7265 floyd.assert_lemmas <> nth_map' thm
R7258:7265 floyd.assert_lemmas <> nth_map' thm
R7295:7308 sha.common_lemmas <> nth_firstn_low thm
R7295:7308 sha.common_lemmas <> nth_firstn_low thm
R7333:7340 Coq.ZArith.Znat Z2Nat id thm
R7333:7340 Coq.ZArith.Znat Z2Nat id thm
R7397:7408 Coq.ZArith.Znat Nat2Z inj_lt thm
R7397:7408 Coq.ZArith.Znat Nat2Z inj_lt thm
R7440:7452 Coq.Lists.List <> firstn_length thm
R7440:7452 Coq.Lists.List <> firstn_length thm
R7467:7471 Coq.Init.Peano <> min_l thm
R7467:7471 Coq.Init.Peano <> min_l thm
R7499:7506 Coq.ZArith.Znat Z2Nat id thm
R7499:7506 Coq.ZArith.Znat Z2Nat id thm
R7563:7574 Coq.ZArith.Znat Nat2Z inj_lt thm
R7563:7574 Coq.ZArith.Znat Nat2Z inj_lt thm
R7610:7617 Coq.ZArith.Znat Z2Nat id thm
R7610:7617 Coq.ZArith.Znat Z2Nat id thm
R7674:7685 Coq.ZArith.Znat Nat2Z inj_lt thm
R7674:7685 Coq.ZArith.Znat Nat2Z inj_lt thm
R7717:7731 Coq.ZArith.Zcomplements <> Zlength_correct thm
R7717:7731 Coq.ZArith.Zcomplements <> Zlength_correct thm
R7746:7758 Coq.Lists.List <> firstn_length thm
R7746:7758 Coq.Lists.List <> firstn_length thm
R7786:7790 Coq.Init.Peano <> min_l thm
R7786:7790 Coq.Init.Peano <> min_l thm
R7825:7832 compcert.lib.Integers Int repr def
R7835:7842 Coq.ZArith.BinInt Z of_nat def
R7854:7861 compcert.lib.Integers Int repr def
R7877:7879 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R7864:7869 compcert.cfrontend.Ctypes <> sizeof def
R7871:7876 compcert.exportclight.Clightdefs <> tuchar def
R7880:7887 Coq.ZArith.BinInt Z of_nat def
R7911:7923 floyd.assert_lemmas <> sizeof_tuchar thm
R7934:7942 Coq.ZArith.BinInt Z mul_1_l thm
R7854:7861 compcert.lib.Integers Int repr def
R7877:7879 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R7864:7869 compcert.cfrontend.Ctypes <> sizeof def
R7871:7876 compcert.exportclight.Clightdefs <> tuchar def
R7880:7887 Coq.ZArith.BinInt Z of_nat def
R7825:7832 compcert.lib.Integers Int repr def
R7835:7842 Coq.ZArith.BinInt Z of_nat def
R7911:7923 floyd.assert_lemmas <> sizeof_tuchar thm
R7934:7942 Coq.ZArith.BinInt Z mul_1_l thm
R7962:7968 Coq.Logic.FunctionalExtensionality <> equal_f thm
R7977:7989 sha.sha_lemmas <> array_at_ext' thm
R7962:7968 Coq.Logic.FunctionalExtensionality <> equal_f thm
R7977:7989 sha.sha_lemmas <> array_at_ext' thm
R8017:8023 sha.spec_sha <> tuchars def
R8026:8030 floyd.data_at_lemmas <> ZnthV def
R8052:8059 msl.Coqlib2 <> if_false thm
R8052:8059 msl.Coqlib2 <> if_false thm
R8052:8059 msl.Coqlib2 <> if_false thm
R8052:8059 msl.Coqlib2 <> if_false thm
R8090:8096 Coq.Lists.List <> map_map thm
R8090:8096 Coq.Lists.List <> map_map thm
R8090:8096 Coq.Lists.List <> map_map thm
R8090:8096 Coq.Lists.List <> map_map thm
R8119:8126 floyd.assert_lemmas <> nth_map' thm
R8119:8126 floyd.assert_lemmas <> nth_map' thm
R8119:8126 floyd.assert_lemmas <> nth_map' thm
R8119:8126 floyd.assert_lemmas <> nth_map' thm
R8119:8126 floyd.assert_lemmas <> nth_map' thm
R8119:8126 floyd.assert_lemmas <> nth_map' thm
R8178:8186 sha.pure_lemmas <> nth_skipn thm
R8178:8186 sha.pure_lemmas <> nth_skipn thm
R8220:8232 Coq.ZArith.Znat Z2Nat inj_add thm
R8220:8232 Coq.ZArith.Znat Z2Nat inj_add thm
R8256:8263 Coq.ZArith.Znat Nat2Z id thm
R8256:8263 Coq.ZArith.Znat Nat2Z id thm
R8295:8306 sha.SHA256 <> skipn_length thm
R8295:8306 sha.SHA256 <> skipn_length thm
R8338:8352 Coq.ZArith.Zcomplements <> Zlength_correct thm
R8338:8352 Coq.ZArith.Zcomplements <> Zlength_correct thm
R8376:8388 Coq.ZArith.Znat Nat2Z inj_sub thm
R8376:8388 Coq.ZArith.Znat Nat2Z inj_sub thm
R8422:8429 Coq.ZArith.Znat Z2Nat id thm
R8422:8429 Coq.ZArith.Znat Z2Nat id thm
R8460:8471 Coq.ZArith.Znat Nat2Z inj_lt thm
R8460:8471 Coq.ZArith.Znat Nat2Z inj_lt thm
R8502:8509 Coq.ZArith.Znat Z2Nat id thm
R8502:8509 Coq.ZArith.Znat Z2Nat id thm
R8559:8573 Coq.ZArith.Zcomplements <> Zlength_correct thm
R8559:8573 Coq.ZArith.Zcomplements <> Zlength_correct thm
R8597:8609 Coq.ZArith.Znat Nat2Z inj_sub thm
R8597:8609 Coq.ZArith.Znat Nat2Z inj_sub thm
R8637:8648 Coq.ZArith.Znat Nat2Z inj_lt thm
R8637:8648 Coq.ZArith.Znat Nat2Z inj_lt thm
R8694:8696 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x not
R8681:8683 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R8684:8691 Coq.ZArith.BinInt Z of_nat def
R8697:8703 Coq.ZArith.Zcomplements <> Zlength def
R8694:8696 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x not
R8681:8683 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R8684:8691 Coq.ZArith.BinInt Z of_nat def
R8697:8703 Coq.ZArith.Zcomplements <> Zlength def
R8739:8746 Coq.ZArith.Znat Z2Nat id thm
R8750:8752 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R8753:8760 Coq.ZArith.BinInt Z of_nat def
R8739:8746 Coq.ZArith.Znat Z2Nat id thm
R8750:8752 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R8753:8760 Coq.ZArith.BinInt Z of_nat def
R8794:8808 Coq.ZArith.Zcomplements <> Zlength_correct thm
R8794:8808 Coq.ZArith.Zcomplements <> Zlength_correct thm
R8827:8838 Coq.ZArith.Znat Nat2Z inj_lt thm
R8827:8838 Coq.ZArith.Znat Nat2Z inj_lt thm
R8866:8880 Coq.ZArith.Zcomplements <> Zlength_correct thm
R8866:8880 Coq.ZArith.Zcomplements <> Zlength_correct thm
R8866:8880 Coq.ZArith.Zcomplements <> Zlength_correct thm
R8866:8880 Coq.ZArith.Zcomplements <> Zlength_correct thm
R8895:8906 sha.SHA256 <> skipn_length thm
R8895:8906 sha.SHA256 <> skipn_length thm
R8933:8945 Coq.ZArith.Znat Nat2Z inj_sub thm
R8933:8945 Coq.ZArith.Znat Nat2Z inj_sub thm
prf 8982:8998 <> split3_data_block
R9073:9078 Coq.Init.Logic <> :type_scope:x_'='_x not
R9053:9062 sha.spec_sha <> data_block def
R9072:9072 sha.sha_lemmas <> d var
R9067:9070 sha.sha_lemmas <> data var
R9064:9065 sha.sha_lemmas <> sh var
R9131:9137 msl.seplog <> :logic:x_'&&'_x not
R9338:9338 msl.seplog <> :logic:x_'&&'_x not
R9080:9082 msl.seplog <> :logic:'!!'_x not
R9083:9097 floyd.data_at_lemmas <> offset_in_range def
R9130:9130 sha.sha_lemmas <> d var
R9113:9115 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R9100:9105 compcert.cfrontend.Ctypes <> sizeof def
R9107:9112 compcert.exportclight.Clightdefs <> tuchar def
R9116:9122 Coq.ZArith.Zcomplements <> Zlength def
R9124:9127 sha.sha_lemmas <> data var
R9255:9259 msl.seplog <> :logic:x_'*'_x not
R9170:9174 msl.seplog <> :logic:x_'*'_x not
R9138:9147 sha.spec_sha <> data_block def
R9169:9169 sha.sha_lemmas <> d var
R9153:9158 Coq.Lists.List <> firstn def
R9163:9166 sha.sha_lemmas <> data var
R9160:9161 sha.sha_lemmas <> lo var
R9149:9150 sha.sha_lemmas <> sh var
R9175:9184 sha.spec_sha <> data_block def
R9217:9226 veric.expr <> offset_val def
R9253:9253 sha.sha_lemmas <> d var
R9229:9236 compcert.lib.Integers Int repr def
R9239:9246 Coq.ZArith.BinInt Z of_nat def
R9248:9249 sha.sha_lemmas <> lo var
R9190:9195 Coq.Lists.List <> firstn def
R9200:9204 Coq.Lists.List <> skipn def
R9209:9212 sha.sha_lemmas <> data var
R9206:9207 sha.sha_lemmas <> lo var
R9197:9197 sha.sha_lemmas <> n var
R9186:9187 sha.sha_lemmas <> sh var
R9260:9269 sha.spec_sha <> data_block def
R9296:9305 veric.expr <> offset_val def
R9336:9336 sha.sha_lemmas <> d var
R9308:9315 compcert.lib.Integers Int repr def
R9318:9325 Coq.ZArith.BinInt Z of_nat def
R9330:9330 Coq.Init.Peano <> :nat_scope:x_'+'_x not
R9328:9329 sha.sha_lemmas <> lo var
R9331:9331 sha.sha_lemmas <> n var
R9275:9279 Coq.Lists.List <> skipn def
R9288:9291 sha.sha_lemmas <> data var
R9284:9284 Coq.Init.Peano <> :nat_scope:x_'+'_x not
R9282:9283 sha.sha_lemmas <> lo var
R9285:9285 sha.sha_lemmas <> n var
R9271:9272 sha.sha_lemmas <> sh var
R9032:9035 Coq.Init.Peano <> :nat_scope:x_'<='_x not
R9030:9030 Coq.Init.Peano <> :nat_scope:x_'+'_x not
R9028:9029 sha.sha_lemmas <> lo var
R9031:9031 sha.sha_lemmas <> n var
R9036:9041 Coq.Init.Datatypes <> length def
R9043:9046 sha.sha_lemmas <> data var
R9406:9408 Coq.Init.Peano <> :nat_scope:x_'+'_x not
R9375:9391 sha.sha_lemmas <> split2_data_block thm
R9406:9408 Coq.Init.Peano <> :nat_scope:x_'+'_x not
R9375:9391 sha.sha_lemmas <> split2_data_block thm
R9512:9524 Coq.Lists.List <> firstn_length thm
R9535:9543 Coq.Arith.Min <> min_l def
R9474:9479 Coq.Lists.List <> firstn def
R9484:9486 Coq.Init.Peano <> :nat_scope:x_'+'_x not
R9432:9448 sha.sha_lemmas <> split2_data_block thm
R9474:9479 Coq.Lists.List <> firstn def
R9484:9486 Coq.Init.Peano <> :nat_scope:x_'+'_x not
R9432:9448 sha.sha_lemmas <> split2_data_block thm
R9512:9524 Coq.Lists.List <> firstn_length thm
R9535:9543 Coq.Arith.Min <> min_l def
R9623:9632 msl.seplog <> ::x_'|--'_x not
R9573:9574 msl.seplog <> :logic:'!!'_x not
R9575:9589 floyd.data_at_lemmas <> offset_in_range def
R9605:9607 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R9592:9597 compcert.cfrontend.Ctypes <> sizeof def
R9599:9604 compcert.exportclight.Clightdefs <> tuchar def
R9608:9614 Coq.ZArith.Zcomplements <> Zlength def
R9633:9635 msl.seplog <> :logic:'!!'_x not
R9636:9650 floyd.data_at_lemmas <> offset_in_range def
R9666:9668 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R9653:9658 compcert.cfrontend.Ctypes <> sizeof def
R9660:9665 compcert.exportclight.Clightdefs <> tuchar def
R9669:9675 Coq.ZArith.Zcomplements <> Zlength def
R9678:9683 Coq.Lists.List <> firstn def
R9688:9690 Coq.Init.Peano <> :nat_scope:x_'+'_x not
R9623:9632 msl.seplog <> ::x_'|--'_x not
R9573:9574 msl.seplog <> :logic:'!!'_x not
R9575:9589 floyd.data_at_lemmas <> offset_in_range def
R9605:9607 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R9592:9597 compcert.cfrontend.Ctypes <> sizeof def
R9599:9604 compcert.exportclight.Clightdefs <> tuchar def
R9608:9614 Coq.ZArith.Zcomplements <> Zlength def
R9633:9635 msl.seplog <> :logic:'!!'_x not
R9636:9650 floyd.data_at_lemmas <> offset_in_range def
R9666:9668 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R9653:9658 compcert.cfrontend.Ctypes <> sizeof def
R9660:9665 compcert.exportclight.Clightdefs <> tuchar def
R9669:9675 Coq.ZArith.Zcomplements <> Zlength def
R9678:9683 Coq.Lists.List <> firstn def
R9688:9690 Coq.Init.Peano <> :nat_scope:x_'+'_x not
R9725:9730 compcert.cfrontend.Ctypes <> sizeof def
R9732:9737 compcert.exportclight.Clightdefs <> tuchar def
R9725:9730 compcert.cfrontend.Ctypes <> sizeof def
R9732:9737 compcert.exportclight.Clightdefs <> tuchar def
R9822:9828 Coq.ZArith.Zcomplements <> Zlength def
R9778:9796 floyd.array_lemmas <> offset_in_range_mid thm
R9822:9828 Coq.ZArith.Zcomplements <> Zlength def
R9778:9796 floyd.array_lemmas <> offset_in_range_mid thm
R9866:9880 Coq.ZArith.Zcomplements <> Zlength_correct thm
R9866:9880 Coq.ZArith.Zcomplements <> Zlength_correct thm
R9866:9880 Coq.ZArith.Zcomplements <> Zlength_correct thm
R9866:9880 Coq.ZArith.Zcomplements <> Zlength_correct thm
R9895:9907 Coq.Lists.List <> firstn_length thm
R9918:9926 Coq.Arith.Min <> min_l def
R9895:9907 Coq.Lists.List <> firstn_length thm
R9918:9926 Coq.Arith.Min <> min_l def
R9966:9971 Coq.ZArith.Znat <> inj_le def
R9966:9971 Coq.ZArith.Znat <> inj_le def
R9989:9997 Coq.ZArith.BinInt <> Zmult_0_r syndef
R9989:9997 Coq.ZArith.BinInt <> Zmult_0_r syndef
R10011:10025 floyd.data_at_lemmas <> offset_in_range def
R10061:10078 compcert.lib.Integers Int unsigned_range thm
R10061:10078 compcert.lib.Integers Int unsigned_range thm
R10101:10108 floyd.data_at_lemmas <> add_andp thm
R10101:10108 floyd.data_at_lemmas <> add_andp thm
R10187:10199 sha.pure_lemmas <> firstn_firstn thm
R10187:10199 sha.pure_lemmas <> firstn_firstn thm
R10210:10221 sha.pure_lemmas <> skipn_firstn thm
R10210:10221 sha.pure_lemmas <> skipn_firstn thm
R10319:10324 sha.pure_lemmas <> CBLOCK def
R10319:10324 sha.pure_lemmas <> CBLOCK def
R10376:10381 sha.pure_lemmas <> LBLOCK def
R10376:10381 sha.pure_lemmas <> LBLOCK def
R10405:10413 sha.pure_lemmas <> LBLOCK_eq thm
R10348:10356 sha.pure_lemmas <> CBLOCK_eq thm
prf 10547:10567 <> mapsto_tuchar_isbyteZ
R10614:10620 Coq.Init.Logic <> :type_scope:x_'='_x not
R10587:10592 veric.SeparationLogic <> mapsto def
R10607:10610 compcert.common.Values <> Vint constr
R10612:10612 sha.sha_lemmas <> i var
R10604:10604 sha.sha_lemmas <> v var
R10597:10602 compcert.exportclight.Clightdefs <> tuchar def
R10594:10595 sha.sha_lemmas <> sh var
R10653:10656 msl.seplog <> :logic:x_'&&'_x not
R10621:10623 msl.seplog <> :logic:'!!'_x not
R10626:10629 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R10644:10646 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R10630:10641 compcert.lib.Integers Int unsigned def
R10643:10643 sha.sha_lemmas <> i var
R10630:10641 compcert.lib.Integers Int unsigned def
R10643:10643 sha.sha_lemmas <> i var
R10657:10662 veric.SeparationLogic <> mapsto def
R10677:10680 compcert.common.Values <> Vint constr
R10682:10682 sha.sha_lemmas <> i var
R10674:10674 sha.sha_lemmas <> v var
R10667:10672 compcert.exportclight.Clightdefs <> tuchar def
R10664:10665 sha.sha_lemmas <> sh var
R10707:10724 veric.SeparationLogic <> mapsto_value_range thm
R10707:10724 veric.SeparationLogic <> mapsto_value_range thm
prf 10739:10761 <> array_at_tuchar_isbyteZ
R10848:10852 Coq.Init.Logic <> :type_scope:x_'='_x not
R10784:10791 floyd.data_at_lemmas <> array_at def
R10847:10847 sha.sha_lemmas <> v var
R10835:10842 Coq.ZArith.BinInt Z of_nat def
R10844:10844 sha.sha_lemmas <> n var
R10804:10808 floyd.data_at_lemmas <> ZnthV def
R10818:10820 Coq.Lists.List <> map def
R10827:10828 sha.sha_lemmas <> dd var
R10822:10825 compcert.common.Values <> Vint constr
R10810:10815 compcert.exportclight.Clightdefs <> tuchar def
R10800:10801 sha.sha_lemmas <> sh var
R10793:10798 compcert.exportclight.Clightdefs <> tuchar def
R10903:10907 msl.seplog <> :logic:x_'&&'_x not
R10853:10855 msl.seplog <> :logic:'!!'_x not
R10856:10861 Coq.Lists.List <> Forall ind
R10872:10877 Coq.Lists.List <> firstn def
R10882:10884 Coq.Lists.List <> map def
R10899:10900 sha.sha_lemmas <> dd var
R10886:10897 compcert.lib.Integers Int unsigned def
R10879:10879 sha.sha_lemmas <> n var
R10863:10869 sha.SHA256 <> isbyteZ def
R10908:10915 floyd.data_at_lemmas <> array_at def
R10971:10971 sha.sha_lemmas <> v var
R10959:10966 Coq.ZArith.BinInt Z of_nat def
R10968:10968 sha.sha_lemmas <> n var
R10928:10932 floyd.data_at_lemmas <> ZnthV def
R10942:10944 Coq.Lists.List <> map def
R10951:10952 sha.sha_lemmas <> dd var
R10946:10949 compcert.common.Values <> Vint constr
R10934:10939 compcert.exportclight.Clightdefs <> tuchar def
R10924:10925 sha.sha_lemmas <> sh var
R10917:10922 compcert.exportclight.Clightdefs <> tuchar def
R10995:11002 msl.seplog <> pred_ext meth
R10995:11002 msl.seplog <> pred_ext meth
R11027:11036 msl.seplog <> andp_right meth
R11027:11036 msl.seplog <> andp_right meth
R11111:11120 msl.seplog <> prop_right meth
R11111:11120 msl.seplog <> prop_right meth
R11144:11148 Coq.ZArith.Znat <> inj_S syndef
R11144:11148 Coq.ZArith.Znat <> inj_S syndef
R11158:11163 Coq.ZArith.BinInt Z succ def
R11192:11201 msl.seplog <> prop_right meth
R11192:11201 msl.seplog <> prop_right meth
R11270:11273 msl.seplog <> :logic:x_'&&'_x not
R11243:11245 msl.seplog <> :logic:'!!'_x not
R11246:11252 sha.SHA256 <> isbyteZ def
R11255:11266 compcert.lib.Integers Int unsigned def
R11274:11276 msl.seplog <> :logic:'!!'_x not
R11277:11282 Coq.Lists.List <> Forall ind
R11293:11298 Coq.Lists.List <> firstn def
R11303:11305 Coq.Lists.List <> map def
R11307:11318 compcert.lib.Integers Int unsigned def
R11284:11290 sha.SHA256 <> isbyteZ def
R11223:11235 msl.seplog <> derives_trans meth
R11270:11273 msl.seplog <> :logic:x_'&&'_x not
R11243:11245 msl.seplog <> :logic:'!!'_x not
R11246:11252 sha.SHA256 <> isbyteZ def
R11255:11266 compcert.lib.Integers Int unsigned def
R11274:11276 msl.seplog <> :logic:'!!'_x not
R11277:11282 Coq.Lists.List <> Forall ind
R11293:11298 Coq.Lists.List <> firstn def
R11303:11305 Coq.Lists.List <> map def
R11307:11318 compcert.lib.Integers Int unsigned def
R11284:11290 sha.SHA256 <> isbyteZ def
R11223:11235 msl.seplog <> derives_trans meth
R11351:11360 msl.seplog <> andp_right meth
R11351:11360 msl.seplog <> andp_right meth
R11400:11404 floyd.data_at_lemmas <> ZnthV def
R11420:11427 floyd.data_at_lemmas <> array_at def
R11448:11456 floyd.data_at_lemmas <> rangespec def
R11459:11468 floyd.data_at_lemmas <> rangespec' def
R11479:11487 Coq.ZArith.BinInt Z sub_0_r thm
R11479:11487 Coq.ZArith.BinInt Z sub_0_r thm
R11497:11504 compcert.lib.Coqlib <> nat_of_Z def
R11515:11527 Coq.ZArith.Znat Z2Nat inj_add thm
R11515:11527 Coq.ZArith.Znat Z2Nat inj_add thm
R11545:11552 Coq.ZArith.BinInt Z to_nat def
R11545:11552 Coq.ZArith.BinInt Z to_nat def
R11563:11570 Coq.ZArith.Znat Nat2Z id thm
R11563:11570 Coq.ZArith.Znat Nat2Z id thm
R11583:11583 Coq.Init.Peano <> :nat_scope:x_'+'_x not
R11597:11597 Coq.Init.Datatypes <> S constr
R11597:11597 Coq.Init.Datatypes <> S constr
R11583:11583 Coq.Init.Peano <> :nat_scope:x_'+'_x not
R11620:11627 msl.Coqlib2 <> if_false thm
R11620:11627 msl.Coqlib2 <> if_false thm
R11645:11647 Coq.Lists.List <> nth def
R11645:11647 Coq.Lists.List <> nth def
R11727:11729 msl.seplog <> :logic:x_'*'_x not
R11676:11682 floyd.data_at_lemmas <> data_at def
R11704:11714 floyd.assert_lemmas <> add_ptr_int def
R11716:11721 compcert.exportclight.Clightdefs <> tuchar def
R11695:11698 compcert.common.Values <> Vint constr
R11687:11692 compcert.exportclight.Clightdefs <> tuchar def
R11730:11731 msl.seplog <> TT meth
R11656:11668 msl.seplog <> derives_trans meth
R11727:11729 msl.seplog <> :logic:x_'*'_x not
R11676:11682 floyd.data_at_lemmas <> data_at def
R11704:11714 floyd.assert_lemmas <> add_ptr_int def
R11716:11721 compcert.exportclight.Clightdefs <> tuchar def
R11695:11698 compcert.common.Values <> Vint constr
R11687:11692 compcert.exportclight.Clightdefs <> tuchar def
R11730:11731 msl.seplog <> TT meth
R11656:11668 msl.seplog <> derives_trans meth
R11750:11756 floyd.data_at_lemmas <> data_at def
R11773:11781 Coq.Init.Logic <> eq_rect_r def
R11818:11828 floyd.assert_lemmas <> add_ptr_int def
R11848:11854 compcert.lib.Integers Int add def
R11860:11866 compcert.lib.Integers Int mul def
R11892:11899 compcert.lib.Integers Int repr def
R11869:11876 compcert.lib.Integers Int repr def
R11879:11883 compcert.lib.Coqlib <> align def
R11848:11854 compcert.lib.Integers Int add def
R11860:11866 compcert.lib.Integers Int mul def
R11892:11899 compcert.lib.Integers Int repr def
R11869:11876 compcert.lib.Integers Int repr def
R11879:11883 compcert.lib.Coqlib <> align def
R11919:11924 floyd.data_at_lemmas <> spacer def
R11957:11962 compcert.exportclight.Clightdefs <> tuchar def
R11957:11962 compcert.exportclight.Clightdefs <> tuchar def
R11973:11993 sha.sha_lemmas <> mapsto_tuchar_isbyteZ thm
R11973:11993 sha.sha_lemmas <> mapsto_tuchar_isbyteZ thm
R12013:12022 msl.seplog <> prop_right meth
R12013:12022 msl.seplog <> prop_right meth
R12089:12109 floyd.array_lemmas <> split_offset_array_at thm
R12089:12109 floyd.array_lemmas <> split_offset_array_at thm
R12206:12209 msl.seplog <> :logic:x_'*'_x not
R12204:12205 msl.seplog <> TT meth
R12210:12211 msl.seplog <> :logic:'!!'_x not
R12212:12217 Coq.Lists.List <> Forall ind
R12228:12233 Coq.Lists.List <> firstn def
R12238:12240 Coq.Lists.List <> map def
R12242:12253 compcert.lib.Integers Int unsigned def
R12219:12225 sha.SHA256 <> isbyteZ def
R12184:12196 msl.seplog <> derives_trans meth
R12206:12209 msl.seplog <> :logic:x_'*'_x not
R12204:12205 msl.seplog <> TT meth
R12210:12211 msl.seplog <> :logic:'!!'_x not
R12212:12217 Coq.Lists.List <> Forall ind
R12228:12233 Coq.Lists.List <> firstn def
R12238:12240 Coq.Lists.List <> map def
R12242:12253 compcert.lib.Integers Int unsigned def
R12219:12225 sha.SHA256 <> isbyteZ def
R12184:12196 msl.seplog <> derives_trans meth
R12274:12287 msl.seplog <> sepcon_derives meth
R12274:12287 msl.seplog <> sepcon_derives meth
R12312:12321 veric.expr <> offset_val def
R12356:12365 veric.expr <> offset_val def
R12368:12375 compcert.lib.Integers Int repr def
R12324:12331 compcert.lib.Integers Int repr def
R12347:12349 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R12334:12339 compcert.cfrontend.Ctypes <> sizeof def
R12341:12346 compcert.exportclight.Clightdefs <> tuchar def
R12312:12321 veric.expr <> offset_val def
R12356:12365 veric.expr <> offset_val def
R12368:12375 compcert.lib.Integers Int repr def
R12324:12331 compcert.lib.Integers Int repr def
R12347:12349 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R12334:12339 compcert.cfrontend.Ctypes <> sizeof def
R12341:12346 compcert.exportclight.Clightdefs <> tuchar def
R12446:12458 msl.seplog <> derives_trans meth
R12477:12486 veric.expr <> offset_val def
R12489:12496 compcert.lib.Integers Int repr def
R12446:12458 msl.seplog <> derives_trans meth
R12477:12486 veric.expr <> offset_val def
R12489:12496 compcert.lib.Integers Int repr def
R12524:12536 floyd.assert_lemmas <> derives_refl' thm
R12524:12536 floyd.assert_lemmas <> derives_refl' thm
R12549:12558 veric.expr <> offset_val def
R12582:12591 veric.expr <> offset_val def
R12637:12646 veric.expr <> offset_val def
R12649:12656 compcert.lib.Integers Int repr def
R12594:12601 compcert.lib.Integers Int repr def
R12617:12619 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R12604:12609 compcert.cfrontend.Ctypes <> sizeof def
R12611:12616 compcert.exportclight.Clightdefs <> tuchar def
R12561:12568 compcert.lib.Integers Int repr def
R12672:12681 veric.expr <> offset_val def
R12684:12691 compcert.lib.Integers Int repr def
R12672:12681 veric.expr <> offset_val def
R12684:12691 compcert.lib.Integers Int repr def
R12549:12558 veric.expr <> offset_val def
R12582:12591 veric.expr <> offset_val def
R12637:12646 veric.expr <> offset_val def
R12649:12656 compcert.lib.Integers Int repr def
R12594:12601 compcert.lib.Integers Int repr def
R12617:12619 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R12604:12609 compcert.cfrontend.Ctypes <> sizeof def
R12611:12616 compcert.exportclight.Clightdefs <> tuchar def
R12561:12568 compcert.lib.Integers Int repr def
R12706:12712 Coq.Logic.FunctionalExtensionality <> equal_f thm
R12706:12712 Coq.Logic.FunctionalExtensionality <> equal_f thm
R12721:12733 sha.sha_lemmas <> array_at_ext' thm
R12721:12733 sha.sha_lemmas <> array_at_ext' thm
R12762:12766 floyd.data_at_lemmas <> ZnthV def
R12812:12819 Coq.ZArith.BinInt Z to_nat def
R12824:12826 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R12837:12837 Coq.Init.Datatypes <> S constr
R12840:12847 Coq.ZArith.BinInt Z to_nat def
R12837:12837 Coq.Init.Datatypes <> S constr
R12840:12847 Coq.ZArith.BinInt Z to_nat def
R12812:12819 Coq.ZArith.BinInt Z to_nat def
R12824:12826 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R12879:12881 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R12894:12894 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R12894:12894 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R12879:12881 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R12919:12931 Coq.ZArith.Znat Z2Nat inj_add thm
R12919:12931 Coq.ZArith.Znat Z2Nat inj_add thm
R12985:12994 veric.expr <> offset_val def
R12997:13003 compcert.lib.Integers Int add def
R13026:13045 compcert.lib.Integers Int unsigned_repr_eq thm
R13026:13045 compcert.lib.Integers Int unsigned_repr_eq thm
R13026:13045 compcert.lib.Integers Int unsigned_repr_eq thm
R13026:13045 compcert.lib.Integers Int unsigned_repr_eq thm
R13026:13045 compcert.lib.Integers Int unsigned_repr_eq thm
R13026:13045 compcert.lib.Integers Int unsigned_repr_eq thm
R13057:13073 Coq.ZArith.Zdiv <> Zplus_mod_idemp_r thm
R13057:13073 Coq.ZArith.Zdiv <> Zplus_mod_idemp_r thm
R13085:13101 Coq.ZArith.Zdiv <> Zplus_mod_idemp_l thm
R13085:13101 Coq.ZArith.Zdiv <> Zplus_mod_idemp_l thm
R13114:13118 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R13119:13129 compcert.lib.Integers Int modulus def
R13114:13118 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R13119:13129 compcert.lib.Integers Int modulus def
R13177:13179 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R13173:13175 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R13158:13169 compcert.lib.Integers Int unsigned def
R13190:13201 compcert.lib.Integers Int unsigned def
R13190:13201 compcert.lib.Integers Int unsigned def
R13177:13179 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R13173:13175 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R13158:13169 compcert.lib.Integers Int unsigned def
R13229:13248 compcert.lib.Integers Int unsigned_repr_eq thm
R13229:13248 compcert.lib.Integers Int unsigned_repr_eq thm
R13260:13276 compcert.lib.Integers Int repr_unsigned thm
R13260:13276 compcert.lib.Integers Int repr_unsigned thm
R13313:13319 msl.log_normalize <> andp_TT thm
R13322:13324 msl.seplog <> :logic:'!!'_x not
R13313:13319 msl.log_normalize <> andp_TT thm
R13322:13324 msl.seplog <> :logic:'!!'_x not
prf 13353:13370 <> data_block_isbyteZ
R13412:13414 Coq.Init.Logic <> :type_scope:x_'='_x not
R13392:13401 sha.spec_sha <> data_block def
R13411:13411 sha.sha_lemmas <> v var
R13406:13409 sha.sha_lemmas <> data var
R13403:13404 sha.sha_lemmas <> sh var
R13437:13440 msl.seplog <> :logic:x_'&&'_x not
R13415:13417 msl.seplog <> :logic:'!!'_x not
R13418:13423 Coq.Lists.List <> Forall ind
R13433:13436 sha.sha_lemmas <> data var
R13425:13431 sha.SHA256 <> isbyteZ def
R13441:13450 sha.spec_sha <> data_block def
R13460:13460 sha.sha_lemmas <> v var
R13455:13458 sha.sha_lemmas <> data var
R13452:13453 sha.sha_lemmas <> sh var
R13477:13486 sha.spec_sha <> data_block def
R13539:13546 msl.Axioms <> prop_ext prfax
R13539:13546 msl.Axioms <> prop_ext prfax
R0:-1 sha.sha_lemmas <> y var
prf 13572:13592 <> cVint_force_int_ZnthV
R13733:13738 Coq.Init.Logic <> :type_scope:x_'='_x not
R13654:13661 floyd.data_at_lemmas <> array_at def
R13731:13732 sha.sha_lemmas <> hi var
R13674:13678 sha.spec_sha <> cVint def
R13690:13693 floyd.assert_lemmas <> ::x_'oo'_x not
R13681:13689 veric.expr <> force_int def
R13694:13698 floyd.data_at_lemmas <> ZnthV def
R13708:13710 Coq.Lists.List <> map def
R13717:13724 sha.sha_lemmas <> contents var
R13712:13715 compcert.common.Values <> Vint constr
R13700:13705 compcert.exportclight.Clightdefs <> tuchar def
R13670:13671 sha.sha_lemmas <> sh var
R13663:13668 compcert.exportclight.Clightdefs <> tuchar def
R13739:13746 floyd.data_at_lemmas <> array_at def
R13795:13796 sha.sha_lemmas <> hi var
R13759:13763 floyd.data_at_lemmas <> ZnthV def
R13773:13775 Coq.Lists.List <> map def
R13782:13789 sha.sha_lemmas <> contents var
R13777:13780 compcert.common.Values <> Vint constr
R13765:13770 compcert.exportclight.Clightdefs <> tuchar def
R13755:13756 sha.sha_lemmas <> sh var
R13748:13753 compcert.exportclight.Clightdefs <> tuchar def
R13625:13628 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R13623:13624 sha.sha_lemmas <> hi var
R13629:13635 Coq.ZArith.Zcomplements <> Zlength def
R13637:13644 sha.sha_lemmas <> contents var
R13813:13817 floyd.data_at_lemmas <> ZnthV def
R13841:13852 floyd.array_lemmas <> array_at_ext thm
R13841:13852 floyd.array_lemmas <> array_at_ext thm
R13870:13874 sha.spec_sha <> cVint def
R13876:13889 Coq.Program.Basics <> compose def
R13925:13927 Coq.Init.Peano <> :nat_scope:x_'<'_x not
R13915:13922 Coq.ZArith.BinInt Z to_nat def
R13928:13933 Coq.Init.Datatypes <> length def
R13925:13927 Coq.Init.Peano <> :nat_scope:x_'<'_x not
R13915:13922 Coq.ZArith.BinInt Z to_nat def
R13928:13933 Coq.Init.Datatypes <> length def
R13956:13967 Coq.ZArith.Znat Nat2Z inj_lt thm
R13956:13967 Coq.ZArith.Znat Nat2Z inj_lt thm
R13981:13995 Coq.ZArith.Zcomplements <> Zlength_correct thm
R14006:14013 Coq.ZArith.Znat Z2Nat id thm
R13981:13995 Coq.ZArith.Zcomplements <> Zlength_correct thm
R14006:14013 Coq.ZArith.Znat Z2Nat id thm
R14075:14082 Coq.ZArith.BinInt Z to_nat def
R14075:14082 Coq.ZArith.BinInt Z to_nat def
def 14180:14185 <> f_upto
R14200:14206 floyd.data_at_lemmas <> reptype def
R14208:14208 sha.sha_lemmas <> t var
R14195:14195 Coq.Numbers.BinNums <> Z ind
R14219:14219 Coq.Numbers.BinNums <> Z ind
R14226:14226 Coq.Numbers.BinNums <> Z ind
R14231:14237 floyd.data_at_lemmas <> reptype def
R14239:14239 sha.sha_lemmas <> t var
R14248:14250 compcert.lib.Coqlib <> zlt def
R14254:14258 sha.sha_lemmas <> bound var
R14252:14252 sha.sha_lemmas <> i var
R14274:14284 floyd.data_at_lemmas <> default_val def
R14286:14286 sha.sha_lemmas <> t var
R14265:14265 sha.sha_lemmas <> f var
R14267:14267 sha.sha_lemmas <> i var
prf 14296:14313 <> array_at_f_upto_lo
R14389:14391 Coq.Init.Logic <> :type_scope:x_'='_x not
R14349:14356 floyd.data_at_lemmas <> array_at def
R14387:14388 sha.sha_lemmas <> hi var
R14384:14385 sha.sha_lemmas <> lo var
R14364:14369 sha.sha_lemmas <> f_upto def
R14380:14381 sha.sha_lemmas <> lo var
R14371:14378 sha.sha_lemmas <> contents var
R14360:14361 sha.sha_lemmas <> sh var
R14358:14358 sha.sha_lemmas <> t var
R14392:14400 floyd.data_at_lemmas <> array_at_ def
R14410:14411 sha.sha_lemmas <> hi var
R14407:14408 sha.sha_lemmas <> lo var
R14404:14405 sha.sha_lemmas <> sh var
R14402:14402 sha.sha_lemmas <> t var
R14435:14446 floyd.array_lemmas <> array_at_ext thm
R14435:14446 floyd.array_lemmas <> array_at_ext thm
R14464:14469 sha.sha_lemmas <> f_upto def
