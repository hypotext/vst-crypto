DIGEST 05581b0968ed873df0df71e1457ca2ef
Fsha.spec_sha
R72:86 floyd.proofauto <> <> lib
R126:132 sha.sha <> <> lib
R150:159 sha.SHA256 <> <> lib
def 198:206 <> s256state
R220:223 Coq.Init.Datatypes <> :type_scope:x_'*'_x not
R254:254 Coq.Init.Datatypes <> :type_scope:x_'*'_x not
R212:215 Coq.Init.Datatypes <> list ind
R217:219 compcert.common.Values <> val ind
R227:230 Coq.Init.Datatypes <> :type_scope:x_'*'_x not
R253:253 Coq.Init.Datatypes <> :type_scope:x_'*'_x not
R224:226 compcert.common.Values <> val ind
R234:237 Coq.Init.Datatypes <> :type_scope:x_'*'_x not
R252:252 Coq.Init.Datatypes <> :type_scope:x_'*'_x not
R231:233 compcert.common.Values <> val ind
R246:248 Coq.Init.Datatypes <> :type_scope:x_'*'_x not
R238:241 Coq.Init.Datatypes <> list ind
R243:245 compcert.common.Values <> val ind
R249:251 compcert.common.Values <> val ind
def 274:279 <> s256_h
R285:293 sha.spec_sha <> s256state def
R299:301 Coq.Init.Datatypes <> fst def
R303:303 sha.spec_sha <> s var
def 317:323 <> s256_Nl
R329:337 sha.spec_sha <> s256state def
R343:345 Coq.Init.Datatypes <> fst def
R348:350 Coq.Init.Datatypes <> snd def
R352:352 sha.spec_sha <> s var
def 367:373 <> s256_Nh
R379:387 sha.spec_sha <> s256state def
R393:395 Coq.Init.Datatypes <> fst def
R398:400 Coq.Init.Datatypes <> snd def
R403:405 Coq.Init.Datatypes <> snd def
R407:407 sha.spec_sha <> s var
def 423:431 <> s256_data
R437:445 sha.spec_sha <> s256state def
R451:453 Coq.Init.Datatypes <> fst def
R456:458 Coq.Init.Datatypes <> snd def
R461:463 Coq.Init.Datatypes <> snd def
R466:468 Coq.Init.Datatypes <> snd def
R470:470 sha.spec_sha <> s var
def 487:494 <> s256_num
R500:508 sha.spec_sha <> s256state def
R514:516 Coq.Init.Datatypes <> snd def
R519:521 Coq.Init.Datatypes <> snd def
R524:526 Coq.Init.Datatypes <> snd def
R529:531 Coq.Init.Datatypes <> snd def
R533:533 sha.spec_sha <> s var
ind 550:556 <> s256abs
constr 592:598 <> S256abs
R617:620 Coq.Init.Datatypes <> list ind
R622:624 compcert.lib.Integers <> int syndef
R688:691 Coq.Init.Datatypes <> list ind
R693:693 Coq.Numbers.BinNums <> Z ind
R767:773 sha.spec_sha <> s256abs ind
def 788:797 <> s256a_regs
R803:809 sha.spec_sha <> s256abs ind
R814:817 Coq.Init.Datatypes <> list ind
R819:821 compcert.lib.Integers <> int syndef
R833:833 sha.spec_sha <> a var
R840:846 sha.spec_sha <> S256abs constr
R875:885 sha.SHA256 <> hash_blocks thm
R887:900 sha.SHA256 <> init_registers def
def 928:936 <> s256a_len
R942:948 sha.spec_sha <> s256abs ind
R953:953 Coq.Numbers.BinNums <> Z ind
R967:967 sha.spec_sha <> a var
R974:980 sha.spec_sha <> S256abs constr
R1002:1002 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R1039:1042 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R1024:1026 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R1017:1019 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R1003:1009 Coq.ZArith.Zcomplements <> Zlength def
R1020:1023 sha.SHA256 <> WORD def
R1027:1033 Coq.ZArith.Zcomplements <> Zlength def
def 1067:1077 <> s256_relate
R1083:1089 sha.spec_sha <> s256abs ind
R1096:1104 sha.spec_sha <> s256state def
R1128:1128 sha.spec_sha <> a var
R1135:1141 sha.spec_sha <> S256abs constr
R1222:1233 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R1175:1177 Coq.Init.Logic <> :type_scope:x_'='_x not
R1167:1172 sha.spec_sha <> s256_h def
R1174:1174 sha.spec_sha <> r var
R1178:1180 Coq.Lists.List <> map def
R1188:1198 sha.SHA256 <> hash_blocks thm
R1200:1213 sha.SHA256 <> init_registers def
R1182:1185 compcert.common.Values <> Vint constr
R1372:1382 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R1235:1241 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R1244:1245 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R1246:1252 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R1255:1256 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R1276:1279 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R1266:1268 Coq.Init.Logic <> :type_scope:x_'='_x not
R1257:1263 sha.spec_sha <> s256_Nh def
R1265:1265 sha.spec_sha <> r var
R1269:1272 compcert.common.Values <> Vint constr
R1274:1275 sha.spec_sha <> hi var
R1299:1315 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R1289:1291 Coq.Init.Logic <> :type_scope:x_'='_x not
R1280:1286 sha.spec_sha <> s256_Nl def
R1288:1288 sha.spec_sha <> r var
R1292:1295 compcert.common.Values <> Vint constr
R1297:1298 sha.spec_sha <> lo var
R1356:1358 Coq.Init.Logic <> :type_scope:x_'='_x not
R1316:1316 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R1353:1354 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R1338:1340 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R1331:1333 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R1317:1323 Coq.ZArith.Zcomplements <> Zlength def
R1334:1337 sha.SHA256 <> WORD def
R1341:1347 Coq.ZArith.Zcomplements <> Zlength def
R1359:1362 sha.SHA256 <> hilo def
R1367:1368 sha.spec_sha <> lo var
R1364:1365 sha.spec_sha <> hi var
R1425:1435 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R1394:1396 Coq.Init.Logic <> :type_scope:x_'='_x not
R1383:1391 sha.spec_sha <> s256_data def
R1393:1393 sha.spec_sha <> r var
R1397:1399 Coq.Lists.List <> map def
R1407:1409 Coq.Lists.List <> map def
R1411:1418 compcert.lib.Integers Int repr def
R1401:1404 compcert.common.Values <> Vint constr
R1436:1436 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R1482:1493 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R1459:1462 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R1449:1451 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x not
R1437:1443 Coq.ZArith.Zcomplements <> Zlength def
R1452:1458 sha.SHA256 <> CBLOCKz def
R1463:1468 Coq.Lists.List <> Forall ind
R1470:1476 sha.SHA256 <> isbyteZ def
R1520:1530 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R1494:1494 Coq.ZArith.BinInt <> :Z_scope:'('_x_'|'_x_')' not
R1502:1504 Coq.ZArith.BinInt <> :Z_scope:'('_x_'|'_x_')' not
R1519:1519 Coq.ZArith.BinInt <> :Z_scope:'('_x_'|'_x_')' not
R1495:1501 sha.SHA256 <> LBLOCKz def
R1505:1511 Coq.ZArith.Zcomplements <> Zlength def
R1541:1543 Coq.Init.Logic <> :type_scope:x_'='_x not
R1531:1538 sha.spec_sha <> s256_num def
R1540:1540 sha.spec_sha <> r var
R1544:1547 compcert.common.Values <> Vint constr
R1550:1557 compcert.lib.Integers Int repr def
R1560:1566 Coq.ZArith.Zcomplements <> Zlength def
def 1597:1608 <> init_s256abs
R1612:1618 sha.spec_sha <> s256abs ind
R1623:1629 sha.spec_sha <> S256abs constr
R1635:1637 Coq.Init.Datatypes <> nil constr
R1631:1633 Coq.Init.Datatypes <> nil constr
def 1652:1661 <> sha_finish
R1667:1673 sha.spec_sha <> s256abs ind
R1678:1681 Coq.Init.Datatypes <> list ind
R1683:1683 Coq.Numbers.BinNums <> Z ind
R1695:1695 sha.spec_sha <> a var
R1705:1711 sha.spec_sha <> S256abs constr
R1734:1740 sha.SHA256 <> SHA_256 def
R1766:1769 Coq.Init.Datatypes <> :list_scope:x_'++'_x not
R1743:1758 sha.SHA256 <> intlist_to_Zlist def
def 1794:1798 <> cVint
R1809:1811 compcert.lib.Integers <> int syndef
R1804:1804 Coq.Numbers.BinNums <> Z ind
R1818:1818 Coq.Numbers.BinNums <> Z ind
R1824:1827 compcert.common.Values <> Vint constr
R1830:1830 sha.spec_sha <> f var
R1832:1832 sha.spec_sha <> i var
def 1848:1860 <> sha256_length
R1868:1868 Coq.Numbers.BinNums <> Z ind
R1876:1878 compcert.common.Values <> val ind
R1883:1887 veric.expr <> mpred def
R1895:1897 msl.seplog <> :logic:'EX'_x_':'_x_','_x not
R1900:1900 msl.seplog <> :logic:'EX'_x_':'_x_','_x not
R1904:1905 msl.seplog <> :logic:'EX'_x_':'_x_','_x not
R1906:1908 msl.seplog <> :logic:'EX'_x_':'_x_','_x not
R1911:1911 msl.seplog <> :logic:'EX'_x_':'_x_','_x not
R1915:1922 msl.seplog <> :logic:'EX'_x_':'_x_','_x not
R1944:1953 msl.seplog <> :logic:x_'&&'_x not
R2071:2071 msl.seplog <> :logic:x_'&&'_x not
R1923:1926 msl.seplog <> :logic:'!!'_x not
R1943:1943 msl.seplog <> :logic:'!!'_x not
R1937:1939 Coq.Init.Logic <> :type_scope:x_'='_x not
R1927:1930 sha.SHA256 <> hilo def
R1940:1942 sha.spec_sha <> len var
R2008:2016 msl.seplog <> :logic:x_'*'_x not
R1954:1961 floyd.data_at_lemmas <> field_at def
R2007:2007 sha.spec_sha <> c var
R1998:2001 compcert.common.Values <> Vint constr
R1991:1991 sha.SHA256 <> ::'['_x_','_'..'_','_x_']' not
R1995:1995 sha.SHA256 <> ::'['_x_','_'..'_','_x_']' not
R1992:1994 sha.sha <> _Nl def
R1967:1989 sha.sha <> t_struct_SHA256state_st def
R1963:1965 veric.SeparationLogic <> Tsh def
R2017:2024 floyd.data_at_lemmas <> field_at def
R2070:2070 sha.spec_sha <> c var
R2061:2064 compcert.common.Values <> Vint constr
R2054:2054 sha.SHA256 <> ::'['_x_','_'..'_','_x_']' not
R2058:2058 sha.SHA256 <> ::'['_x_','_'..'_','_x_']' not
R2055:2057 sha.sha <> _Nh def
R2030:2052 sha.sha <> t_struct_SHA256state_st def
R2026:2028 veric.SeparationLogic <> Tsh def
R1912:1914 compcert.lib.Integers <> int syndef
R1901:1903 compcert.lib.Integers <> int syndef
def 2086:2097 <> sha256state_
R2103:2109 sha.spec_sha <> s256abs ind
R2116:2118 compcert.common.Values <> val ind
R2123:2127 veric.expr <> mpred def
R2135:2137 msl.seplog <> :logic:'EX'_x_':'_x_','_x not
R2139:2139 msl.seplog <> :logic:'EX'_x_':'_x_','_x not
R2149:2155 msl.seplog <> :logic:'EX'_x_':'_x_','_x not
R2175:2180 msl.seplog <> :logic:x_'&&'_x not
R2156:2159 msl.seplog <> :logic:'!!'_x not
R2160:2170 sha.spec_sha <> s256_relate def
R2172:2172 sha.spec_sha <> a var
R2181:2187 floyd.data_at_lemmas <> data_at def
R2219:2219 sha.spec_sha <> c var
R2193:2215 sha.sha <> t_struct_SHA256state_st def
R2189:2191 veric.SeparationLogic <> Tsh def
R2140:2148 sha.spec_sha <> s256state def
def 2234:2239 <> tuints
R2246:2249 Coq.Init.Datatypes <> list ind
R2251:2253 compcert.lib.Integers <> int syndef
R2259:2263 floyd.data_at_lemmas <> ZnthV def
R2272:2274 Coq.Lists.List <> map def
R2281:2282 sha.spec_sha <> vl var
R2276:2279 compcert.common.Values <> Vint constr
R2265:2269 compcert.exportclight.Clightdefs <> tuint def
def 2297:2303 <> tuchars
R2310:2313 Coq.Init.Datatypes <> list ind
R2315:2317 compcert.lib.Integers <> int syndef
R2324:2328 floyd.data_at_lemmas <> ZnthV def
R2338:2340 Coq.Lists.List <> map def
R2347:2348 sha.spec_sha <> vl var
R2342:2345 compcert.common.Values <> Vint constr
R2330:2335 compcert.exportclight.Clightdefs <> tuchar def
def 2364:2373 <> data_block
R2380:2384 msl.shares <> share def
R2398:2401 Coq.Init.Datatypes <> list ind
R2403:2403 Coq.Numbers.BinNums <> Z ind
R2437:2442 msl.seplog <> :logic:x_'&&'_x not
R2411:2413 msl.seplog <> :logic:'!!'_x not
R2414:2419 Coq.Lists.List <> Forall ind
R2429:2436 sha.spec_sha <> contents var
R2421:2427 sha.SHA256 <> isbyteZ def
R2443:2450 floyd.data_at_lemmas <> array_at def
R2499:2505 Coq.ZArith.Zcomplements <> Zlength def
R2507:2514 sha.spec_sha <> contents var
R2463:2469 sha.spec_sha <> tuchars def
R2472:2474 Coq.Lists.List <> map def
R2485:2492 sha.spec_sha <> contents var
R2476:2483 compcert.lib.Integers Int repr def
R2459:2460 sha.spec_sha <> sh var
R2452:2457 compcert.exportclight.Clightdefs <> tuchar def
def 2530:2533 <> _ptr
R2537:2541 compcert.common.AST <> ident def
def 2570:2571 <> _x
R2575:2579 compcert.common.AST <> ident def
def 2609:2638 <> __builtin_read32_reversed_spec
R2644:2651 floyd.client_lemmas <> ::'DECLARE'_x_x not
R2678:2680 floyd.client_lemmas <> ::'DECLARE'_x_x not
R2652:2677 sha.sha <> ___builtin_read32_reversed def
R2681:2685 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R2687:2688 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R2692:2693 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R2696:2697 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R2703:2704 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R2713:2714 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R2723:2731 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R2750:2761 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R2858:2867 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R2873:2881 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R2736:2739 floyd.client_lemmas <> :formals:x_'OF'_x not
R2732:2735 sha.spec_sha <> _ptr def
R2740:2743 compcert.exportclight.Clightdefs <> tptr def
R2745:2749 compcert.exportclight.Clightdefs <> tuint def
R2868:2872 compcert.exportclight.Clightdefs <> tuint def
R2689:2691 compcert.common.Values <> val ind
R2698:2702 msl.shares <> share def
R2720:2722 compcert.lib.Integers <> int syndef
R2715:2715 Coq.Numbers.BinNums <> Z ind
R2762:2768 floyd.client_lemmas <> :logic:'PROP'_'()'_x not
R2769:2775 floyd.client_lemmas <> :logic:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R2798:2807 floyd.client_lemmas <> :logic:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R2776:2777 veric.lift <> ::'`('_x_')' not
R2782:2782 veric.lift <> ::'`('_x_')' not
R2778:2779 Coq.Init.Logic <> eq ind
R2785:2791 veric.expr <> eval_id def
R2793:2796 sha.spec_sha <> _ptr def
R2808:2812 floyd.client_lemmas <> :logic:'SEP'_'('_x_';'_'..'_';'_x_')' not
R2857:2857 floyd.client_lemmas <> :logic:'SEP'_'('_x_';'_'..'_';'_x_')' not
R2813:2814 veric.lift <> ::'`('_x_')' not
R2856:2856 veric.lift <> ::'`('_x_')' not
R2815:2822 floyd.data_at_lemmas <> array_at def
R2835:2839 sha.spec_sha <> cVint def
R2824:2829 compcert.exportclight.Clightdefs <> tuchar def
R2939:2947 msl.seplog <> :logic:x_'&&'_x not
R2882:2886 veric.SeparationLogic <> local def
R2889:2890 veric.lift <> ::'`('_x_')' not
R2930:2930 veric.lift <> ::'`('_x_')' not
R2891:2892 Coq.Init.Logic <> eq ind
R2895:2898 compcert.common.Values <> Vint constr
R2901:2918 sha.SHA256 <> big_endian_integer def
R2932:2937 floyd.client_lemmas <> retval def
R2948:2949 veric.lift <> ::'`('_x_')' not
R2991:2991 veric.lift <> ::'`('_x_')' not
R2950:2957 floyd.data_at_lemmas <> array_at def
R2970:2974 sha.spec_sha <> cVint def
R2959:2964 compcert.exportclight.Clightdefs <> tuchar def
def 3006:3036 <> __builtin_write32_reversed_spec
R3042:3049 floyd.client_lemmas <> ::'DECLARE'_x_x not
R3077:3079 floyd.client_lemmas <> ::'DECLARE'_x_x not
R3050:3076 sha.sha <> ___builtin_write32_reversed def
R3080:3084 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R3086:3087 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R3091:3092 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R3095:3096 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R3102:3103 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R3112:3113 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R3122:3130 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R3149:3150 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R3162:3173 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R3361:3370 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R3376:3384 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R3153:3156 floyd.client_lemmas <> :formals:x_'OF'_x not
R3151:3152 sha.spec_sha <> _x def
R3157:3161 compcert.exportclight.Clightdefs <> tuint def
R3135:3138 floyd.client_lemmas <> :formals:x_'OF'_x not
R3131:3134 sha.spec_sha <> _ptr def
R3139:3142 compcert.exportclight.Clightdefs <> tptr def
R3144:3148 compcert.exportclight.Clightdefs <> tuint def
R3371:3375 compcert.exportclight.Clightdefs <> tvoid def
R3088:3090 compcert.common.Values <> val ind
R3097:3101 msl.shares <> share def
R3119:3121 compcert.lib.Integers <> int syndef
R3114:3114 Coq.Numbers.BinNums <> Z ind
R3174:3178 floyd.client_lemmas <> :logic:'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R3196:3205 floyd.client_lemmas <> :logic:'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R3179:3192 veric.SeparationLogic <> writable_share def
R3206:3212 floyd.client_lemmas <> :logic:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R3235:3257 floyd.client_lemmas <> :logic:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R3312:3321 floyd.client_lemmas <> :logic:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R3258:3259 veric.lift <> ::'`('_x_')' not
R3298:3298 veric.lift <> ::'`('_x_')' not
R3260:3261 Coq.Init.Logic <> eq ind
R3264:3267 compcert.common.Values <> Vint constr
R3269:3286 sha.SHA256 <> big_endian_integer def
R3301:3307 veric.expr <> eval_id def
R3309:3310 sha.spec_sha <> _x def
R3213:3214 veric.lift <> ::'`('_x_')' not
R3219:3219 veric.lift <> ::'`('_x_')' not
R3215:3216 Coq.Init.Logic <> eq ind
R3222:3228 veric.expr <> eval_id def
R3230:3233 sha.spec_sha <> _ptr def
R3322:3326 floyd.client_lemmas <> :logic:'SEP'_'('_x_';'_'..'_';'_x_')' not
R3360:3360 floyd.client_lemmas <> :logic:'SEP'_'('_x_';'_'..'_';'_x_')' not
R3327:3328 veric.lift <> ::'`('_x_')' not
R3359:3359 veric.lift <> ::'`('_x_')' not
R3329:3340 veric.SeparationLogic <> memory_block def
R3346:3353 compcert.lib.Integers Int repr def
R3385:3386 veric.lift <> ::'`('_x_')' not
R3428:3428 veric.lift <> ::'`('_x_')' not
R3387:3394 floyd.data_at_lemmas <> array_at def
R3407:3411 sha.spec_sha <> cVint def
R3396:3401 compcert.exportclight.Clightdefs <> tuchar def
def 3443:3453 <> memcpy_spec
R3460:3467 floyd.client_lemmas <> ::'DECLARE'_x_x not
R3475:3478 floyd.client_lemmas <> ::'DECLARE'_x_x not
R3468:3474 sha.sha <> _memcpy def
R3479:3483 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R3486:3488 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R3500:3501 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R3503:3504 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R3508:3509 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R3511:3512 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R3516:3517 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R3519:3520 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R3522:3523 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R3532:3533 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R3542:3552 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R3577:3578 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R3603:3604 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R3624:3633 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R3953:3964 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R3975:3986 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R3615:3618 floyd.client_lemmas <> :formals:x_'OF'_x not
R3619:3623 compcert.exportclight.Clightdefs <> tuint def
R3589:3592 floyd.client_lemmas <> :formals:x_'OF'_x not
R3593:3596 compcert.exportclight.Clightdefs <> tptr def
R3598:3602 compcert.exportclight.Clightdefs <> tvoid def
R3563:3566 floyd.client_lemmas <> :formals:x_'OF'_x not
R3567:3570 compcert.exportclight.Clightdefs <> tptr def
R3572:3576 compcert.exportclight.Clightdefs <> tvoid def
R3965:3968 compcert.exportclight.Clightdefs <> tptr def
R3970:3974 compcert.exportclight.Clightdefs <> tvoid def
R3494:3494 Coq.Init.Datatypes <> :type_scope:x_'*'_x not
R3489:3493 msl.shares <> share def
R3495:3499 msl.shares <> share def
R3505:3507 compcert.common.Values <> val ind
R3513:3515 compcert.common.Values <> val ind
R3521:3521 Coq.Numbers.BinNums <> Z ind
R3539:3541 compcert.lib.Integers <> int syndef
R3534:3534 Coq.Numbers.BinNums <> Z ind
R3634:3639 floyd.client_lemmas <> :logic:'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R3663:3664 floyd.client_lemmas <> :logic:'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R3691:3699 floyd.client_lemmas <> :logic:'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R3666:3669 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<='_x not
R3671:3674 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<='_x not
R3675:3690 compcert.lib.Integers Int max_unsigned def
R3640:3653 veric.SeparationLogic <> writable_share def
R3656:3658 Coq.Init.Datatypes <> snd def
R3700:3706 floyd.client_lemmas <> :logic:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R3735:3736 floyd.client_lemmas <> :logic:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R3765:3786 floyd.client_lemmas <> :logic:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R3833:3841 floyd.client_lemmas <> :logic:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R3787:3788 veric.lift <> ::'`('_x_')' not
R3811:3811 veric.lift <> ::'`('_x_')' not
R3789:3790 Coq.Init.Logic <> eq ind
R3793:3796 compcert.common.Values <> Vint constr
R3799:3806 compcert.lib.Integers Int repr def
R3814:3820 veric.expr <> eval_id def
R3737:3738 veric.lift <> ::'`('_x_')' not
R3743:3743 veric.lift <> ::'`('_x_')' not
R3739:3740 Coq.Init.Logic <> eq ind
R3746:3752 veric.expr <> eval_id def
R3707:3708 veric.lift <> ::'`('_x_')' not
R3713:3713 veric.lift <> ::'`('_x_')' not
R3709:3710 Coq.Init.Logic <> eq ind
R3716:3722 veric.expr <> eval_id def
R3842:3846 floyd.client_lemmas <> :logic:'SEP'_'('_x_';'_'..'_';'_x_')' not
R3897:3912 floyd.client_lemmas <> :logic:'SEP'_'('_x_';'_'..'_';'_x_')' not
R3952:3952 floyd.client_lemmas <> :logic:'SEP'_'('_x_';'_'..'_';'_x_')' not
R3913:3914 veric.lift <> ::'`('_x_')' not
R3951:3951 veric.lift <> ::'`('_x_')' not
R3915:3926 veric.SeparationLogic <> memory_block def
R3938:3945 compcert.lib.Integers Int repr def
R3929:3931 Coq.Init.Datatypes <> snd def
R3847:3848 veric.lift <> ::'`('_x_')' not
R3896:3896 veric.lift <> ::'`('_x_')' not
R3849:3856 floyd.data_at_lemmas <> array_at def
R3875:3879 sha.spec_sha <> cVint def
R3866:3868 Coq.Init.Datatypes <> fst def
R3858:3863 compcert.exportclight.Clightdefs <> tuchar def
R4009:4020 msl.seplog <> :logic:x_'&&'_x not
R4132:4132 msl.seplog <> :logic:x_'&&'_x not
R3987:3991 veric.SeparationLogic <> local def
R3994:3995 veric.lift <> ::'`('_x_')' not
R4000:4000 veric.lift <> ::'`('_x_')' not
R3996:3997 Coq.Init.Logic <> eq ind
R4002:4007 floyd.client_lemmas <> retval def
R4071:4081 msl.seplog <> :logic:x_'*'_x not
R4021:4022 veric.lift <> ::'`('_x_')' not
R4070:4070 veric.lift <> ::'`('_x_')' not
R4023:4030 floyd.data_at_lemmas <> array_at def
R4049:4053 sha.spec_sha <> cVint def
R4040:4042 Coq.Init.Datatypes <> fst def
R4032:4037 compcert.exportclight.Clightdefs <> tuchar def
R4082:4083 veric.lift <> ::'`('_x_')' not
R4131:4131 veric.lift <> ::'`('_x_')' not
R4084:4091 floyd.data_at_lemmas <> array_at def
R4110:4114 sha.spec_sha <> cVint def
R4101:4103 Coq.Init.Datatypes <> snd def
R4093:4098 compcert.exportclight.Clightdefs <> tuchar def
def 4147:4157 <> memset_spec
R4164:4171 floyd.client_lemmas <> ::'DECLARE'_x_x not
R4179:4182 floyd.client_lemmas <> ::'DECLARE'_x_x not
R4172:4178 sha.sha <> _memset def
R4183:4187 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R4190:4192 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R4198:4199 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R4201:4202 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R4206:4207 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R4209:4210 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R4212:4213 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R4215:4216 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R4220:4230 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R4255:4256 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R4275:4276 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R4296:4305 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R4554:4565 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R4576:4587 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R4287:4290 floyd.client_lemmas <> :formals:x_'OF'_x not
R4291:4295 compcert.exportclight.Clightdefs <> tuint def
R4267:4270 floyd.client_lemmas <> :formals:x_'OF'_x not
R4271:4274 compcert.exportclight.Clightdefs <> tint def
R4241:4244 floyd.client_lemmas <> :formals:x_'OF'_x not
R4245:4248 compcert.exportclight.Clightdefs <> tptr def
R4250:4254 compcert.exportclight.Clightdefs <> tvoid def
R4566:4569 compcert.exportclight.Clightdefs <> tptr def
R4571:4575 compcert.exportclight.Clightdefs <> tvoid def
R4193:4197 msl.shares <> share def
R4203:4205 compcert.common.Values <> val ind
R4211:4211 Coq.Numbers.BinNums <> Z ind
R4217:4219 compcert.lib.Integers <> int syndef
R4306:4311 floyd.client_lemmas <> :logic:'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R4329:4330 floyd.client_lemmas <> :logic:'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R4357:4365 floyd.client_lemmas <> :logic:'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R4332:4335 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<='_x not
R4337:4340 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<='_x not
R4341:4356 compcert.lib.Integers Int max_unsigned def
R4312:4325 veric.SeparationLogic <> writable_share def
R4366:4372 floyd.client_lemmas <> :logic:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R4401:4402 floyd.client_lemmas <> :logic:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R4438:4459 floyd.client_lemmas <> :logic:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R4506:4514 floyd.client_lemmas <> :logic:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R4460:4461 veric.lift <> ::'`('_x_')' not
R4484:4484 veric.lift <> ::'`('_x_')' not
R4462:4463 Coq.Init.Logic <> eq ind
R4466:4469 compcert.common.Values <> Vint constr
R4472:4479 compcert.lib.Integers Int repr def
R4487:4493 veric.expr <> eval_id def
R4403:4404 veric.lift <> ::'`('_x_')' not
R4416:4416 veric.lift <> ::'`('_x_')' not
R4405:4406 Coq.Init.Logic <> eq ind
R4409:4412 compcert.common.Values <> Vint constr
R4419:4425 veric.expr <> eval_id def
R4373:4374 veric.lift <> ::'`('_x_')' not
R4379:4379 veric.lift <> ::'`('_x_')' not
R4375:4376 Coq.Init.Logic <> eq ind
R4382:4388 veric.expr <> eval_id def
R4515:4519 floyd.client_lemmas <> :logic:'SEP'_'('_x_';'_'..'_';'_x_')' not
R4553:4553 floyd.client_lemmas <> :logic:'SEP'_'('_x_';'_'..'_';'_x_')' not
R4520:4521 veric.lift <> ::'`('_x_')' not
R4552:4552 veric.lift <> ::'`('_x_')' not
R4522:4533 veric.SeparationLogic <> memory_block def
R4539:4546 compcert.lib.Integers Int repr def
R4610:4621 msl.seplog <> :logic:x_'&&'_x not
R4667:4667 msl.seplog <> :logic:x_'&&'_x not
R4588:4592 veric.SeparationLogic <> local def
R4595:4596 veric.lift <> ::'`('_x_')' not
R4601:4601 veric.lift <> ::'`('_x_')' not
R4597:4598 Coq.Init.Logic <> eq ind
R4603:4608 floyd.client_lemmas <> retval def
R4622:4623 veric.lift <> ::'`('_x_')' not
R4666:4666 veric.lift <> ::'`('_x_')' not
R4624:4631 floyd.data_at_lemmas <> array_at def
R4653:4656 compcert.common.Values <> Vint constr
R4633:4638 compcert.exportclight.Clightdefs <> tuchar def
def 4682:4689 <> K_vector
R4700:4704 veric.expr <> mpred def
R4693:4695 compcert.common.Values <> val ind
R4711:4718 floyd.data_at_lemmas <> array_at def
R4747:4753 Coq.ZArith.Zcomplements <> Zlength def
R4755:4758 sha.SHA256 <> K256 def
R4731:4736 sha.spec_sha <> tuints def
R4738:4741 sha.SHA256 <> K256 def
R4726:4728 veric.SeparationLogic <> Tsh def
R4720:4724 compcert.exportclight.Clightdefs <> tuint def
def 4774:4801 <> sha256_block_data_order_spec
R4808:4815 floyd.client_lemmas <> ::'DECLARE'_x_x not
R4840:4844 floyd.client_lemmas <> ::'DECLARE'_x_x not
R4816:4839 sha.sha <> _sha256_block_data_order def
R4845:4849 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R4856:4857 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R4866:4867 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R4869:4870 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R4879:4880 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R4884:4886 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R4890:4891 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R4896:4897 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R4901:4902 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R4905:4906 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R4912:4913 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R4916:4918 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R4922:4931 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R4968:4969 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R4987:4998 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R5376:5386 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R5392:5405 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R5568:5568 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R4973:4976 floyd.client_lemmas <> :formals:x_'OF'_x not
R4970:4972 sha.sha <> _in def
R4977:4980 compcert.exportclight.Clightdefs <> tptr def
R4982:4986 compcert.exportclight.Clightdefs <> tvoid def
R4936:4939 floyd.client_lemmas <> :formals:x_'OF'_x not
R4932:4935 sha.sha <> _ctx def
R4940:4943 compcert.exportclight.Clightdefs <> tptr def
R4945:4967 sha.sha <> t_struct_SHA256state_st def
R5387:5391 compcert.exportclight.Clightdefs <> tvoid def
R4858:4861 Coq.Init.Datatypes <> list ind
R4863:4865 compcert.lib.Integers <> int syndef
R4871:4874 Coq.Init.Datatypes <> list ind
R4876:4878 compcert.lib.Integers <> int syndef
R4887:4889 compcert.common.Values <> val ind
R4898:4900 compcert.common.Values <> val ind
R4907:4911 msl.shares <> share def
R4919:4921 compcert.common.Values <> val ind
R4999:5003 floyd.client_lemmas <> :logic:'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R5023:5024 floyd.client_lemmas <> :logic:'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R5051:5062 floyd.client_lemmas <> :logic:'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R5025:5025 Coq.ZArith.BinInt <> :Z_scope:'('_x_'|'_x_')' not
R5033:5035 Coq.ZArith.BinInt <> :Z_scope:'('_x_'|'_x_')' not
R5050:5050 Coq.ZArith.BinInt <> :Z_scope:'('_x_'|'_x_')' not
R5026:5032 sha.SHA256 <> LBLOCKz def
R5036:5042 Coq.ZArith.Zcomplements <> Zlength def
R5013:5015 Coq.Init.Logic <> :type_scope:x_'='_x not
R5004:5010 Coq.ZArith.Zcomplements <> Zlength def
R5016:5022 sha.SHA256 <> LBLOCKz def
R5063:5069 floyd.client_lemmas <> :logic:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R5094:5095 floyd.client_lemmas <> :logic:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R5120:5142 floyd.client_lemmas <> :logic:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R5191:5201 floyd.client_lemmas <> :logic:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R5143:5144 veric.lift <> ::'`('_x_')' not
R5150:5150 veric.lift <> ::'`('_x_')' not
R5145:5146 Coq.Init.Logic <> eq ind
R5153:5160 veric.expr <> eval_var def
R5169:5174 compcert.exportclight.Clightdefs <> tarray def
R5182:5188 sha.SHA256 <> CBLOCKz def
R5176:5180 compcert.exportclight.Clightdefs <> tuint def
R5162:5166 sha.sha <> _K256 def
R5096:5097 veric.lift <> ::'`('_x_')' not
R5105:5105 veric.lift <> ::'`('_x_')' not
R5098:5099 Coq.Init.Logic <> eq ind
R5108:5114 veric.expr <> eval_id def
R5116:5118 sha.sha <> _in def
R5070:5071 veric.lift <> ::'`('_x_')' not
R5078:5078 veric.lift <> ::'`('_x_')' not
R5072:5073 Coq.Init.Logic <> eq ind
R5081:5087 veric.expr <> eval_id def
R5089:5092 sha.sha <> _ctx def
R5202:5206 floyd.client_lemmas <> :logic:'SEP'_'('_x_';'_'..'_';'_x_')' not
R5282:5299 floyd.client_lemmas <> :logic:'SEP'_'('_x_';'_'..'_';'_x_')' not
R5342:5360 floyd.client_lemmas <> :logic:'SEP'_'('_x_';'_'..'_';'_x_')' not
R5375:5375 floyd.client_lemmas <> :logic:'SEP'_'('_x_';'_'..'_';'_x_')' not
R5361:5362 veric.lift <> ::'`('_x_')' not
R5374:5374 veric.lift <> ::'`('_x_')' not
R5363:5370 sha.spec_sha <> K_vector def
R5300:5301 veric.lift <> ::'`('_x_')' not
R5341:5341 veric.lift <> ::'`('_x_')' not
R5302:5311 sha.spec_sha <> data_block def
R5317:5332 sha.SHA256 <> intlist_to_Zlist def
R5207:5208 veric.lift <> ::'`('_x_')' not
R5281:5281 veric.lift <> ::'`('_x_')' not
R5209:5216 floyd.data_at_lemmas <> array_at def
R5230:5235 sha.spec_sha <> tuints def
R5238:5248 sha.SHA256 <> hash_blocks thm
R5250:5263 sha.SHA256 <> init_registers def
R5224:5226 veric.SeparationLogic <> Tsh def
R5218:5222 compcert.exportclight.Clightdefs <> tuint def
R5541:5553 msl.seplog <> :logic:x_'*'_x not
R5486:5498 msl.seplog <> :logic:x_'*'_x not
R5406:5407 veric.lift <> ::'`('_x_')' not
R5485:5485 veric.lift <> ::'`('_x_')' not
R5408:5415 floyd.data_at_lemmas <> array_at def
R5429:5434 sha.spec_sha <> tuints def
R5437:5447 sha.SHA256 <> hash_blocks thm
R5471:5472 Coq.Init.Datatypes <> :list_scope:x_'++'_x not
R5449:5462 sha.SHA256 <> init_registers def
R5423:5425 veric.SeparationLogic <> Tsh def
R5417:5421 compcert.exportclight.Clightdefs <> tuint def
R5499:5500 veric.lift <> ::'`('_x_')' not
R5540:5540 veric.lift <> ::'`('_x_')' not
R5501:5510 sha.spec_sha <> data_block def
R5516:5531 sha.SHA256 <> intlist_to_Zlist def
R5554:5555 veric.lift <> ::'`('_x_')' not
R5567:5567 veric.lift <> ::'`('_x_')' not
R5556:5563 sha.spec_sha <> K_vector def
def 5584:5604 <> SHA256_addlength_spec
R5610:5617 floyd.client_lemmas <> ::'DECLARE'_x_x not
R5635:5636 floyd.client_lemmas <> ::'DECLARE'_x_x not
R5618:5634 sha.sha <> _SHA256_addlength def
R5637:5641 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R5645:5647 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R5649:5650 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R5652:5653 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R5657:5658 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R5660:5661 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R5663:5670 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R5705:5707 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R5721:5726 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R5911:5919 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R5925:5930 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R5712:5715 floyd.client_lemmas <> :formals:x_'OF'_x not
R5708:5711 sha.sha <> _len def
R5716:5720 compcert.exportclight.Clightdefs <> tuint def
R5673:5676 floyd.client_lemmas <> :formals:x_'OF'_x not
R5671:5672 sha.sha <> _c def
R5677:5680 compcert.exportclight.Clightdefs <> tptr def
R5682:5704 sha.sha <> t_struct_SHA256state_st def
R5920:5924 compcert.exportclight.Clightdefs <> tvoid def
R5648:5648 Coq.Numbers.BinNums <> Z ind
R5654:5656 compcert.common.Values <> val ind
R5662:5662 Coq.Numbers.BinNums <> Z ind
R5727:5733 floyd.client_lemmas <> :logic:'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R5757:5758 floyd.client_lemmas <> :logic:'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R5787:5792 floyd.client_lemmas <> :logic:'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R5760:5763 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<='_x not
R5767:5770 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<='_x not
R5771:5786 compcert.lib.Integers Int max_unsigned def
R5735:5738 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R5746:5748 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R5740:5740 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R5744:5744 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R5740:5740 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R5744:5744 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R5749:5753 Coq.ZArith.Zpower <> two_p def
R5793:5799 floyd.client_lemmas <> :logic:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R5842:5859 floyd.client_lemmas <> :logic:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R5880:5884 floyd.client_lemmas <> :logic:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R5860:5861 veric.lift <> ::'`('_x_')' not
R5866:5866 veric.lift <> ::'`('_x_')' not
R5862:5863 Coq.Init.Logic <> eq ind
R5869:5875 veric.expr <> eval_id def
R5877:5878 sha.sha <> _c def
R5800:5801 veric.lift <> ::'`('_x_')' not
R5826:5826 veric.lift <> ::'`('_x_')' not
R5802:5803 Coq.Init.Logic <> eq ind
R5806:5809 compcert.common.Values <> Vint constr
R5812:5819 compcert.lib.Integers Int repr def
R5829:5835 veric.expr <> eval_id def
R5837:5840 sha.sha <> _len def
R5885:5889 floyd.client_lemmas <> :logic:'SEP'_'('_x_';'_'..'_';'_x_')' not
R5910:5910 floyd.client_lemmas <> :logic:'SEP'_'('_x_';'_'..'_';'_x_')' not
R5890:5891 veric.lift <> ::'`('_x_')' not
R5909:5909 veric.lift <> ::'`('_x_')' not
R5892:5904 sha.spec_sha <> sha256_length def
R5931:5932 veric.lift <> ::'`('_x_')' not
R5958:5958 veric.lift <> ::'`('_x_')' not
R5933:5945 sha.spec_sha <> sha256_length def
R5949:5949 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R5953:5953 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
def 5973:5988 <> SHA256_Init_spec
R5995:6002 floyd.client_lemmas <> ::'DECLARE'_x_x not
R6015:6018 floyd.client_lemmas <> ::'DECLARE'_x_x not
R6003:6014 sha.sha <> _SHA256_Init def
R6019:6023 floyd.client_lemmas <> ::'WITH'_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R6025:6027 floyd.client_lemmas <> ::'WITH'_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R6031:6041 floyd.client_lemmas <> ::'WITH'_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R6076:6087 floyd.client_lemmas <> ::'WITH'_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R6180:6189 floyd.client_lemmas <> ::'WITH'_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R6195:6209 floyd.client_lemmas <> ::'WITH'_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R6240:6240 floyd.client_lemmas <> ::'WITH'_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R6044:6047 floyd.client_lemmas <> :formals:x_'OF'_x not
R6042:6043 sha.sha <> _c def
R6048:6051 compcert.exportclight.Clightdefs <> tptr def
R6053:6075 sha.sha <> t_struct_SHA256state_st def
R6190:6194 compcert.exportclight.Clightdefs <> tvoid def
R6028:6030 compcert.common.Values <> val ind
R6088:6095 floyd.client_lemmas <> :logic:'PROP'_'()'_x not
R6096:6102 floyd.client_lemmas <> :logic:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R6123:6133 floyd.client_lemmas <> :logic:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R6103:6104 veric.lift <> ::'`('_x_')' not
R6109:6109 veric.lift <> ::'`('_x_')' not
R6105:6106 Coq.Init.Logic <> eq ind
R6112:6118 veric.expr <> eval_id def
R6120:6121 sha.sha <> _c def
R6134:6137 floyd.client_lemmas <> :logic:'SEP'_'('_x_';'_'..'_';'_x_')' not
R6179:6179 floyd.client_lemmas <> :logic:'SEP'_'('_x_';'_'..'_';'_x_')' not
R6138:6139 veric.lift <> ::'`('_x_')' not
R6178:6178 veric.lift <> ::'`('_x_')' not
R6140:6147 floyd.data_at_lemmas <> data_at_ def
R6153:6175 sha.sha <> t_struct_SHA256state_st def
R6149:6151 veric.SeparationLogic <> Tsh def
R6210:6211 veric.lift <> ::'`('_x_')' not
R6239:6239 veric.lift <> ::'`('_x_')' not
R6212:6223 sha.spec_sha <> sha256state_ def
R6225:6236 sha.spec_sha <> init_s256abs def
ind 6254:6263 <> update_abs
constr 6307:6316 <> Update_abs
R6287:6293 sha.spec_sha <> s256abs ind
R6276:6282 sha.spec_sha <> s256abs ind
R6266:6269 Coq.Init.Datatypes <> list ind
R6271:6271 Coq.Numbers.BinNums <> Z ind
R6577:6586 sha.spec_sha <> update_abs ind
R6649:6655 sha.spec_sha <> S256abs constr
R6674:6680 sha.spec_sha <> newfrag var
R6664:6665 Coq.Init.Datatypes <> :list_scope:x_'++'_x not
R6658:6663 sha.spec_sha <> hashed var
R6666:6671 sha.spec_sha <> blocks var
R6593:6599 sha.spec_sha <> S256abs constr
R6608:6614 sha.spec_sha <> oldfrag var
R6601:6606 sha.spec_sha <> hashed var
R6588:6590 sha.spec_sha <> msg var
R6533:6535 Coq.Init.Logic <> :type_scope:x_'='_x not
R6528:6529 Coq.Init.Datatypes <> :list_scope:x_'++'_x not
R6521:6527 sha.spec_sha <> oldfrag var
R6530:6532 sha.spec_sha <> msg var
R6559:6562 Coq.Init.Datatypes <> :list_scope:x_'++'_x not
R6536:6551 sha.SHA256 <> intlist_to_Zlist def
R6553:6558 sha.spec_sha <> blocks var
R6563:6569 sha.spec_sha <> newfrag var
R6483:6483 Coq.ZArith.BinInt <> :Z_scope:'('_x_'|'_x_')' not
R6491:6493 Coq.ZArith.BinInt <> :Z_scope:'('_x_'|'_x_')' not
R6508:6508 Coq.ZArith.BinInt <> :Z_scope:'('_x_'|'_x_')' not
R6484:6490 sha.SHA256 <> LBLOCKz def
R6494:6500 Coq.ZArith.Zcomplements <> Zlength def
R6502:6507 sha.spec_sha <> blocks var
R6446:6446 Coq.ZArith.BinInt <> :Z_scope:'('_x_'|'_x_')' not
R6454:6456 Coq.ZArith.BinInt <> :Z_scope:'('_x_'|'_x_')' not
R6471:6471 Coq.ZArith.BinInt <> :Z_scope:'('_x_'|'_x_')' not
R6447:6453 sha.SHA256 <> LBLOCKz def
R6457:6463 Coq.ZArith.Zcomplements <> Zlength def
R6465:6470 sha.spec_sha <> hashed var
R6425:6427 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x not
R6410:6416 Coq.ZArith.Zcomplements <> Zlength def
R6418:6424 sha.spec_sha <> newfrag var
R6428:6434 sha.SHA256 <> CBLOCKz def
R6388:6390 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x not
R6373:6379 Coq.ZArith.Zcomplements <> Zlength def
R6381:6387 sha.spec_sha <> oldfrag var
R6391:6397 sha.SHA256 <> CBLOCKz def
def 6697:6714 <> SHA256_Update_spec
R6721:6728 floyd.client_lemmas <> ::'DECLARE'_x_x not
R6743:6746 floyd.client_lemmas <> ::'DECLARE'_x_x not
R6729:6742 sha.sha <> _SHA256_Update def
R6747:6751 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R6753:6754 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R6762:6763 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R6768:6769 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R6776:6777 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R6779:6781 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R6785:6786 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R6788:6789 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R6793:6794 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R6797:6798 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R6804:6805 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R6809:6811 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R6813:6814 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R6817:6819 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R6823:6832 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R6867:6868 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R6889:6890 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R6904:6915 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7333:7342 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7348:7360 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R6895:6898 floyd.client_lemmas <> :formals:x_'OF'_x not
R6891:6894 sha.sha <> _len def
R6899:6903 compcert.exportclight.Clightdefs <> tuint def
R6875:6878 floyd.client_lemmas <> :formals:x_'OF'_x not
R6869:6874 sha.sha <> _data_ def
R6879:6882 compcert.exportclight.Clightdefs <> tptr def
R6884:6888 compcert.exportclight.Clightdefs <> tvoid def
R6835:6838 floyd.client_lemmas <> :formals:x_'OF'_x not
R6833:6834 sha.sha <> _c def
R6839:6842 compcert.exportclight.Clightdefs <> tptr def
R6844:6866 sha.sha <> t_struct_SHA256state_st def
R7343:7347 compcert.exportclight.Clightdefs <> tvoid def
R6755:6761 sha.spec_sha <> s256abs ind
R6770:6773 Coq.Init.Datatypes <> list ind
R6775:6775 Coq.Numbers.BinNums <> Z ind
R6782:6784 compcert.common.Values <> val ind
R6790:6792 compcert.common.Values <> val ind
R6799:6803 msl.shares <> share def
R6812:6812 Coq.Numbers.BinNums <> Z ind
R6820:6822 compcert.common.Values <> val ind
R6916:6921 floyd.client_lemmas <> :logic:'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R6941:6942 floyd.client_lemmas <> :logic:'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R6971:6991 floyd.client_lemmas <> :logic:'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R7028:7038 floyd.client_lemmas <> :logic:'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R7014:7016 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x not
R7004:7006 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R6993:7001 sha.spec_sha <> s256a_len def
R7010:7012 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R7017:7021 Coq.ZArith.Zpower <> two_p def
R6944:6947 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<='_x not
R6951:6954 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<='_x not
R6955:6970 compcert.lib.Integers Int max_unsigned def
R6925:6928 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R6929:6935 Coq.ZArith.Zcomplements <> Zlength def
R7039:7045 floyd.client_lemmas <> :logic:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R7066:7067 floyd.client_lemmas <> :logic:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R7092:7128 floyd.client_lemmas <> :logic:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R7171:7193 floyd.client_lemmas <> :logic:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R7242:7252 floyd.client_lemmas <> :logic:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R7194:7195 veric.lift <> ::'`('_x_')' not
R7201:7201 veric.lift <> ::'`('_x_')' not
R7196:7197 Coq.Init.Logic <> eq ind
R7204:7211 veric.expr <> eval_var def
R7220:7225 compcert.exportclight.Clightdefs <> tarray def
R7233:7239 sha.SHA256 <> CBLOCKz def
R7227:7231 compcert.exportclight.Clightdefs <> tuint def
R7213:7217 sha.sha <> _K256 def
R7129:7130 veric.lift <> ::'`('_x_')' not
R7155:7155 veric.lift <> ::'`('_x_')' not
R7131:7132 Coq.Init.Logic <> eq ind
R7135:7138 compcert.common.Values <> Vint constr
R7141:7148 compcert.lib.Integers Int repr def
R7158:7164 veric.expr <> eval_id def
R7166:7169 sha.sha <> _len def
R7068:7069 veric.lift <> ::'`('_x_')' not
R7074:7074 veric.lift <> ::'`('_x_')' not
R7070:7071 Coq.Init.Logic <> eq ind
R7077:7083 veric.expr <> eval_id def
R7085:7090 sha.sha <> _data_ def
R7046:7047 veric.lift <> ::'`('_x_')' not
R7052:7052 veric.lift <> ::'`('_x_')' not
R7048:7049 Coq.Init.Logic <> eq ind
R7055:7061 veric.expr <> eval_id def
R7063:7064 sha.sha <> _c def
R7253:7256 floyd.client_lemmas <> :logic:'SEP'_'('_x_';'_'..'_';'_x_')' not
R7271:7287 floyd.client_lemmas <> :logic:'SEP'_'('_x_';'_'..'_';'_x_')' not
R7307:7308 floyd.client_lemmas <> :logic:'SEP'_'('_x_';'_'..'_';'_x_')' not
R7332:7332 floyd.client_lemmas <> :logic:'SEP'_'('_x_';'_'..'_';'_x_')' not
R7309:7310 veric.lift <> ::'`('_x_')' not
R7331:7331 veric.lift <> ::'`('_x_')' not
R7311:7320 sha.spec_sha <> data_block def
R7288:7289 veric.lift <> ::'`('_x_')' not
R7306:7306 veric.lift <> ::'`('_x_')' not
R7290:7301 sha.spec_sha <> sha256state_ def
R7257:7258 veric.lift <> ::'`('_x_')' not
R7270:7270 veric.lift <> ::'`('_x_')' not
R7259:7266 sha.spec_sha <> K_vector def
R7361:7363 msl.seplog <> :logic:'EX'_x_':'_x_','_x not
R7366:7366 msl.seplog <> :logic:'EX'_x_':'_x_','_x not
R7368:7380 msl.seplog <> :logic:'EX'_x_':'_x_','_x not
R7381:7386 floyd.client_lemmas <> :logic:'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R7431:7442 floyd.client_lemmas <> :logic:'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R7387:7396 sha.spec_sha <> update_abs ind
R7399:7404 Coq.Lists.List <> firstn def
R7407:7414 Coq.ZArith.BinInt Z to_nat def
R7443:7461 floyd.client_lemmas <> :logic:'LOCAL'_'()'_x not
R7462:7465 floyd.client_lemmas <> :logic:'SEP'_'('_x_';'_'..'_';'_x_')' not
R7480:7497 floyd.client_lemmas <> :logic:'SEP'_'('_x_';'_'..'_';'_x_')' not
R7518:7519 floyd.client_lemmas <> :logic:'SEP'_'('_x_';'_'..'_';'_x_')' not
R7543:7543 floyd.client_lemmas <> :logic:'SEP'_'('_x_';'_'..'_';'_x_')' not
R7520:7521 veric.lift <> ::'`('_x_')' not
R7542:7542 veric.lift <> ::'`('_x_')' not
R7522:7531 sha.spec_sha <> data_block def
R7498:7499 veric.lift <> ::'`('_x_')' not
R7517:7517 veric.lift <> ::'`('_x_')' not
R7500:7511 sha.spec_sha <> sha256state_ def
R7466:7467 veric.lift <> ::'`('_x_')' not
R7479:7479 veric.lift <> ::'`('_x_')' not
R7468:7475 sha.spec_sha <> K_vector def
def 7558:7574 <> SHA256_Final_spec
R7581:7588 floyd.client_lemmas <> ::'DECLARE'_x_x not
R7602:7605 floyd.client_lemmas <> ::'DECLARE'_x_x not
R7589:7601 sha.sha <> _SHA256_Final def
R7606:7610 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7612:7613 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7621:7622 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7625:7626 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7630:7631 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7633:7635 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7639:7641 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7646:7647 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7653:7654 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7657:7658 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7664:7665 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7668:7670 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7674:7683 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7702:7703 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7738:7749 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R8029:8038 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R8044:8056 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7706:7709 floyd.client_lemmas <> :formals:x_'OF'_x not
R7704:7705 sha.sha <> _c def
R7710:7713 compcert.exportclight.Clightdefs <> tptr def
R7715:7737 sha.sha <> t_struct_SHA256state_st def
R7687:7690 floyd.client_lemmas <> :formals:x_'OF'_x not
R7684:7686 sha.sha <> _md def
R7691:7694 compcert.exportclight.Clightdefs <> tptr def
R7696:7701 compcert.exportclight.Clightdefs <> tuchar def
R8039:8043 compcert.exportclight.Clightdefs <> tvoid def
R7614:7620 sha.spec_sha <> s256abs ind
R7627:7629 compcert.common.Values <> val ind
R7636:7638 compcert.common.Values <> val ind
R7648:7652 msl.shares <> share def
R7659:7663 msl.shares <> share def
R7671:7673 compcert.common.Values <> val ind
R7750:7755 floyd.client_lemmas <> :logic:'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R7775:7786 floyd.client_lemmas <> :logic:'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R7756:7769 veric.SeparationLogic <> writable_share def
R7787:7793 floyd.client_lemmas <> :logic:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R7816:7817 floyd.client_lemmas <> :logic:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R7838:7860 floyd.client_lemmas <> :logic:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R7909:7919 floyd.client_lemmas <> :logic:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R7861:7862 veric.lift <> ::'`('_x_')' not
R7868:7868 veric.lift <> ::'`('_x_')' not
R7863:7864 Coq.Init.Logic <> eq ind
R7871:7878 veric.expr <> eval_var def
R7887:7892 compcert.exportclight.Clightdefs <> tarray def
R7900:7906 sha.SHA256 <> CBLOCKz def
R7894:7898 compcert.exportclight.Clightdefs <> tuint def
R7880:7884 sha.sha <> _K256 def
R7818:7819 veric.lift <> ::'`('_x_')' not
R7824:7824 veric.lift <> ::'`('_x_')' not
R7820:7821 Coq.Init.Logic <> eq ind
R7827:7833 veric.expr <> eval_id def
R7835:7836 sha.sha <> _c def
R7794:7795 veric.lift <> ::'`('_x_')' not
R7801:7801 veric.lift <> ::'`('_x_')' not
R7796:7797 Coq.Init.Logic <> eq ind
R7804:7810 veric.expr <> eval_id def
R7812:7814 sha.sha <> _md def
R7920:7923 floyd.client_lemmas <> :logic:'SEP'_'('_x_';'_'..'_';'_x_')' not
R7938:7954 floyd.client_lemmas <> :logic:'SEP'_'('_x_';'_'..'_';'_x_')' not
R7974:7990 floyd.client_lemmas <> :logic:'SEP'_'('_x_';'_'..'_';'_x_')' not
R8028:8028 floyd.client_lemmas <> :logic:'SEP'_'('_x_';'_'..'_';'_x_')' not
R7991:7992 veric.lift <> ::'`('_x_')' not
R8027:8027 veric.lift <> ::'`('_x_')' not
R7993:8004 veric.SeparationLogic <> memory_block def
R8012:8019 compcert.lib.Integers Int repr def
R7955:7956 veric.lift <> ::'`('_x_')' not
R7973:7973 veric.lift <> ::'`('_x_')' not
R7957:7968 sha.spec_sha <> sha256state_ def
R7924:7925 veric.lift <> ::'`('_x_')' not
R7937:7937 veric.lift <> ::'`('_x_')' not
R7926:7933 sha.spec_sha <> K_vector def
R8057:8064 floyd.client_lemmas <> :logic:'PROP'_'()'_x not
R8065:8082 floyd.client_lemmas <> :logic:'LOCAL'_'()'_x not
R8083:8086 floyd.client_lemmas <> :logic:'SEP'_'('_x_';'_'..'_';'_x_')' not
R8101:8117 floyd.client_lemmas <> :logic:'SEP'_'('_x_';'_'..'_';'_x_')' not
R8159:8175 floyd.client_lemmas <> :logic:'SEP'_'('_x_';'_'..'_';'_x_')' not
R8212:8212 floyd.client_lemmas <> :logic:'SEP'_'('_x_';'_'..'_';'_x_')' not
R8176:8177 veric.lift <> ::'`('_x_')' not
R8211:8211 veric.lift <> ::'`('_x_')' not
R8178:8187 sha.spec_sha <> data_block def
R8195:8204 sha.spec_sha <> sha_finish def
R8118:8119 veric.lift <> ::'`('_x_')' not
R8158:8158 veric.lift <> ::'`('_x_')' not
R8120:8127 floyd.data_at_lemmas <> data_at_ def
R8133:8155 sha.sha <> t_struct_SHA256state_st def
R8129:8131 veric.SeparationLogic <> Tsh def
R8087:8088 veric.lift <> ::'`('_x_')' not
R8100:8100 veric.lift <> ::'`('_x_')' not
R8089:8096 sha.spec_sha <> K_vector def
def 8227:8237 <> SHA256_spec
R8244:8251 floyd.client_lemmas <> ::'DECLARE'_x_x not
R8259:8262 floyd.client_lemmas <> ::'DECLARE'_x_x not
R8252:8258 sha.sha <> _SHA256 def
R8263:8267 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R8269:8270 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R8274:8275 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R8279:8280 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R8282:8283 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R8287:8288 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R8294:8295 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R8299:8300 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R8306:8307 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R8312:8313 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R8320:8321 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R8324:8325 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R8329:8330 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R8333:8335 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R8339:8348 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R8366:8367 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R8379:8380 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R8399:8410 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R8836:8845 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R8851:8863 floyd.client_lemmas <> ::'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R8384:8387 floyd.client_lemmas <> :formals:x_'OF'_x not
R8381:8383 sha.sha <> _md def
R8388:8391 compcert.exportclight.Clightdefs <> tptr def
R8393:8398 compcert.exportclight.Clightdefs <> tuchar def
R8370:8373 floyd.client_lemmas <> :formals:x_'OF'_x not
R8368:8369 sha.sha <> _n def
R8374:8378 compcert.exportclight.Clightdefs <> tuint def
R8351:8354 floyd.client_lemmas <> :formals:x_'OF'_x not
R8349:8350 sha.sha <> _d def
R8355:8358 compcert.exportclight.Clightdefs <> tptr def
R8360:8365 compcert.exportclight.Clightdefs <> tuchar def
R8846:8850 compcert.exportclight.Clightdefs <> tvoid def
R8271:8273 compcert.common.Values <> val ind
R8281:8281 Coq.Numbers.BinNums <> Z ind
R8289:8293 msl.shares <> share def
R8301:8305 msl.shares <> share def
R8314:8317 Coq.Init.Datatypes <> list ind
R8319:8319 Coq.Numbers.BinNums <> Z ind
R8326:8328 compcert.common.Values <> val ind
R8336:8338 compcert.common.Values <> val ind
R8411:8416 floyd.client_lemmas <> :logic:'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R8435:8436 floyd.client_lemmas <> :logic:'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R8464:8465 floyd.client_lemmas <> :logic:'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R8498:8509 floyd.client_lemmas <> :logic:'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R8478:8481 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R8466:8472 Coq.ZArith.Zcomplements <> Zlength def
R8482:8497 compcert.lib.Integers Int max_unsigned def
R8453:8455 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x not
R8449:8451 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R8437:8443 Coq.ZArith.Zcomplements <> Zlength def
R8456:8460 Coq.ZArith.Zpower <> two_p def
R8417:8430 veric.SeparationLogic <> writable_share def
R8510:8516 floyd.client_lemmas <> :logic:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R8537:8559 floyd.client_lemmas <> :logic:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R8611:8633 floyd.client_lemmas <> :logic:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R8656:8678 floyd.client_lemmas <> :logic:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R8727:8737 floyd.client_lemmas <> :logic:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R8679:8680 veric.lift <> ::'`('_x_')' not
R8686:8686 veric.lift <> ::'`('_x_')' not
R8681:8682 Coq.Init.Logic <> eq ind
R8689:8696 veric.expr <> eval_var def
R8705:8710 compcert.exportclight.Clightdefs <> tarray def
R8718:8724 sha.SHA256 <> CBLOCKz def
R8712:8716 compcert.exportclight.Clightdefs <> tuint def
R8698:8702 sha.sha <> _K256 def
R8634:8635 veric.lift <> ::'`('_x_')' not
R8641:8641 veric.lift <> ::'`('_x_')' not
R8636:8637 Coq.Init.Logic <> eq ind
R8644:8650 veric.expr <> eval_id def
R8652:8654 sha.sha <> _md def
R8560:8561 veric.lift <> ::'`('_x_')' not
R8597:8597 veric.lift <> ::'`('_x_')' not
R8562:8563 Coq.Init.Logic <> eq ind
R8566:8569 compcert.common.Values <> Vint constr
R8572:8579 compcert.lib.Integers Int repr def
R8582:8588 Coq.ZArith.Zcomplements <> Zlength def
R8600:8606 veric.expr <> eval_id def
R8608:8609 sha.sha <> _n def
R8517:8518 veric.lift <> ::'`('_x_')' not
R8523:8523 veric.lift <> ::'`('_x_')' not
R8519:8520 Coq.Init.Logic <> eq ind
R8526:8532 veric.expr <> eval_id def
R8534:8535 sha.sha <> _d def
R8738:8741 floyd.client_lemmas <> :logic:'SEP'_'('_x_';'_'..'_';'_x_')' not
R8756:8772 floyd.client_lemmas <> :logic:'SEP'_'('_x_';'_'..'_';'_x_')' not
R8797:8798 floyd.client_lemmas <> :logic:'SEP'_'('_x_';'_'..'_';'_x_')' not
R8835:8835 floyd.client_lemmas <> :logic:'SEP'_'('_x_';'_'..'_';'_x_')' not
R8799:8800 veric.lift <> ::'`('_x_')' not
R8834:8834 veric.lift <> ::'`('_x_')' not
R8801:8812 veric.SeparationLogic <> memory_block def
R8819:8826 compcert.lib.Integers Int repr def
R8773:8774 veric.lift <> ::'`('_x_')' not
R8796:8796 veric.lift <> ::'`('_x_')' not
R8775:8784 sha.spec_sha <> data_block def
R8742:8743 veric.lift <> ::'`('_x_')' not
R8755:8755 veric.lift <> ::'`('_x_')' not
R8744:8751 sha.spec_sha <> K_vector def
R8864:8867 floyd.client_lemmas <> :logic:'SEP'_'('_x_';'_'..'_';'_x_')' not
R8882:8898 floyd.client_lemmas <> :logic:'SEP'_'('_x_';'_'..'_';'_x_')' not
R8923:8924 floyd.client_lemmas <> :logic:'SEP'_'('_x_';'_'..'_';'_x_')' not
R8960:8960 floyd.client_lemmas <> :logic:'SEP'_'('_x_';'_'..'_';'_x_')' not
R8925:8926 veric.lift <> ::'`('_x_')' not
R8959:8959 veric.lift <> ::'`('_x_')' not
R8927:8936 sha.spec_sha <> data_block def
R8943:8949 sha.SHA256 <> SHA_256 def
R8899:8900 veric.lift <> ::'`('_x_')' not
R8922:8922 veric.lift <> ::'`('_x_')' not
R8901:8910 sha.spec_sha <> data_block def
R8868:8869 veric.lift <> ::'`('_x_')' not
R8881:8881 veric.lift <> ::'`('_x_')' not
R8870:8877 sha.spec_sha <> K_vector def
def 8975:8979 <> Vprog
R8983:8990 veric.expr <> varspecs def
R9019:9020 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R8995:8995 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R9001:9002 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R9018:9018 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R8996:9000 sha.sha <> _K256 def
R9003:9008 compcert.exportclight.Clightdefs <> tarray def
R9010:9014 compcert.exportclight.Clightdefs <> tuint def
R9021:9023 Coq.Init.Datatypes <> nil constr
def 9038:9042 <> Gprog
R9046:9053 veric.expr <> funspecs def
R9091:9095 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R9061:9090 sha.spec_sha <> __builtin_read32_reversed_spec def
R9127:9131 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R9096:9126 sha.spec_sha <> __builtin_write32_reversed_spec def
R9143:9145 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R9132:9142 sha.spec_sha <> memcpy_spec def
R9157:9161 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R9146:9156 sha.spec_sha <> memset_spec def
R9190:9192 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R9162:9189 sha.spec_sha <> sha256_block_data_order_spec def
R9209:9213 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R9193:9208 sha.spec_sha <> SHA256_Init_spec def
R9235:9239 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R9214:9234 sha.spec_sha <> SHA256_addlength_spec def
R9258:9260 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R9240:9257 sha.spec_sha <> SHA256_Update_spec def
R9278:9282 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R9261:9277 sha.spec_sha <> SHA256_Final_spec def
R9294:9296 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R9283:9293 sha.spec_sha <> SHA256_spec def
R9297:9299 Coq.Init.Datatypes <> nil constr
def 9312:9322 <> do_builtins
R9328:9330 Coq.Init.Datatypes <> nat ind
R9341:9344 Coq.Init.Datatypes <> list ind
R9352:9354 Coq.Init.Datatypes <> :type_scope:x_'*'_x not
R9347:9351 compcert.common.AST <> ident def
R9355:9361 compcert.common.AST <> globdef ind
R9370:9373 compcert.cfrontend.Ctypes <> type ind
R9363:9368 compcert.cfrontend.Clight <> fundef ind
R9379:9386 veric.expr <> funspecs def
R9401:9404 sha.spec_sha <> defs var
R9398:9398 sha.spec_sha <> n var
R9415:9415 Coq.Init.Datatypes <> S constr
R9485:9486 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R9421:9421 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R9424:9425 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R9484:9484 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R9426:9429 compcert.common.AST <> Gfun constr
R9432:9439 compcert.cfrontend.Clight <> External constr
R9442:9451 compcert.common.AST <> EF_builtin constr
R9569:9579 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R9502:9502 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R9505:9506 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R9568:9568 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R9507:9516 veric.expr <> mk_funspec constr
R9566:9567 msl.seplog <> FF meth
R9563:9564 msl.seplog <> FF meth
R9558:9561 Coq.Init.Datatypes <> unit ind
R9518:9518 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R9549:9550 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R9556:9556 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R9519:9530 floyd.client_lemmas <> iota_formals def
R9580:9590 sha.spec_sha <> do_builtins def
R9613:9615 Coq.Init.Datatypes <> nil constr
def 9635:9638 <> Gtot
R9673:9676 Coq.Init.Datatypes <> :list_scope:x_'++'_x not
R9643:9653 sha.spec_sha <> do_builtins def
R9658:9666 compcert.common.AST <> prog_defs proj
R9668:9671 sha.sha <> prog def
R9677:9681 sha.spec_sha <> Gprog def
