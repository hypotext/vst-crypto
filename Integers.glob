DIGEST 927b5cce807af57764f029df36a5748e
FIntegers
R1125:1133 Coq.Logic.Eqdep_dec <> <> lib
R1151:1155 Coq.ZArith.Zquot <> <> lib
R1173:1175 Coq.ZArith.Zwf <> <> lib
R1193:1198 Coqlib <> <> lib
ind 1234:1243 <> comparison
constr 1259:1261 <> Ceq
constr 1307:1309 <> Cne
constr 1360:1362 <> Clt
constr 1413:1415 <> Cle
constr 1475:1477 <> Cgt
constr 1531:1533 <> Cge
R1265:1274 Integers <> comparison ind
R1313:1322 Integers <> comparison ind
R1366:1375 Integers <> comparison ind
R1419:1428 Integers <> comparison ind
R1481:1490 Integers <> comparison ind
R1537:1546 Integers <> comparison ind
def 1604:1620 <> negate_comparison
R1626:1635 Integers <> comparison ind
R1639:1648 Integers <> comparison ind
R1661:1661 Integers <> c var
R1672:1674 Integers <> Ceq constr
R1679:1681 Integers <> Cne constr
R1687:1689 Integers <> Cne constr
R1694:1696 Integers <> Ceq constr
R1702:1704 Integers <> Clt constr
R1709:1711 Integers <> Cge constr
R1717:1719 Integers <> Cle constr
R1724:1726 Integers <> Cgt constr
R1732:1734 Integers <> Cgt constr
R1739:1741 Integers <> Cle constr
R1747:1749 Integers <> Cge constr
R1754:1756 Integers <> Clt constr
def 1777:1791 <> swap_comparison
R1797:1806 Integers <> comparison ind
R1810:1819 Integers <> comparison ind
R1832:1832 Integers <> c var
R1843:1845 Integers <> Ceq constr
R1850:1852 Integers <> Ceq constr
R1858:1860 Integers <> Cne constr
R1865:1867 Integers <> Cne constr
R1873:1875 Integers <> Clt constr
R1880:1882 Integers <> Cgt constr
R1888:1890 Integers <> Cle constr
R1895:1897 Integers <> Cge constr
R1903:1905 Integers <> Cgt constr
R1910:1912 Integers <> Clt constr
R1918:1920 Integers <> Cge constr
R1925:1927 Integers <> Cle constr
modtype 2003:2010 <> WORDSIZE
var 2024:2031 WORDSIZE wordsize
R2034:2036 Coq.Init.Datatypes <> nat ind
ax 2047:2063 WORDSIZE wordsize_not_zero
R2074:2077 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R2066:2073 Integers WORDSIZE wordsize defax
R2089:2096 Integers <> <> modtype
R2252:2259 Integers <> <> mod
mod 2243:2246 <> Make
def 2275:2282 Make wordsize
R2285:2287 Coq.Init.Datatypes <> nat ind
R2292:2302 Integers WS wordsize defax
def 2316:2324 Make zwordsize
R2327:2327 Coq.Numbers.BinNums <> Z ind
R2332:2339 Coq.ZArith.BinInt <> Z_of_nat syndef
R2341:2348 Integers Make wordsize def
def 2362:2368 Make modulus
R2372:2372 Coq.Numbers.BinNums <> Z ind
R2377:2389 Coq.ZArith.Zpower <> two_power_nat def
R2391:2398 Integers Make wordsize def
def 2412:2423 Make half_modulus
R2427:2427 Coq.Numbers.BinNums <> Z ind
R2439:2441 Coq.ZArith.BinInt <> :Z_scope:x_'/'_x not
R2432:2438 Integers Make modulus def
def 2456:2467 Make max_unsigned
R2471:2471 Coq.Numbers.BinNums <> Z ind
R2483:2485 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R2476:2482 Integers Make modulus def
def 2500:2509 Make max_signed
R2513:2513 Coq.Numbers.BinNums <> Z ind
R2530:2532 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R2518:2529 Integers Make half_modulus def
def 2547:2556 Make min_signed
R2560:2560 Coq.Numbers.BinNums <> Z ind
R2565:2566 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R2567:2578 Integers Make half_modulus def
prf 2589:2600 Make wordsize_pos
R2612:2614 Coq.ZArith.BinInt <> :Z_scope:x_'>'_x not
R2603:2611 Integers Make zwordsize def
R2634:2642 Integers Make zwordsize def
R2645:2652 Integers Make wordsize def
R2666:2685 Integers WS wordsize_not_zero prfax
R2666:2685 Integers WS wordsize_not_zero prfax
prf 2708:2720 Make modulus_power
R2730:2732 Coq.Init.Logic <> :type_scope:x_'='_x not
R2723:2729 Integers Make modulus def
R2733:2737 Coq.ZArith.Zpower <> two_p def
R2739:2747 Integers Make zwordsize def
R2766:2772 Integers Make modulus def
R2781:2799 Coqlib <> two_power_nat_two_p thm
R2781:2799 Coqlib <> two_power_nat_two_p thm
prf 2815:2825 Make modulus_pos
R2835:2837 Coq.ZArith.BinInt <> :Z_scope:x_'>'_x not
R2828:2834 Integers Make modulus def
R2858:2870 Integers Make modulus_power thm
R2858:2870 Integers Make modulus_power thm
R2879:2891 Coq.ZArith.Zpower <> two_p_gt_ZERO thm
R2879:2891 Coq.ZArith.Zpower <> two_p_gt_ZERO thm
R2905:2916 Integers Make wordsize_pos thm
R2905:2916 Integers Make wordsize_pos thm
constr 3178:3182 Make mkint
rec 3165:3167 Make int
proj 3186:3191 Make intval
proj 3197:3204 Make intrange
R3194:3194 Coq.Numbers.BinNums <> Z ind
R3209:3211 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x_'<'_x not
R3218:3220 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x_'<'_x not
R3212:3217 Integers <> intval meth
R3212:3217 Integers <> intval meth
R3221:3227 Integers Make modulus def
def 3289:3299 Make P_mod_two_p
R3305:3312 Coq.Numbers.BinNums <> positive ind
R3319:3321 Coq.Init.Datatypes <> nat ind
R3337:3337 Coq.Numbers.BinNums <> Z ind
R3350:3350 Integers <> n var
R3361:3361 Coq.Init.Datatypes <> O constr
R3372:3372 Coq.Init.Datatypes <> S constr
R3391:3391 Integers <> p var
R3406:3407 Coq.Numbers.BinNums <> xH constr
R3422:3423 Coq.Numbers.BinNums <> xO constr
R3430:3437 Coq.ZArith.BinInt Z double def
R3440:3450 Integers <> P_mod_two_p def
R3465:3466 Coq.Numbers.BinNums <> xI constr
R3473:3485 Coq.ZArith.BinInt Z succ_double def
R3488:3498 Integers <> P_mod_two_p def
def 3534:3546 Make Z_mod_modulus
R3552:3552 Coq.Numbers.BinNums <> Z ind
R3557:3557 Coq.Numbers.BinNums <> Z ind
R3570:3570 Integers <> x var
R3581:3582 Coq.Numbers.BinNums <> Z0 constr
R3593:3596 Coq.Numbers.BinNums <> Zpos constr
R3603:3613 Integers Make P_mod_two_p def
R3617:3624 Integers Make wordsize def
R3630:3633 Coq.Numbers.BinNums <> Zneg constr
R3649:3659 Integers Make P_mod_two_p def
R3663:3670 Integers Make wordsize def
R3678:3680 Coqlib <> zeq def
R3682:3682 Integers <> r var
R3705:3707 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R3698:3704 Integers Make modulus def
R3708:3708 Integers <> r var
prf 3724:3740 Make P_mod_two_p_range
R3758:3761 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R3777:3779 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R3762:3772 Integers Make P_mod_two_p def
R3776:3776 Integers <> n var
R3774:3774 Integers <> p var
R3762:3772 Integers Make P_mod_two_p def
R3776:3776 Integers <> n var
R3774:3774 Integers <> p var
R3780:3792 Coq.ZArith.Zpower <> two_power_nat def
R3794:3794 Integers <> n var
R3846:3860 Coqlib <> two_power_nat_O thm
R3846:3860 Coqlib <> two_power_nat_O thm
R3882:3896 Coq.ZArith.Zpower <> two_power_nat_S thm
R3882:3896 Coq.ZArith.Zpower <> two_power_nat_S thm
R3945:3962 Coq.ZArith.BinInt Z succ_double_spec thm
R3945:3962 Coq.ZArith.BinInt Z succ_double_spec thm
R4006:4018 Coq.ZArith.BinInt Z double_spec thm
R4006:4018 Coq.ZArith.BinInt Z double_spec thm
R4046:4062 Coqlib <> two_power_nat_pos thm
R4046:4062 Coqlib <> two_power_nat_pos thm
prf 4087:4100 Make P_mod_two_p_eq
R4132:4134 Coq.Init.Logic <> :type_scope:x_'='_x not
R4117:4127 Integers Make P_mod_two_p def
R4131:4131 Integers <> n var
R4129:4129 Integers <> p var
R4135:4135 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R4142:4148 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R4164:4164 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R4136:4139 Coq.Numbers.BinNums <> Zpos constr
R4141:4141 Integers <> p var
R4149:4161 Coq.ZArith.Zpower <> two_power_nat def
R4163:4163 Integers <> n var
R4196:4202 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R4204:4205 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R4212:4214 Coq.Init.Logic <> :type_scope:x_'='_x not
R4206:4209 Coq.Numbers.BinNums <> Zpos constr
R4211:4211 Integers <> p var
R4234:4236 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R4216:4218 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R4215:4215 Integers <> y var
R4219:4231 Coq.ZArith.Zpower <> two_power_nat def
R4233:4233 Integers <> n var
R4237:4247 Integers Make P_mod_two_p def
R4251:4251 Integers <> n var
R4249:4249 Integers <> p var
R4196:4202 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R4204:4205 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R4212:4214 Coq.Init.Logic <> :type_scope:x_'='_x not
R4206:4209 Coq.Numbers.BinNums <> Zpos constr
R4211:4211 Integers <> p var
R4234:4236 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R4216:4218 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R4215:4215 Integers <> y var
R4219:4231 Coq.ZArith.Zpower <> two_power_nat def
R4233:4233 Integers <> n var
R4237:4247 Integers Make P_mod_two_p def
R4251:4251 Integers <> n var
R4249:4249 Integers <> p var
R4305:4319 Coqlib <> two_power_nat_O thm
R4305:4319 Coqlib <> two_power_nat_O thm
R4330:4333 Coq.Numbers.BinNums <> Zpos constr
R4330:4333 Coq.Numbers.BinNums <> Zpos constr
R4359:4373 Coq.ZArith.Zpower <> two_power_nat_S thm
R4359:4373 Coq.ZArith.Zpower <> two_power_nat_S thm
R4477:4479 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R4468:4470 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R4471:4474 Coq.Numbers.BinNums <> Zpos constr
R4451:4454 Coq.Numbers.BinNums <> Zpos constr
R4457:4458 Coq.PArith.BinPosDef <> :positive_scope:x_'~'_'1' not
R4451:4454 Coq.Numbers.BinNums <> Zpos constr
R4457:4458 Coq.PArith.BinPosDef <> :positive_scope:x_'~'_'1' not
R4477:4479 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R4468:4470 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R4471:4474 Coq.Numbers.BinNums <> Zpos constr
R4513:4530 Coq.ZArith.BinInt Z succ_double_spec thm
R4513:4530 Coq.ZArith.BinInt Z succ_double_spec thm
R4620:4622 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R4623:4626 Coq.Numbers.BinNums <> Zpos constr
R4603:4606 Coq.Numbers.BinNums <> Zpos constr
R4609:4610 Coq.PArith.BinPosDef <> :positive_scope:x_'~'_'0' not
R4603:4606 Coq.Numbers.BinNums <> Zpos constr
R4609:4610 Coq.PArith.BinPosDef <> :positive_scope:x_'~'_'0' not
R4620:4622 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R4623:4626 Coq.Numbers.BinNums <> Zpos constr
R4662:4674 Coq.ZArith.BinInt Z double_spec thm
R4677:4687 Integers Make P_mod_two_p def
R4662:4674 Coq.ZArith.BinInt Z double_spec thm
R4677:4687 Integers Make P_mod_two_p def
R4791:4801 Coqlib <> Zmod_unique thm
R4791:4801 Coqlib <> Zmod_unique thm
R4823:4839 Integers Make P_mod_two_p_range thm
R4823:4839 Integers Make P_mod_two_p_range thm
prf 4854:4872 Make Z_mod_modulus_range
R4888:4891 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R4907:4909 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R4892:4904 Integers Make Z_mod_modulus def
R4906:4906 Integers <> x var
R4892:4904 Integers Make Z_mod_modulus def
R4906:4906 Integers <> x var
R4910:4916 Integers Make modulus def
R4943:4955 Integers Make Z_mod_modulus def
R4988:4998 Integers Make modulus_pos thm
R4988:4998 Integers Make modulus_pos thm
R5018:5034 Integers Make P_mod_two_p_range thm
R5018:5034 Integers Make P_mod_two_p_range thm
R5051:5061 Integers Make P_mod_two_p def
R5065:5072 Integers Make wordsize def
R5051:5061 Integers Make P_mod_two_p def
R5065:5072 Integers Make wordsize def
R5089:5092 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R5094:5096 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R5097:5103 Integers Make modulus def
R5115:5131 Integers Make P_mod_two_p_range thm
R5089:5092 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R5094:5096 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R5097:5103 Integers Make modulus def
R5115:5131 Integers Make P_mod_two_p_range thm
R5148:5150 Coqlib <> zeq def
R5148:5150 Coqlib <> zeq def
R5176:5186 Integers Make modulus_pos thm
R5176:5186 Integers Make modulus_pos thm
prf 5221:5240 Make Z_mod_modulus_range'
R5257:5259 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x_'<'_x not
R5275:5277 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x_'<'_x not
R5260:5272 Integers Make Z_mod_modulus def
R5274:5274 Integers <> x var
R5260:5272 Integers Make Z_mod_modulus def
R5274:5274 Integers <> x var
R5278:5284 Integers Make modulus def
R5316:5334 Integers Make Z_mod_modulus_range thm
R5316:5334 Integers Make Z_mod_modulus_range thm
prf 5359:5374 Make Z_mod_modulus_eq
R5404:5406 Coq.Init.Logic <> :type_scope:x_'='_x not
R5389:5401 Integers Make Z_mod_modulus def
R5403:5403 Integers <> x var
R5408:5412 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R5407:5407 Integers <> x var
R5413:5419 Integers Make modulus def
R5446:5458 Integers Make Z_mod_modulus def
R5485:5492 Coq.ZArith.Zdiv <> Zmod_0_l thm
R5485:5492 Coq.ZArith.Zdiv <> Zmod_0_l thm
R5511:5524 Integers Make P_mod_two_p_eq thm
R5511:5524 Integers Make P_mod_two_p_eq thm
R5544:5560 Integers Make P_mod_two_p_range thm
R5562:5569 Integers Make wordsize def
R5575:5588 Integers Make P_mod_two_p_eq thm
R5590:5597 Integers Make wordsize def
R5544:5560 Integers Make P_mod_two_p_range thm
R5562:5569 Integers Make wordsize def
R5575:5588 Integers Make P_mod_two_p_eq thm
R5590:5597 Integers Make wordsize def
R5612:5618 Integers Make modulus def
R5612:5618 Integers Make modulus def
R5646:5657 Coq.ZArith.Zdiv <> Z_div_mod_eq thm
R5668:5674 Integers Make modulus def
R5660:5663 Coq.Numbers.BinNums <> Zpos constr
R5646:5657 Coq.ZArith.Zdiv <> Z_div_mod_eq thm
R5668:5674 Integers Make modulus def
R5660:5663 Coq.Numbers.BinNums <> Zpos constr
R5684:5694 Integers Make modulus_pos thm
R5684:5694 Integers Make modulus_pos thm
R5727:5729 Coq.ZArith.BinInt <> :Z_scope:x_'/'_x not
R5721:5724 Coq.Numbers.BinNums <> Zpos constr
R5730:5736 Integers Make modulus def
R5727:5729 Coq.ZArith.BinInt <> :Z_scope:x_'/'_x not
R5721:5724 Coq.Numbers.BinNums <> Zpos constr
R5730:5736 Integers Make modulus def
R5759:5769 Integers Make P_mod_two_p def
R5773:5780 Integers Make wordsize def
R5759:5769 Integers Make P_mod_two_p def
R5773:5780 Integers Make wordsize def
R5841:5843 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R5851:5851 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R5844:5848 Coq.ZArith.BinInt Z pos syndef
R5826:5830 Coq.ZArith.BinInt Z neg syndef
R5826:5830 Coq.ZArith.BinInt Z neg syndef
R5841:5843 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R5851:5851 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R5844:5848 Coq.ZArith.BinInt Z pos syndef
R5865:5867 Coqlib <> zeq def
R5865:5867 Coqlib <> zeq def
R5915:5915 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R5897:5907 Coqlib <> Zmod_unique thm
R5915:5915 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R5897:5907 Coqlib <> Zmod_unique thm
R5967:5977 Integers Make modulus_pos thm
R5967:5977 Integers Make modulus_pos thm
R6029:6031 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R6027:6027 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R6009:6019 Coqlib <> Zmod_unique thm
R6029:6031 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R6027:6027 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R6009:6019 Coqlib <> Zmod_unique thm
def 6249:6256 Make unsigned
R6262:6264 Integers Make int rec
R6269:6269 Coq.Numbers.BinNums <> Z ind
R6274:6279 Integers Make intval proj
R6281:6281 Integers <> n var
def 6296:6301 Make signed
R6307:6309 Integers Make int rec
R6314:6314 Coq.Numbers.BinNums <> Z ind
R6330:6337 Integers Make unsigned def
R6339:6339 Integers <> n var
R6349:6351 Coqlib <> zlt def
R6355:6366 Integers Make half_modulus def
R6353:6353 Integers <> x var
R6381:6383 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R6380:6380 Integers <> x var
R6384:6390 Integers Make modulus def
R6373:6373 Integers <> x var
def 6544:6547 Make repr
R6553:6553 Coq.Numbers.BinNums <> Z ind
R6558:6560 Integers Make int rec
R6568:6572 Integers Make mkint constr
R6593:6612 Integers Make Z_mod_modulus_range' thm
R6614:6614 Integers <> x var
R6575:6587 Integers Make Z_mod_modulus def
R6589:6589 Integers <> x var
def 6630:6633 Make zero
R6638:6641 Integers Make repr def
def 6657:6659 Make one
R6665:6668 Integers Make repr def
def 6684:6687 Make mone
R6692:6695 Integers Make repr def
def 6714:6722 Make iwordsize
R6727:6730 Integers Make repr def
R6732:6740 Integers Make zwordsize def
prf 6750:6757 Make mkint_eq
R6799:6801 Coq.Init.Logic <> :type_scope:x_'='_x not
R6789:6793 Integers Make mkint constr
R6797:6798 Integers <> Px var
R6795:6795 Integers <> x var
R6802:6806 Integers Make mkint constr
R6810:6811 Integers <> Py var
R6808:6808 Integers <> y var
R6781:6783 Coq.Init.Logic <> :type_scope:x_'='_x not
R6780:6780 Integers <> x var
R6784:6784 Integers <> y var
R6863:6863 Coq.Numbers.BinNums <> Z ind
R6875:6877 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x not
R6874:6874 Integers <> n var
R6878:6878 Integers <> m var
R6884:6886 Coq.Init.Logic <> :type_scope:x_'='_x not
R6882:6883 Integers <> P1 var
R6887:6888 Integers <> P2 var
R6863:6863 Coq.Numbers.BinNums <> Z ind
R6875:6877 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x not
R6874:6874 Integers <> n var
R6878:6878 Integers <> m var
R6884:6886 Coq.Init.Logic <> :type_scope:x_'='_x not
R6882:6883 Integers <> P1 var
R6887:6888 Integers <> P2 var
R6907:6909 Coq.ZArith.BinInt Z lt def
R6931:6947 Coq.Logic.Eqdep_dec <> eq_proofs_unicity thm
R6931:6947 Coq.Logic.Eqdep_dec <> eq_proofs_unicity thm
prf 7179:7184 Make eq_dec
R7200:7202 Integers Make int rec
R7206:7206 Coq.Init.Specif <> :type_scope:'{'_x_'}'_'+'_'{'_x_'}' not
R7212:7216 Coq.Init.Specif <> :type_scope:'{'_x_'}'_'+'_'{'_x_'}' not
R7223:7223 Coq.Init.Specif <> :type_scope:'{'_x_'}'_'+'_'{'_x_'}' not
R7208:7210 Coq.Init.Logic <> :type_scope:x_'='_x not
R7207:7207 Integers <> x var
R7211:7211 Integers <> y var
R7218:7221 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R7217:7217 Integers <> x var
R7222:7222 Integers <> y var
R7277:7279 Coqlib <> zeq def
R7277:7279 Coqlib <> zeq def
R7313:7320 Integers Make mkint_eq thm
R7313:7320 Integers Make mkint_eq thm
def 7459:7460 Make eq
R7468:7470 Integers Make int rec
R7475:7478 Coq.Init.Datatypes <> bool ind
R7489:7491 Coqlib <> zeq def
R7507:7514 Integers Make unsigned def
R7516:7516 Integers <> y var
R7494:7501 Integers Make unsigned def
R7503:7503 Integers <> x var
R7534:7538 Coq.Init.Datatypes <> false constr
R7524:7527 Coq.Init.Datatypes <> true constr
def 7552:7553 Make lt
R7561:7563 Integers Make int rec
R7568:7571 Coq.Init.Datatypes <> bool ind
R7581:7583 Coqlib <> zlt def
R7597:7602 Integers Make signed def
R7604:7604 Integers <> y var
R7586:7591 Integers Make signed def
R7593:7593 Integers <> x var
R7622:7626 Coq.Init.Datatypes <> false constr
R7612:7615 Coq.Init.Datatypes <> true constr
def 7640:7642 Make ltu
R7650:7652 Integers Make int rec
R7657:7660 Coq.Init.Datatypes <> bool ind
R7670:7672 Coqlib <> zlt def
R7688:7695 Integers Make unsigned def
R7697:7697 Integers <> y var
R7675:7682 Integers Make unsigned def
R7684:7684 Integers <> x var
R7715:7719 Coq.Init.Datatypes <> false constr
R7705:7708 Coq.Init.Datatypes <> true constr
def 7734:7736 Make neg
R7742:7744 Integers Make int rec
R7749:7751 Integers Make int rec
R7756:7759 Integers Make repr def
R7762:7763 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R7764:7771 Integers Make unsigned def
R7773:7773 Integers <> x var
def 7789:7791 Make add
R7799:7801 Integers Make int rec
R7806:7808 Integers Make int rec
R7815:7818 Integers Make repr def
R7831:7833 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R7821:7828 Integers Make unsigned def
R7830:7830 Integers <> x var
R7834:7841 Integers Make unsigned def
R7843:7843 Integers <> y var
def 7858:7860 Make sub
R7868:7870 Integers Make int rec
R7875:7877 Integers Make int rec
R7884:7887 Integers Make repr def
R7900:7902 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R7890:7897 Integers Make unsigned def
R7899:7899 Integers <> x var
R7903:7910 Integers Make unsigned def
R7912:7912 Integers <> y var
def 7927:7929 Make mul
R7937:7939 Integers Make int rec
R7944:7946 Integers Make int rec
R7953:7956 Integers Make repr def
R7969:7971 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R7959:7966 Integers Make unsigned def
R7968:7968 Integers <> x var
R7972:7979 Integers Make unsigned def
R7981:7981 Integers <> y var
def 7997:8000 Make divs
R8008:8010 Integers Make int rec
R8015:8017 Integers Make int rec
R8024:8027 Integers Make repr def
R8030:8035 Coq.ZArith.BinInt Z quot def
R8049:8054 Integers Make signed def
R8056:8056 Integers <> y var
R8038:8043 Integers Make signed def
R8045:8045 Integers <> x var
def 8072:8075 Make mods
R8083:8085 Integers Make int rec
R8090:8092 Integers Make int rec
R8099:8102 Integers Make repr def
R8105:8109 Coq.ZArith.BinInt Z rem def
R8123:8128 Integers Make signed def
R8130:8130 Integers <> y var
R8112:8117 Integers Make signed def
R8119:8119 Integers <> x var
def 8147:8150 Make divu
R8158:8160 Integers Make int rec
R8165:8167 Integers Make int rec
R8174:8177 Integers Make repr def
R8190:8192 Coq.ZArith.BinInt <> :Z_scope:x_'/'_x not
R8180:8187 Integers Make unsigned def
R8189:8189 Integers <> x var
R8193:8200 Integers Make unsigned def
R8202:8202 Integers <> y var
def 8217:8220 Make modu
R8228:8230 Integers Make int rec
R8235:8237 Integers Make int rec
R8244:8247 Integers Make repr def
R8250:8250 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R8261:8267 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R8278:8278 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R8251:8258 Integers Make unsigned def
R8260:8260 Integers <> x var
R8268:8275 Integers Make unsigned def
R8277:8277 Integers <> y var
def 8330:8332 Make and
R8340:8342 Integers Make int rec
R8346:8348 Integers Make int rec
R8353:8356 Integers Make repr def
R8359:8364 Coq.ZArith.BinInt Z land def
R8380:8387 Integers Make unsigned def
R8389:8389 Integers <> y var
R8367:8374 Integers Make unsigned def
R8376:8376 Integers <> x var
def 8405:8406 Make or
R8414:8416 Integers Make int rec
R8420:8422 Integers Make int rec
R8427:8430 Integers Make repr def
R8433:8437 Coq.ZArith.BinInt Z lor def
R8453:8460 Integers Make unsigned def
R8462:8462 Integers <> y var
R8440:8447 Integers Make unsigned def
R8449:8449 Integers <> x var
def 8478:8480 Make xor
R8488:8490 Integers Make int rec
R8495:8497 Integers Make int rec
R8502:8505 Integers Make repr def
R8508:8513 Coq.ZArith.BinInt Z lxor def
R8529:8536 Integers Make unsigned def
R8538:8538 Integers <> y var
R8516:8523 Integers Make unsigned def
R8525:8525 Integers <> x var
def 8555:8557 Make not
R8563:8565 Integers Make int rec
R8570:8572 Integers Make int rec
R8577:8579 Integers Make xor def
R8583:8586 Integers Make mone def
R8581:8581 Integers <> x var
def 8629:8631 Make shl
R8639:8641 Integers Make int rec
R8645:8647 Integers Make int rec
R8652:8655 Integers Make repr def
R8658:8665 Coq.ZArith.BinInt Z shiftl def
R8681:8688 Integers Make unsigned def
R8690:8690 Integers <> y var
R8668:8675 Integers Make unsigned def
R8677:8677 Integers <> x var
def 8706:8709 Make shru
R8717:8719 Integers Make int rec
R8723:8725 Integers Make int rec
R8730:8733 Integers Make repr def
R8736:8743 Coq.ZArith.BinInt Z shiftr def
R8759:8766 Integers Make unsigned def
R8768:8768 Integers <> y var
R8746:8753 Integers Make unsigned def
R8755:8755 Integers <> x var
def 8784:8786 Make shr
R8794:8796 Integers Make int rec
R8800:8802 Integers Make int rec
R8807:8810 Integers Make repr def
R8813:8820 Coq.ZArith.BinInt Z shiftr def
R8834:8841 Integers Make unsigned def
R8843:8843 Integers <> y var
R8823:8828 Integers Make signed def
R8830:8830 Integers <> x var
def 8860:8862 Make rol
R8870:8872 Integers Make int rec
R8877:8879 Integers Make int rec
R8895:8895 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R8906:8911 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R8896:8903 Integers Make unsigned def
R8905:8905 Integers <> y var
R8912:8920 Integers Make zwordsize def
R8927:8930 Integers Make repr def
R8933:8937 Coq.ZArith.BinInt Z lor def
R8966:8973 Coq.ZArith.BinInt Z shiftr def
R8998:9000 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R8989:8997 Integers Make zwordsize def
R9001:9001 Integers <> n var
R8976:8983 Integers Make unsigned def
R8985:8985 Integers <> x var
R8940:8947 Coq.ZArith.BinInt Z shiftl def
R8962:8962 Integers <> n var
R8950:8957 Integers Make unsigned def
R8959:8959 Integers <> x var
def 9018:9020 Make ror
R9028:9030 Integers Make int rec
R9035:9037 Integers Make int rec
R9053:9053 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R9064:9069 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R9054:9061 Integers Make unsigned def
R9063:9063 Integers <> y var
R9070:9078 Integers Make zwordsize def
R9085:9088 Integers Make repr def
R9091:9095 Coq.ZArith.BinInt Z lor def
R9124:9131 Coq.ZArith.BinInt Z shiftl def
R9156:9158 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R9147:9155 Integers Make zwordsize def
R9159:9159 Integers <> n var
R9134:9141 Integers Make unsigned def
R9143:9143 Integers <> x var
R9098:9105 Coq.ZArith.BinInt Z shiftr def
R9120:9120 Integers <> n var
R9108:9115 Integers Make unsigned def
R9117:9117 Integers <> x var
def 9177:9180 Make rolm
R9190:9192 Integers Make int rec
R9196:9198 Integers Make int rec
R9203:9205 Integers Make and def
R9217:9217 Integers <> m var
R9208:9210 Integers Make rol def
R9214:9214 Integers <> a var
R9212:9212 Integers <> x var
def 9358:9361 Make shrx
R9369:9371 Integers Make int rec
R9375:9377 Integers Make int rec
R9384:9387 Integers Make divs def
R9392:9394 Integers Make shl def
R9400:9400 Integers <> y var
R9396:9398 Integers Make one def
R9389:9389 Integers <> x var
def 9452:9456 Make mulhu
R9464:9466 Integers Make int rec
R9470:9472 Integers Make int rec
R9477:9480 Integers Make repr def
R9483:9483 Coq.ZArith.BinInt <> :Z_scope:x_'/'_x not
R9507:9510 Coq.ZArith.BinInt <> :Z_scope:x_'/'_x not
R9494:9496 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R9484:9491 Integers Make unsigned def
R9493:9493 Integers <> x var
R9497:9504 Integers Make unsigned def
R9506:9506 Integers <> y var
R9511:9517 Integers Make modulus def
def 9532:9536 Make mulhs
R9544:9546 Integers Make int rec
R9550:9552 Integers Make int rec
R9557:9560 Integers Make repr def
R9563:9563 Coq.ZArith.BinInt <> :Z_scope:x_'/'_x not
R9583:9586 Coq.ZArith.BinInt <> :Z_scope:x_'/'_x not
R9572:9574 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R9564:9569 Integers Make signed def
R9571:9571 Integers <> x var
R9575:9580 Integers Make signed def
R9582:9582 Integers <> y var
R9587:9593 Integers Make modulus def
def 9633:9640 Make negative
R9646:9648 Integers Make int rec
R9652:9654 Integers Make int rec
R9664:9665 Integers Make lt def
R9669:9672 Integers Make zero def
R9667:9667 Integers <> x var
R9688:9691 Integers Make zero def
R9679:9681 Integers Make one def
def 9706:9714 Make add_carry
R9726:9728 Integers Make int rec
R9732:9734 Integers Make int rec
R9744:9746 Coqlib <> zlt def
R9789:9795 Integers Make modulus def
R9772:9774 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R9759:9761 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R9749:9756 Integers Make unsigned def
R9758:9758 Integers <> x var
R9762:9769 Integers Make unsigned def
R9771:9771 Integers <> y var
R9775:9782 Integers Make unsigned def
R9784:9786 Integers <> cin var
R9812:9814 Integers Make one def
R9802:9805 Integers Make zero def
def 9829:9840 Make add_overflow
R9852:9854 Integers Make int rec
R9858:9860 Integers Make int rec
R9895:9897 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R9884:9886 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R9876:9881 Integers Make signed def
R9883:9883 Integers <> x var
R9887:9892 Integers Make signed def
R9894:9894 Integers <> y var
R9898:9903 Integers Make signed def
R9905:9907 Integers <> cin var
R9933:9936 Coq.Init.Datatypes <> :bool_scope:x_'&&'_x not
R9917:9919 Coqlib <> zle def
R9932:9932 Integers <> s var
R9921:9930 Integers Make min_signed def
R9937:9939 Coqlib <> zle def
R9943:9952 Integers Make max_signed def
R9941:9941 Integers <> s var
R9969:9971 Integers Make one def
R9959:9962 Integers Make zero def
def 9986:9995 Make sub_borrow
R10007:10009 Integers Make int rec
R10013:10015 Integers Make int rec
R10025:10027 Coqlib <> zlt def
R10053:10055 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R10040:10042 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R10030:10037 Integers Make unsigned def
R10039:10039 Integers <> x var
R10043:10050 Integers Make unsigned def
R10052:10052 Integers <> y var
R10056:10063 Integers Make unsigned def
R10065:10067 Integers <> bin var
R10086:10089 Integers Make zero def
R10077:10079 Integers Make one def
def 10104:10115 Make sub_overflow
R10127:10129 Integers Make int rec
R10133:10135 Integers Make int rec
R10170:10172 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R10159:10161 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R10151:10156 Integers Make signed def
R10158:10158 Integers <> x var
R10162:10167 Integers Make signed def
R10169:10169 Integers <> y var
R10173:10178 Integers Make signed def
R10180:10182 Integers <> bin var
R10208:10211 Coq.Init.Datatypes <> :bool_scope:x_'&&'_x not
R10192:10194 Coqlib <> zle def
R10207:10207 Integers <> s var
R10196:10205 Integers Make min_signed def
R10212:10214 Coqlib <> zle def
R10218:10227 Integers Make max_signed def
R10216:10216 Integers <> s var
R10244:10246 Integers Make one def
R10234:10237 Integers Make zero def
def 10349:10357 Make shr_carry
R10365:10367 Integers Make int rec
R10372:10374 Integers Make int rec
R10393:10396 Coq.Init.Datatypes <> :bool_scope:x_'&&'_x not
R10384:10385 Integers Make lt def
R10389:10392 Integers Make zero def
R10387:10387 Integers <> x var
R10397:10400 Coq.Init.Datatypes <> negb def
R10403:10404 Integers Make eq def
R10436:10439 Integers Make zero def
R10407:10409 Integers Make and def
R10414:10416 Integers Make sub def
R10430:10432 Integers Make one def
R10419:10421 Integers Make shl def
R10427:10427 Integers <> y var
R10423:10425 Integers Make one def
R10411:10411 Integers <> x var
R10458:10461 Integers Make zero def
R10449:10451 Integers Make one def
def 10509:10516 Make Zshiftin
R10522:10525 Coq.Init.Datatypes <> bool ind
R10532:10532 Coq.Numbers.BinNums <> Z ind
R10537:10537 Coq.Numbers.BinNums <> Z ind
R10547:10547 Integers <> b var
R10575:10582 Coq.ZArith.BinInt Z double def
R10584:10584 Integers <> x var
R10554:10566 Coq.ZArith.BinInt Z succ_double def
R10568:10568 Integers <> x var
def 11126:11134 Make Zzero_ext
R11140:11140 Coq.Numbers.BinNums <> Z ind
R11147:11147 Coq.Numbers.BinNums <> Z ind
R11152:11152 Coq.Numbers.BinNums <> Z ind
R11159:11164 Coq.ZArith.BinInt Z iter def
R11245:11245 Integers <> x var
R11187:11194 Integers Make Zshiftin def
R11207:11209 Integers <> rec var
R11212:11217 Coq.ZArith.BinInt Z div2 def
R11219:11219 Integers <> x var
R11197:11201 Coq.ZArith.BinInt Z odd def
R11203:11203 Integers <> x var
R11166:11166 Integers <> n var
def 11260:11268 Make Zsign_ext
R11274:11274 Coq.Numbers.BinNums <> Z ind
R11281:11281 Coq.Numbers.BinNums <> Z ind
R11286:11286 Coq.Numbers.BinNums <> Z ind
R11293:11298 Coq.ZArith.BinInt Z iter def
R11411:11411 Integers <> x var
R11383:11387 Coq.ZArith.BinInt Z odd def
R11389:11389 Integers <> x var
R11329:11336 Integers Make Zshiftin def
R11349:11351 Integers <> rec var
R11354:11359 Coq.ZArith.BinInt Z div2 def
R11361:11361 Integers <> x var
R11339:11343 Coq.ZArith.BinInt Z odd def
R11345:11345 Integers <> x var
R11301:11306 Coq.ZArith.BinInt Z pred def
R11308:11308 Integers <> n var
def 11426:11433 Make zero_ext
R11439:11439 Coq.Numbers.BinNums <> Z ind
R11446:11448 Integers Make int rec
R11453:11455 Integers Make int rec
R11460:11463 Integers Make repr def
R11466:11474 Integers Make Zzero_ext def
R11479:11486 Integers Make unsigned def
R11488:11488 Integers <> x var
R11476:11476 Integers <> n var
def 11505:11512 Make sign_ext
R11518:11518 Coq.Numbers.BinNums <> Z ind
R11525:11527 Integers Make int rec
R11532:11534 Integers Make int rec
R11539:11542 Integers Make repr def
R11545:11553 Integers Make Zsign_ext def
R11558:11565 Integers Make unsigned def
R11567:11567 Integers <> x var
R11555:11555 Integers <> n var
def 11643:11652 Make Z_one_bits
R11658:11660 Coq.Init.Datatypes <> nat ind
R11667:11667 Coq.Numbers.BinNums <> Z ind
R11674:11674 Coq.Numbers.BinNums <> Z ind
R11689:11692 Coq.Init.Datatypes <> list ind
R11694:11694 Coq.Numbers.BinNums <> Z ind
R11707:11707 Integers <> n var
R11718:11718 Coq.Init.Datatypes <> O constr
R11723:11725 Coq.Init.Datatypes <> nil constr
R11731:11731 Coq.Init.Datatypes <> S constr
R11747:11751 Coq.ZArith.BinInt Z odd def
R11753:11753 Integers <> x var
R11812:11821 Integers <> Z_one_bits def
R11838:11838 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R11837:11837 Integers <> i var
R11826:11831 Coq.ZArith.BinInt Z div2 def
R11833:11833 Integers <> x var
R11767:11770 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R11766:11766 Integers <> i var
R11771:11780 Integers <> Z_one_bits def
R11797:11797 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R11796:11796 Integers <> i var
R11785:11790 Coq.ZArith.BinInt Z div2 def
R11792:11792 Integers <> x var
def 11861:11868 Make one_bits
R11874:11876 Integers Make int rec
R11881:11884 Coq.Init.Datatypes <> list ind
R11886:11888 Integers Make int rec
R11895:11902 Coq.Lists.List <> map def
R11910:11919 Integers Make Z_one_bits def
R11931:11938 Integers Make unsigned def
R11940:11940 Integers <> x var
R11921:11928 Integers Make wordsize def
R11904:11907 Integers Make repr def
def 11997:12005 Make is_power2
R12011:12013 Integers Make int rec
R12018:12023 Coq.Init.Datatypes <> option ind
R12025:12027 Integers Make int rec
R12040:12049 Integers Make Z_one_bits def
R12061:12068 Integers Make unsigned def
R12070:12070 Integers <> x var
R12051:12058 Integers Make wordsize def
R12085:12088 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R12089:12091 Coq.Init.Datatypes <> nil constr
R12096:12099 Coq.Init.Datatypes <> Some constr
R12102:12105 Integers Make repr def
R12119:12122 Coq.Init.Datatypes <> None constr
def 12164:12166 Make cmp
R12172:12181 Integers Make comparison ind
R12190:12192 Integers Make int rec
R12197:12200 Coq.Init.Datatypes <> bool ind
R12213:12213 Integers <> c var
R12224:12226 Integers Make Ceq constr
R12231:12232 Integers Make eq def
R12236:12236 Integers <> y var
R12234:12234 Integers <> x var
R12242:12244 Integers Make Cne constr
R12249:12252 Coq.Init.Datatypes <> negb def
R12255:12256 Integers Make eq def
R12260:12260 Integers <> y var
R12258:12258 Integers <> x var
R12267:12269 Integers Make Clt constr
R12274:12275 Integers Make lt def
R12279:12279 Integers <> y var
R12277:12277 Integers <> x var
R12285:12287 Integers Make Cle constr
R12292:12295 Coq.Init.Datatypes <> negb def
R12298:12299 Integers Make lt def
R12303:12303 Integers <> x var
R12301:12301 Integers <> y var
R12310:12312 Integers Make Cgt constr
R12317:12318 Integers Make lt def
R12322:12322 Integers <> x var
R12320:12320 Integers <> y var
R12328:12330 Integers Make Cge constr
R12335:12338 Coq.Init.Datatypes <> negb def
R12341:12342 Integers Make lt def
R12346:12346 Integers <> y var
R12344:12344 Integers <> x var
def 12368:12371 Make cmpu
R12377:12386 Integers Make comparison ind
R12395:12397 Integers Make int rec
R12402:12405 Coq.Init.Datatypes <> bool ind
R12418:12418 Integers <> c var
R12429:12431 Integers Make Ceq constr
R12436:12437 Integers Make eq def
R12441:12441 Integers <> y var
R12439:12439 Integers <> x var
R12447:12449 Integers Make Cne constr
R12454:12457 Coq.Init.Datatypes <> negb def
R12460:12461 Integers Make eq def
R12465:12465 Integers <> y var
R12463:12463 Integers <> x var
R12472:12474 Integers Make Clt constr
R12479:12481 Integers Make ltu def
R12485:12485 Integers <> y var
R12483:12483 Integers <> x var
R12491:12493 Integers Make Cle constr
R12498:12501 Coq.Init.Datatypes <> negb def
R12504:12506 Integers Make ltu def
R12510:12510 Integers <> x var
R12508:12508 Integers <> y var
R12517:12519 Integers Make Cgt constr
R12524:12526 Integers Make ltu def
R12530:12530 Integers <> x var
R12528:12528 Integers <> y var
R12536:12538 Integers Make Cge constr
R12543:12546 Coq.Init.Datatypes <> negb def
R12549:12551 Integers Make ltu def
R12555:12555 Integers <> y var
R12553:12553 Integers <> x var
def 12577:12584 Make is_false
R12590:12592 Integers Make int rec
R12606:12608 Coq.Init.Logic <> :type_scope:x_'='_x not
R12605:12605 Integers <> x var
R12609:12612 Integers Make zero def
def 12626:12632 Make is_true
R12639:12641 Integers Make int rec
R12655:12658 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R12654:12654 Integers <> x var
R12659:12662 Integers Make zero def
def 12676:12682 Make notbool
R12689:12691 Integers Make int rec
R12696:12698 Integers Make int rec
R12707:12708 Integers Make eq def
R12712:12715 Integers Make zero def
R12710:12710 Integers <> x var
R12731:12734 Integers Make zero def
R12722:12724 Integers Make one def
prf 12858:12875 Make half_modulus_power
R12892:12894 Coq.Init.Logic <> :type_scope:x_'='_x not
R12880:12891 Integers Make half_modulus def
R12895:12899 Coq.ZArith.Zpower <> two_p def
R12911:12913 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R12902:12910 Integers Make zwordsize def
R12934:12945 Integers Make half_modulus def
R12956:12968 Integers Make modulus_power thm
R12956:12968 Integers Make modulus_power thm
R12995:12997 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R12986:12994 Integers Make zwordsize def
R12995:12997 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R12986:12994 Integers Make zwordsize def
R13014:13022 Integers Make zwordsize def
R13031:13035 Coq.ZArith.BinInt <> Zsucc syndef
R13031:13035 Coq.ZArith.BinInt <> Zsucc syndef
R13014:13022 Integers Make zwordsize def
R13053:13059 Coq.ZArith.Zpower <> two_p_S thm
R13053:13059 Coq.ZArith.Zpower <> two_p_S thm
R13070:13079 Coq.ZArith.BinInt <> Zmult_comm syndef
R13070:13079 Coq.ZArith.BinInt <> Zmult_comm syndef
R13088:13097 Coq.ZArith.Zdiv <> Z_div_mult thm
R13088:13097 Coq.ZArith.Zdiv <> Z_div_mult thm
R13132:13143 Integers Make wordsize_pos thm
R13132:13143 Integers Make wordsize_pos thm
prf 13187:13206 Make half_modulus_modulus
R13216:13218 Coq.Init.Logic <> :type_scope:x_'='_x not
R13209:13215 Integers Make modulus def
R13220:13222 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R13223:13234 Integers Make half_modulus def
R13254:13271 Integers Make half_modulus_power thm
R13254:13271 Integers Make half_modulus_power thm
R13282:13294 Integers Make modulus_power thm
R13282:13294 Integers Make modulus_power thm
R13311:13317 Coq.ZArith.Zpower <> two_p_S thm
R13311:13317 Coq.ZArith.Zpower <> two_p_S thm
R13326:13332 Coq.Init.Logic <> f_equal thm
R13326:13332 Coq.Init.Logic <> f_equal thm
R13356:13367 Integers Make wordsize_pos thm
R13356:13367 Integers Make wordsize_pos thm
prf 13546:13561 Make half_modulus_pos
R13576:13578 Coq.ZArith.BinInt <> :Z_scope:x_'>'_x not
R13564:13575 Integers Make half_modulus def
R13599:13616 Integers Make half_modulus_power thm
R13599:13616 Integers Make half_modulus_power thm
R13625:13637 Coq.ZArith.Zpower <> two_p_gt_ZERO thm
R13625:13637 Coq.ZArith.Zpower <> two_p_gt_ZERO thm
R13651:13662 Integers Make wordsize_pos thm
R13651:13662 Integers Make wordsize_pos thm
prf 13685:13698 Make min_signed_neg
R13711:13713 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x not
R13701:13710 Integers Make min_signed def
R13733:13742 Integers Make min_signed def
R13756:13771 Integers Make half_modulus_pos thm
R13756:13771 Integers Make half_modulus_pos thm
prf 13794:13807 Make max_signed_pos
R13820:13823 Coq.ZArith.BinInt <> :Z_scope:x_'>='_x not
R13810:13819 Integers Make max_signed def
R13843:13852 Integers Make max_signed def
R13866:13881 Integers Make half_modulus_pos thm
R13866:13881 Integers Make half_modulus_pos thm
prf 13904:13924 Make wordsize_max_unsigned
R13936:13939 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R13927:13935 Integers Make zwordsize def
R13940:13951 Integers Make max_unsigned def
R13980:13982 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x not
R13971:13979 Integers Make zwordsize def
R13983:13989 Integers Make modulus def
R13980:13982 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x not
R13971:13979 Integers Make zwordsize def
R13983:13989 Integers Make modulus def
R14005:14017 Integers Make modulus_power thm
R14005:14017 Integers Make modulus_power thm
R14026:14037 Coqlib <> two_p_strict thm
R14026:14037 Coqlib <> two_p_strict thm
R14056:14067 Integers Make wordsize_pos thm
R14056:14067 Integers Make wordsize_pos thm
R14087:14098 Integers Make max_unsigned def
prf 14121:14145 Make two_wordsize_max_unsigned
R14165:14168 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R14161:14163 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R14149:14151 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R14152:14160 Integers Make zwordsize def
R14169:14180 Integers Make max_unsigned def
R14217:14219 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x not
R14213:14215 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R14201:14203 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R14204:14212 Integers Make zwordsize def
R14220:14226 Integers Make modulus def
R14217:14219 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x not
R14213:14215 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R14201:14203 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R14204:14212 Integers Make zwordsize def
R14220:14226 Integers Make modulus def
R14242:14254 Integers Make modulus_power thm
R14242:14254 Integers Make modulus_power thm
R14263:14276 Coqlib <> two_p_strict_2 thm
R14263:14276 Coqlib <> two_p_strict_2 thm
R14290:14301 Integers Make wordsize_pos thm
R14290:14301 Integers Make wordsize_pos thm
R14320:14331 Integers Make max_unsigned def
prf 14354:14372 Make max_signed_unsigned
R14385:14387 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x not
R14375:14384 Integers Make max_signed def
R14388:14399 Integers Make max_unsigned def
R14418:14427 Integers Make max_signed def
R14430:14441 Integers Make max_unsigned def
R14452:14471 Integers Make half_modulus_modulus thm
R14452:14471 Integers Make half_modulus_modulus thm
R14488:14503 Integers Make half_modulus_pos thm
R14488:14503 Integers Make half_modulus_pos thm
prf 14525:14540 Make unsigned_repr_eq
R14572:14574 Coq.Init.Logic <> :type_scope:x_'='_x not
R14555:14562 Integers Make unsigned def
R14565:14568 Integers Make repr def
R14570:14570 Integers <> x var
R14575:14578 Coq.ZArith.Zdiv <> Zmod syndef
R14582:14588 Integers Make modulus def
R14580:14580 Integers <> x var
R14621:14636 Integers Make Z_mod_modulus_eq thm
R14621:14636 Integers Make Z_mod_modulus_eq thm
prf 14652:14665 Make signed_repr_eq
R14695:14697 Coq.Init.Logic <> :type_scope:x_'='_x not
R14680:14685 Integers Make signed def
R14688:14691 Integers Make repr def
R14693:14693 Integers <> x var
R14701:14703 Coqlib <> zlt def
R14722:14733 Integers Make half_modulus def
R14706:14709 Coq.ZArith.Zdiv <> Zmod syndef
R14713:14719 Integers Make modulus def
R14711:14711 Integers <> x var
R14774:14776 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R14760:14763 Coq.ZArith.Zdiv <> Zmod syndef
R14767:14773 Integers Make modulus def
R14765:14765 Integers <> x var
R14777:14783 Integers Make modulus def
R14740:14743 Coq.ZArith.Zdiv <> Zmod syndef
R14747:14753 Integers Make modulus def
R14745:14745 Integers <> x var
R14810:14815 Integers Make signed def
R14826:14841 Integers Make unsigned_repr_eq thm
R14826:14841 Integers Make unsigned_repr_eq thm
sec 14988:14996 Make EQ_MODULO
var 15009:15013 Make.EQ_MODULO modul
R15016:15016 Coq.Numbers.BinNums <> Z ind
var 15030:15038 Make.EQ_MODULO modul_pos
R15046:15048 Coq.ZArith.BinInt <> :Z_scope:x_'>'_x not
R15041:15045 Integers <> Make.EQ_MODULO.modul var
def 15064:15068 Make eqmod
R15076:15076 Coq.Numbers.BinNums <> Z ind
R15089:15095 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R15097:15098 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R15100:15102 Coq.Init.Logic <> :type_scope:x_'='_x not
R15099:15099 Integers <> x var
R15112:15114 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R15104:15106 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R15103:15103 Integers <> k var
R15107:15111 Integers <> Make.EQ_MODULO.modul var
R15115:15115 Integers <> y var
prf 15125:15134 Make eqmod_refl
R15147:15151 Integers Make eqmod def
R15155:15155 Integers <> x var
R15153:15153 Integers <> x var
prf 15209:15219 Make eqmod_refl2
R15243:15247 Integers Make eqmod def
R15251:15251 Integers <> y var
R15249:15249 Integers <> x var
R15235:15237 Coq.Init.Logic <> :type_scope:x_'='_x not
R15234:15234 Integers <> x var
R15238:15238 Integers <> y var
R15286:15295 Integers Make eqmod_refl thm
R15286:15295 Integers Make eqmod_refl thm
prf 15310:15318 Make eqmod_sym
R15346:15350 Integers Make eqmod def
R15354:15354 Integers <> x var
R15352:15352 Integers <> y var
R15333:15337 Integers Make eqmod def
R15341:15341 Integers <> y var
R15339:15339 Integers <> x var
R15398:15398 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R15398:15398 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
prf 15430:15440 Make eqmod_trans
R15483:15487 Integers Make eqmod def
R15491:15491 Integers <> z var
R15489:15489 Integers <> x var
R15470:15474 Integers Make eqmod def
R15478:15478 Integers <> z var
R15476:15476 Integers <> y var
R15457:15461 Integers Make eqmod def
R15465:15465 Integers <> y var
R15463:15463 Integers <> x var
R15552:15554 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R15552:15554 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
prf 15596:15609 Make eqmod_small_eq
R15676:15678 Coq.Init.Logic <> :type_scope:x_'='_x not
R15675:15675 Integers <> x var
R15679:15679 Integers <> y var
R15658:15661 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R15663:15665 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R15662:15662 Integers <> y var
R15662:15662 Integers <> y var
R15666:15670 Integers <> Make.EQ_MODULO.modul var
R15640:15643 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R15645:15647 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R15644:15644 Integers <> x var
R15644:15644 Integers <> x var
R15648:15652 Integers <> Make.EQ_MODULO.modul var
R15626:15630 Integers Make eqmod def
R15634:15634 Integers <> y var
R15632:15632 Integers <> x var
R15730:15740 Coqlib <> Zdiv_unique thm
R15730:15740 Coqlib <> Zdiv_unique thm
R15776:15785 Coqlib <> Zdiv_small thm
R15789:15793 Integers <> Make.EQ_MODULO.modul var
R15776:15785 Coqlib <> Zdiv_small thm
R15789:15793 Integers <> Make.EQ_MODULO.modul var
prf 15833:15844 Make eqmod_mod_eq
R15885:15887 Coq.Init.Logic <> :type_scope:x_'='_x not
R15875:15879 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R15874:15874 Integers <> x var
R15880:15884 Integers <> Make.EQ_MODULO.modul var
R15889:15893 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R15888:15888 Integers <> y var
R15894:15898 Integers <> Make.EQ_MODULO.modul var
R15861:15865 Integers Make eqmod def
R15869:15869 Integers <> y var
R15867:15867 Integers <> x var
R15949:15958 Coq.ZArith.BinInt <> Zplus_comm syndef
R15949:15958 Coq.ZArith.BinInt <> Zplus_comm syndef
R15967:15976 Coq.ZArith.Zdiv <> Z_mod_plus thm
R15967:15976 Coq.ZArith.Zdiv <> Z_mod_plus thm
prf 15997:16005 Make eqmod_mod
R16020:16024 Integers Make eqmod def
R16030:16034 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R16029:16029 Integers <> x var
R16035:16039 Integers <> Make.EQ_MODULO.modul var
R16026:16026 Integers <> x var
R16074:16076 Coq.ZArith.BinInt <> :Z_scope:x_'/'_x not
R16077:16081 Integers <> Make.EQ_MODULO.modul var
R16074:16076 Coq.ZArith.BinInt <> :Z_scope:x_'/'_x not
R16077:16081 Integers <> Make.EQ_MODULO.modul var
R16096:16105 Coq.ZArith.BinInt <> Zmult_comm syndef
R16096:16105 Coq.ZArith.BinInt <> Zmult_comm syndef
R16114:16125 Coq.ZArith.Zdiv <> Z_div_mod_eq thm
R16114:16125 Coq.ZArith.Zdiv <> Z_div_mod_eq thm
prf 16146:16154 Make eqmod_add
R16201:16205 Integers Make eqmod def
R16217:16219 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R16216:16216 Integers <> b var
R16220:16220 Integers <> d var
R16209:16211 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R16208:16208 Integers <> a var
R16212:16212 Integers <> c var
R16188:16192 Integers Make eqmod def
R16196:16196 Integers <> d var
R16194:16194 Integers <> c var
R16175:16179 Integers Make eqmod def
R16183:16183 Integers <> b var
R16181:16181 Integers <> a var
R16302:16304 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R16302:16304 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
prf 16328:16336 Make eqmod_neg
R16366:16370 Integers Make eqmod def
R16378:16378 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R16379:16379 Integers <> y var
R16373:16373 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R16374:16374 Integers <> x var
R16353:16357 Integers Make eqmod def
R16361:16361 Integers <> y var
R16359:16359 Integers <> x var
R16424:16424 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R16424:16424 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
prf 16460:16468 Make eqmod_sub
R16515:16519 Integers Make eqmod def
R16531:16533 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R16530:16530 Integers <> b var
R16534:16534 Integers <> d var
R16523:16525 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R16522:16522 Integers <> a var
R16526:16526 Integers <> c var
R16502:16506 Integers Make eqmod def
R16510:16510 Integers <> d var
R16508:16508 Integers <> c var
R16489:16493 Integers Make eqmod def
R16497:16497 Integers <> b var
R16495:16495 Integers <> a var
R16616:16618 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R16616:16618 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
prf 16642:16651 Make eqmod_mult
R16698:16702 Integers Make eqmod def
R16714:16716 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R16713:16713 Integers <> c var
R16717:16717 Integers <> d var
R16706:16708 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R16705:16705 Integers <> a var
R16709:16709 Integers <> b var
R16685:16689 Integers Make eqmod def
R16693:16693 Integers <> d var
R16691:16691 Integers <> b var
R16672:16676 Integers Make eqmod def
R16680:16680 Integers <> c var
R16678:16678 Integers <> a var
R16823:16825 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R16814:16816 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R16806:16808 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R16801:16803 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R16809:16813 Integers <> Make.EQ_MODULO.modul var
R16818:16820 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R16828:16830 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R16823:16825 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R16814:16816 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R16806:16808 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R16801:16803 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R16809:16813 Integers <> Make.EQ_MODULO.modul var
R16818:16820 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R16828:16830 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R16853:16861 Integers Make.EQ_MODULO <> sec
prf 16871:16883 Make eqmod_divides
R16934:16938 Integers Make eqmod def
R16944:16944 Integers <> y var
R16942:16942 Integers <> x var
R16940:16940 Integers <> m var
R16919:16925 Coq.ZArith.Znumtheory <> Zdivide syndef
R16929:16929 Integers <> n var
R16927:16927 Integers <> m var
R16904:16908 Integers Make eqmod def
R16914:16914 Integers <> y var
R16912:16912 Integers <> x var
R16910:16910 Integers <> n var
R17026:17026 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R17026:17026 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R17043:17053 Coq.ZArith.BinInt <> Zmult_assoc syndef
R17043:17053 Coq.ZArith.BinInt <> Zmult_assoc syndef
R17204:17214 Integers Make modulus_pos thm
def 17235:17237 Make eqm
R17242:17246 Integers Make eqmod def
R17248:17254 Integers Make modulus def
prf 17264:17271 Make eqm_refl
R17284:17286 Integers Make eqm def
R17290:17290 Integers <> x var
R17288:17288 Integers <> x var
R17300:17309 Integers Make eqmod_refl thm
R17311:17317 Integers Make modulus def
R17334:17341 Integers Make eqm_refl thm
prf 17357:17365 Make eqm_refl2
R17391:17393 Integers Make eqm def
R17397:17397 Integers <> y var
R17395:17395 Integers <> x var
R17383:17385 Coq.Init.Logic <> :type_scope:x_'='_x not
R17382:17382 Integers <> x var
R17386:17386 Integers <> y var
R17407:17417 Integers Make eqmod_refl2 thm
R17419:17425 Integers Make modulus def
R17442:17450 Integers Make eqm_refl2 thm
prf 17466:17472 Make eqm_sym
R17498:17500 Integers Make eqm def
R17504:17504 Integers <> x var
R17502:17502 Integers <> y var
R17487:17489 Integers Make eqm def
R17493:17493 Integers <> y var
R17491:17491 Integers <> x var
R17514:17522 Integers Make eqmod_sym thm
R17524:17530 Integers Make modulus def
R17547:17553 Integers Make eqm_sym thm
prf 17569:17577 Make eqm_trans
R17616:17618 Integers Make eqm def
R17622:17622 Integers <> z var
R17620:17620 Integers <> x var
R17605:17607 Integers Make eqm def
R17611:17611 Integers <> z var
R17609:17609 Integers <> y var
R17594:17596 Integers Make eqm def
R17600:17600 Integers <> y var
R17598:17598 Integers <> x var
R17632:17642 Integers Make eqmod_trans thm
R17644:17650 Integers Make modulus def
R17667:17675 Integers Make eqm_trans thm
prf 17691:17702 Make eqm_small_eq
R17771:17773 Coq.Init.Logic <> :type_scope:x_'='_x not
R17770:17770 Integers <> x var
R17774:17774 Integers <> y var
R17751:17754 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R17756:17758 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R17755:17755 Integers <> y var
R17755:17755 Integers <> y var
R17759:17765 Integers Make modulus def
R17731:17734 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R17736:17738 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R17735:17735 Integers <> x var
R17735:17735 Integers <> x var
R17739:17745 Integers Make modulus def
R17719:17721 Integers Make eqm def
R17725:17725 Integers <> y var
R17723:17723 Integers <> x var
R17784:17797 Integers Make eqmod_small_eq thm
R17799:17805 Integers Make modulus def
R17822:17833 Integers Make eqm_small_eq thm
prf 17849:17855 Make eqm_add
R17898:17900 Integers Make eqm def
R17912:17914 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R17911:17911 Integers <> b var
R17915:17915 Integers <> d var
R17904:17906 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R17903:17903 Integers <> a var
R17907:17907 Integers <> c var
R17887:17889 Integers Make eqm def
R17893:17893 Integers <> d var
R17891:17891 Integers <> c var
R17876:17878 Integers Make eqm def
R17882:17882 Integers <> b var
R17880:17880 Integers <> a var
R17926:17934 Integers Make eqmod_add thm
R17936:17942 Integers Make modulus def
R17959:17965 Integers Make eqm_add thm
prf 17981:17987 Make eqm_neg
R18015:18017 Integers Make eqm def
R18025:18025 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R18026:18026 Integers <> y var
R18020:18020 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R18021:18021 Integers <> x var
R18004:18006 Integers Make eqm def
R18010:18010 Integers <> y var
R18008:18008 Integers <> x var
R18037:18045 Integers Make eqmod_neg thm
R18047:18053 Integers Make modulus def
R18070:18076 Integers Make eqm_neg thm
prf 18092:18098 Make eqm_sub
R18141:18143 Integers Make eqm def
R18155:18157 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R18154:18154 Integers <> b var
R18158:18158 Integers <> d var
R18147:18149 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R18146:18146 Integers <> a var
R18150:18150 Integers <> c var
R18130:18132 Integers Make eqm def
R18136:18136 Integers <> d var
R18134:18134 Integers <> c var
R18119:18121 Integers Make eqm def
R18125:18125 Integers <> b var
R18123:18123 Integers <> a var
R18169:18177 Integers Make eqmod_sub thm
R18179:18185 Integers Make modulus def
R18202:18208 Integers Make eqm_sub thm
prf 18224:18231 Make eqm_mult
R18274:18276 Integers Make eqm def
R18288:18290 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R18287:18287 Integers <> c var
R18291:18291 Integers <> d var
R18280:18282 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R18279:18279 Integers <> a var
R18283:18283 Integers <> b var
R18263:18265 Integers Make eqm def
R18269:18269 Integers <> d var
R18267:18267 Integers <> b var
R18252:18254 Integers Make eqm def
R18258:18258 Integers <> c var
R18256:18256 Integers <> a var
R18302:18311 Integers Make eqmod_mult thm
R18313:18319 Integers Make modulus def
R18336:18343 Integers Make eqm_mult thm
prf 18420:18431 Make eqm_samerepr
R18463:18465 Coq.Init.Logic <> :type_scope:x_'='_x not
R18457:18460 Integers Make repr def
R18462:18462 Integers <> x var
R18466:18469 Integers Make repr def
R18471:18471 Integers <> y var
R18446:18448 Integers Make eqm def
R18452:18452 Integers <> y var
R18450:18450 Integers <> x var
R18498:18501 Integers Make repr def
R18510:18517 Integers Make mkint_eq thm
R18510:18517 Integers Make mkint_eq thm
R18532:18547 Integers Make Z_mod_modulus_eq thm
R18532:18547 Integers Make Z_mod_modulus_eq thm
R18532:18547 Integers Make Z_mod_modulus_eq thm
R18532:18547 Integers Make Z_mod_modulus_eq thm
R18556:18567 Integers Make eqmod_mod_eq thm
R18556:18567 Integers Make eqmod_mod_eq thm
prf 18607:18623 Make eqm_unsigned_repr
R18638:18640 Integers Make eqm def
R18645:18652 Integers Make unsigned def
R18655:18658 Integers Make repr def
R18660:18660 Integers <> z var
R18642:18642 Integers <> z var
R18681:18683 Integers Make eqm def
R18702:18717 Integers Make unsigned_repr_eq thm
R18702:18717 Integers Make unsigned_repr_eq thm
R18726:18734 Integers Make eqmod_mod thm
R18726:18734 Integers Make eqmod_mod thm
R18771:18787 Integers Make eqm_unsigned_repr thm
prf 18803:18821 Make eqm_unsigned_repr_l
R18849:18851 Integers Make eqm def
R18873:18873 Integers <> b var
R18854:18861 Integers Make unsigned def
R18864:18867 Integers Make repr def
R18869:18869 Integers <> a var
R18838:18840 Integers Make eqm def
R18844:18844 Integers <> b var
R18842:18842 Integers <> a var
R18899:18907 Integers Make eqm_trans thm
R18899:18907 Integers Make eqm_trans thm
R18926:18932 Integers Make eqm_sym thm
R18926:18932 Integers Make eqm_sym thm
R18941:18957 Integers Make eqm_unsigned_repr thm
R18941:18957 Integers Make eqm_unsigned_repr thm
R18984:19002 Integers Make eqm_unsigned_repr_l thm
prf 19018:19036 Make eqm_unsigned_repr_r
R19064:19066 Integers Make eqm def
R19071:19078 Integers Make unsigned def
R19081:19084 Integers Make repr def
R19086:19086 Integers <> b var
R19068:19068 Integers <> a var
R19053:19055 Integers Make eqm def
R19059:19059 Integers <> b var
R19057:19057 Integers <> a var
R19114:19122 Integers Make eqm_trans thm
R19114:19122 Integers Make eqm_trans thm
R19146:19162 Integers Make eqm_unsigned_repr thm
R19146:19162 Integers Make eqm_unsigned_repr thm
R19184:19202 Integers Make eqm_unsigned_repr_r thm
prf 19218:19236 Make eqm_signed_unsigned
R19251:19253 Integers Make eqm def
R19267:19274 Integers Make unsigned def
R19276:19276 Integers <> x var
R19256:19261 Integers Make signed def
R19263:19263 Integers <> x var
R19309:19314 Integers Make signed def
R19327:19334 Integers Make unsigned def
R19327:19334 Integers Make unsigned def
R19348:19350 Coqlib <> zlt def
R19354:19365 Integers Make half_modulus def
R19348:19350 Coqlib <> zlt def
R19354:19365 Integers Make half_modulus def
R19384:19393 Integers Make eqmod_refl thm
R19384:19393 Integers Make eqmod_refl thm
prf 19435:19448 Make unsigned_range
R19464:19467 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R19478:19480 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R19468:19475 Integers Make unsigned def
R19477:19477 Integers <> i var
R19468:19475 Integers Make unsigned def
R19477:19477 Integers <> i var
R19481:19487 Integers Make modulus def
R19543:19556 Integers Make unsigned_range thm
prf 19574:19589 Make unsigned_range_2
R19605:19608 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<='_x not
R19619:19622 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<='_x not
R19609:19616 Integers Make unsigned def
R19618:19618 Integers <> i var
R19609:19616 Integers Make unsigned def
R19618:19618 Integers <> i var
R19623:19634 Integers Make max_unsigned def
R19660:19671 Integers Make max_unsigned def
R19689:19702 Integers Make unsigned_range thm
R19689:19702 Integers Make unsigned_range thm
R19733:19748 Integers Make unsigned_range_2 thm
prf 19766:19777 Make signed_range
R19802:19805 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<='_x not
R19814:19817 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<='_x not
R19792:19801 Integers Make min_signed def
R19806:19811 Integers Make signed def
R19813:19813 Integers <> i var
R19806:19811 Integers Make signed def
R19813:19813 Integers <> i var
R19818:19827 Integers Make max_signed def
R19854:19859 Integers Make signed def
R19877:19890 Integers Make unsigned_range thm
R19877:19890 Integers Make unsigned_range thm
R19906:19913 Integers Make unsigned def
R19906:19913 Integers Make unsigned def
R19935:19937 Coqlib <> zlt def
R19941:19952 Integers Make half_modulus def
R19935:19937 Coqlib <> zlt def
R19941:19952 Integers Make half_modulus def
R19972:19981 Integers Make max_signed def
R19995:20008 Integers Make min_signed_neg thm
R19995:20008 Integers Make min_signed_neg thm
R20027:20036 Integers Make min_signed def
R20039:20048 Integers Make max_signed def
R20061:20080 Integers Make half_modulus_modulus thm
R20061:20080 Integers Make half_modulus_modulus thm
prf 20112:20124 Make repr_unsigned
R20156:20158 Coq.Init.Logic <> :type_scope:x_'='_x not
R20139:20142 Integers Make repr def
R20145:20152 Integers Make unsigned def
R20154:20154 Integers <> i var
R20159:20159 Integers <> i var
R20197:20200 Integers Make repr def
R20209:20216 Integers Make mkint_eq thm
R20209:20216 Integers Make mkint_eq thm
R20229:20244 Integers Make Z_mod_modulus_eq thm
R20229:20244 Integers Make Z_mod_modulus_eq thm
R20253:20262 Coqlib <> Zmod_small thm
R20253:20262 Coqlib <> Zmod_small thm
R20290:20302 Integers Make repr_unsigned thm
prf 20318:20328 Make repr_signed
R20358:20360 Coq.Init.Logic <> :type_scope:x_'='_x not
R20343:20346 Integers Make repr def
R20349:20354 Integers Make signed def
R20356:20356 Integers <> i var
R20361:20361 Integers <> i var
R20395:20398 Integers Make repr def
R20401:20408 Integers Make unsigned def
R20395:20398 Integers Make repr def
R20401:20408 Integers Make unsigned def
R20424:20435 Integers Make eqm_samerepr thm
R20424:20435 Integers Make eqm_samerepr thm
R20444:20462 Integers Make eqm_signed_unsigned thm
R20444:20462 Integers Make eqm_signed_unsigned thm
R20499:20509 Integers Make repr_signed thm
R20526:20529 Integers Make repr def
prf 20539:20549 Make eqm_repr_eq
R20592:20594 Coq.Init.Logic <> :type_scope:x_'='_x not
R20586:20589 Integers Make repr def
R20591:20591 Integers <> x var
R20595:20595 Integers <> y var
R20564:20566 Integers Make eqm def
R20571:20578 Integers Make unsigned def
R20580:20580 Integers <> y var
R20568:20568 Integers <> x var
R20627:20639 Integers Make repr_unsigned thm
R20627:20639 Integers Make repr_unsigned thm
R20651:20662 Integers Make eqm_samerepr thm
R20651:20662 Integers Make eqm_samerepr thm
prf 20685:20697 Make unsigned_repr
R20755:20757 Coq.Init.Logic <> :type_scope:x_'='_x not
R20738:20745 Integers Make unsigned def
R20748:20751 Integers Make repr def
R20753:20753 Integers <> z var
R20758:20758 Integers <> z var
R20713:20716 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<='_x not
R20718:20721 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<='_x not
R20717:20717 Integers <> z var
R20717:20717 Integers <> z var
R20722:20733 Integers Make max_unsigned def
R20786:20801 Integers Make unsigned_repr_eq thm
R20786:20801 Integers Make unsigned_repr_eq thm
R20813:20822 Coqlib <> Zmod_small thm
R20813:20822 Coqlib <> Zmod_small thm
R20832:20843 Integers Make max_unsigned def
R20876:20888 Integers Make unsigned_repr thm
prf 20906:20916 Make signed_repr
R20979:20981 Coq.Init.Logic <> :type_scope:x_'='_x not
R20964:20969 Integers Make signed def
R20972:20975 Integers Make repr def
R20977:20977 Integers <> z var
R20982:20982 Integers <> z var
R20941:20944 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<='_x not
R20946:20949 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<='_x not
R20931:20940 Integers Make min_signed def
R20945:20945 Integers <> z var
R20945:20945 Integers <> z var
R20950:20959 Integers Make max_signed def
R21009:21014 Integers Make signed def
R21027:21029 Coqlib <> zle def
R21027:21029 Coqlib <> zle def
R21048:21055 Integers Make unsigned def
R21058:21061 Integers Make repr def
R21048:21055 Integers Make unsigned def
R21058:21061 Integers Make repr def
R21085:21092 Coqlib <> zlt_true thm
R21085:21092 Coqlib <> zlt_true thm
R21108:21117 Integers Make max_signed def
R21150:21162 Integers Make unsigned_repr thm
R21150:21162 Integers Make unsigned_repr thm
R21176:21194 Integers Make max_signed_unsigned thm
R21176:21194 Integers Make max_signed_unsigned thm
R21220:21222 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R21223:21229 Integers Make modulus def
R21220:21222 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R21223:21229 Integers Make modulus def
R21244:21247 Integers Make repr def
R21258:21261 Integers Make repr def
R21258:21261 Integers Make repr def
R21244:21247 Integers Make repr def
R21279:21286 Integers Make unsigned def
R21289:21292 Integers Make repr def
R21279:21286 Integers Make unsigned def
R21289:21292 Integers Make repr def
R21318:21326 Coqlib <> zlt_false thm
R21318:21326 Coqlib <> zlt_false thm
R21367:21376 Integers Make min_signed def
R21394:21413 Integers Make half_modulus_modulus thm
R21394:21413 Integers Make half_modulus_modulus thm
R21442:21454 Integers Make unsigned_repr thm
R21442:21454 Integers Make unsigned_repr thm
R21470:21481 Integers Make max_unsigned def
R21491:21500 Integers Make min_signed def
R21503:21512 Integers Make max_signed def
R21530:21549 Integers Make half_modulus_modulus thm
R21530:21549 Integers Make half_modulus_modulus thm
R21568:21579 Integers Make eqm_samerepr thm
R21568:21579 Integers Make eqm_samerepr thm
prf 21629:21646 Make signed_eq_unsigned
R21697:21699 Coq.Init.Logic <> :type_scope:x_'='_x not
R21689:21694 Integers Make signed def
R21696:21696 Integers <> x var
R21700:21707 Integers Make unsigned def
R21709:21709 Integers <> x var
R21671:21674 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R21661:21668 Integers Make unsigned def
R21670:21670 Integers <> x var
R21675:21684 Integers Make max_signed def
R21736:21741 Integers Make signed def
R21754:21756 Coqlib <> zlt def
R21771:21782 Integers Make half_modulus def
R21759:21766 Integers Make unsigned def
R21754:21756 Coqlib <> zlt def
R21771:21782 Integers Make half_modulus def
R21759:21766 Integers Make unsigned def
R21801:21810 Integers Make max_signed def
prf 21852:21866 Make signed_positive
R21894:21898 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R21889:21892 Coq.ZArith.BinInt <> :Z_scope:x_'>='_x not
R21881:21886 Integers Make signed def
R21888:21888 Integers <> x var
R21909:21912 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R21899:21906 Integers Make unsigned def
R21908:21908 Integers <> x var
R21913:21922 Integers Make max_signed def
R21949:21954 Integers Make signed def
R21957:21966 Integers Make max_signed def
R21983:21996 Integers Make unsigned_range thm
R22001:22020 Integers Make half_modulus_modulus thm
R22022:22037 Integers Make half_modulus_pos thm
R21983:21996 Integers Make unsigned_range thm
R22001:22020 Integers Make half_modulus_modulus thm
R22022:22037 Integers Make half_modulus_pos thm
R22060:22062 Coqlib <> zlt def
R22077:22088 Integers Make half_modulus def
R22065:22072 Integers Make unsigned def
R22060:22062 Coqlib <> zlt def
R22077:22088 Integers Make half_modulus def
R22065:22072 Integers Make unsigned def
prf 22159:22171 Make unsigned_zero
R22187:22189 Coq.Init.Logic <> :type_scope:x_'='_x not
R22174:22181 Integers Make unsigned def
R22183:22186 Integers Make zero def
R22209:22212 Integers Make zero def
R22223:22238 Integers Make unsigned_repr_eq thm
R22223:22238 Integers Make unsigned_repr_eq thm
R22247:22254 Coq.ZArith.Zdiv <> Zmod_0_l thm
R22247:22254 Coq.ZArith.Zdiv <> Zmod_0_l thm
prf 22271:22282 Make unsigned_one
R22297:22299 Coq.Init.Logic <> :type_scope:x_'='_x not
R22285:22292 Integers Make unsigned def
R22294:22296 Integers Make one def
R22319:22321 Integers Make one def
R22332:22347 Integers Make unsigned_repr_eq thm
R22332:22347 Integers Make unsigned_repr_eq thm
R22356:22365 Coqlib <> Zmod_small thm
R22356:22365 Coqlib <> Zmod_small thm
R22392:22398 Integers Make modulus def
R22409:22416 Integers Make wordsize def
R22424:22424 Coq.Init.Datatypes <> S constr
R22426:22429 Coq.Init.Peano <> pred def
R22431:22438 Integers Make wordsize def
R22424:22424 Coq.Init.Datatypes <> S constr
R22426:22429 Coq.Init.Peano <> pred def
R22431:22438 Integers Make wordsize def
R22409:22416 Integers Make wordsize def
R22454:22468 Coq.ZArith.Zpower <> two_power_nat_S thm
R22454:22468 Coq.ZArith.Zpower <> two_power_nat_S thm
R22483:22499 Coqlib <> two_power_nat_pos thm
R22502:22505 Coq.Init.Peano <> pred def
R22507:22514 Integers Make wordsize def
R22483:22499 Coqlib <> two_power_nat_pos thm
R22502:22505 Coq.Init.Peano <> pred def
R22507:22514 Integers Make wordsize def
R22542:22553 Integers Make wordsize_pos thm
R22542:22553 Integers Make wordsize_pos thm
R22563:22571 Integers Make zwordsize def
prf 22596:22608 Make unsigned_mone
R22624:22626 Coq.Init.Logic <> :type_scope:x_'='_x not
R22611:22618 Integers Make unsigned def
R22620:22623 Integers Make mone def
R22634:22636 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R22627:22633 Integers Make modulus def
R22656:22659 Integers Make mone def
R22670:22685 Integers Make unsigned_repr_eq thm
R22670:22685 Integers Make unsigned_repr_eq thm
R22710:22710 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R22722:22725 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R22718:22720 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R22711:22717 Integers Make modulus def
R22726:22726 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R22729:22732 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R22733:22739 Integers Make modulus def
R22710:22710 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R22722:22725 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R22718:22720 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R22711:22717 Integers Make modulus def
R22726:22726 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R22729:22732 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R22733:22739 Integers Make modulus def
R22753:22767 Coq.ZArith.Zdiv <> Z_mod_plus_full thm
R22753:22767 Coq.ZArith.Zdiv <> Z_mod_plus_full thm
R22776:22785 Coqlib <> Zmod_small thm
R22776:22785 Coqlib <> Zmod_small thm
R22801:22811 Integers Make modulus_pos thm
R22801:22811 Integers Make modulus_pos thm
prf 22842:22852 Make signed_zero
R22866:22868 Coq.Init.Logic <> :type_scope:x_'='_x not
R22855:22860 Integers Make signed def
R22862:22865 Integers Make zero def
R22888:22893 Integers Make signed def
R22904:22916 Integers Make unsigned_zero thm
R22904:22916 Integers Make unsigned_zero thm
R22925:22932 Coqlib <> zlt_true thm
R22925:22932 Coqlib <> zlt_true thm
R22946:22961 Integers Make half_modulus_pos thm
R22946:22961 Integers Make half_modulus_pos thm
prf 22985:22995 Make signed_mone
R23009:23011 Coq.Init.Logic <> :type_scope:x_'='_x not
R22998:23003 Integers Make signed def
R23005:23008 Integers Make mone def
R23032:23037 Integers Make signed def
R23048:23060 Integers Make unsigned_mone thm
R23048:23060 Integers Make unsigned_mone thm
R23073:23081 Coqlib <> zlt_false thm
R23073:23081 Coqlib <> zlt_false thm
R23101:23120 Integers Make half_modulus_modulus thm
R23101:23120 Integers Make half_modulus_modulus thm
R23134:23149 Integers Make half_modulus_pos thm
R23134:23149 Integers Make half_modulus_pos thm
prf 23175:23186 Make one_not_zero
R23192:23195 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R23189:23191 Integers Make one def
R23196:23199 Integers Make zero def
R23231:23234 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R23219:23226 Integers Make unsigned def
R23228:23230 Integers Make one def
R23235:23242 Integers Make unsigned def
R23244:23247 Integers Make zero def
R23231:23234 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R23219:23226 Integers Make unsigned def
R23228:23230 Integers Make one def
R23235:23242 Integers Make unsigned def
R23244:23247 Integers Make zero def
R23262:23273 Integers Make unsigned_one thm
R23284:23296 Integers Make unsigned_zero thm
R23262:23273 Integers Make unsigned_one thm
R23284:23296 Integers Make unsigned_zero thm
prf 23339:23360 Make unsigned_repr_wordsize
R23383:23385 Coq.Init.Logic <> :type_scope:x_'='_x not
R23365:23372 Integers Make unsigned def
R23374:23382 Integers Make iwordsize def
R23386:23394 Integers Make zwordsize def
R23413:23421 Integers Make iwordsize def
R23432:23447 Integers Make unsigned_repr_eq thm
R23432:23447 Integers Make unsigned_repr_eq thm
R23456:23465 Coqlib <> Zmod_small thm
R23456:23465 Coqlib <> Zmod_small thm
R23482:23493 Integers Make wordsize_pos thm
R23495:23515 Integers Make wordsize_max_unsigned thm
R23525:23536 Integers Make max_unsigned def
R23482:23493 Integers Make wordsize_pos thm
R23495:23515 Integers Make wordsize_max_unsigned thm
prf 23594:23599 Make eq_sym
R23622:23624 Coq.Init.Logic <> :type_scope:x_'='_x not
R23616:23617 Integers Make eq def
R23621:23621 Integers <> y var
R23619:23619 Integers <> x var
R23625:23626 Integers Make eq def
R23630:23630 Integers <> x var
R23628:23628 Integers <> y var
R23657:23658 Integers Make eq def
R23667:23669 Coqlib <> zeq def
R23685:23692 Integers Make unsigned def
R23672:23679 Integers Make unsigned def
R23667:23669 Coqlib <> zeq def
R23685:23692 Integers Make unsigned def
R23672:23679 Integers Make unsigned def
R23727:23734 Coqlib <> zeq_true thm
R23727:23734 Coqlib <> zeq_true thm
R23753:23761 Coqlib <> zeq_false thm
R23753:23761 Coqlib <> zeq_false thm
prf 23790:23796 Make eq_spec
R23812:23814 Integers Make int rec
R23821:23822 Integers Make eq def
R23826:23826 Integers <> y var
R23824:23824 Integers <> x var
R23845:23848 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R23844:23844 Integers <> x var
R23849:23849 Integers <> y var
R23834:23836 Coq.Init.Logic <> :type_scope:x_'='_x not
R23833:23833 Integers <> x var
R23837:23837 Integers <> y var
R23876:23877 Integers Make eq def
R23886:23891 Integers Make eq_dec thm
R23886:23891 Integers Make eq_dec thm
R23925:23932 Coqlib <> zeq_true thm
R23925:23932 Coqlib <> zeq_true thm
R23951:23959 Coqlib <> zeq_false thm
R23951:23959 Coqlib <> zeq_false thm
R24030:24037 Integers Make mkint_eq thm
R24030:24037 Integers Make mkint_eq thm
prf 24060:24066 Make eq_true
R24085:24087 Coq.Init.Logic <> :type_scope:x_'='_x not
R24079:24080 Integers Make eq def
R24084:24084 Integers <> x var
R24082:24082 Integers <> x var
R24088:24091 Coq.Init.Datatypes <> true constr
R24123:24129 Integers Make eq_spec thm
R24143:24144 Integers Make eq def
R24123:24129 Integers Make eq_spec thm
R24143:24144 Integers Make eq def
prf 24186:24193 Make eq_false
R24224:24226 Coq.Init.Logic <> :type_scope:x_'='_x not
R24218:24219 Integers Make eq def
R24223:24223 Integers <> y var
R24221:24221 Integers <> x var
R24227:24231 Coq.Init.Datatypes <> false constr
R24209:24212 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R24208:24208 Integers <> x var
R24213:24213 Integers <> y var
R24263:24269 Integers Make eq_spec thm
R24283:24284 Integers Make eq def
R24263:24269 Integers Make eq_spec thm
R24283:24284 Integers Make eq def
prf 24326:24334 Make eq_signed
R24357:24359 Coq.Init.Logic <> :type_scope:x_'='_x not
R24351:24352 Integers Make eq def
R24356:24356 Integers <> y var
R24354:24354 Integers <> x var
R24363:24365 Coqlib <> zeq def
R24379:24384 Integers Make signed def
R24386:24386 Integers <> y var
R24368:24373 Integers Make signed def
R24375:24375 Integers <> x var
R24404:24408 Coq.Init.Datatypes <> false constr
R24394:24397 Coq.Init.Datatypes <> true constr
R24440:24446 Integers Make eq_spec thm
R24437:24438 Integers Make eq def
R24473:24480 Coqlib <> zeq_true thm
R24473:24480 Coqlib <> zeq_true thm
R24502:24504 Coqlib <> zeq def
R24518:24523 Integers Make signed def
R24507:24512 Integers Make signed def
R24502:24504 Coqlib <> zeq def
R24518:24523 Integers Make signed def
R24507:24512 Integers Make signed def
R24558:24568 Integers Make repr_signed thm
R24558:24568 Integers Make repr_signed thm
R24586:24596 Integers Make repr_signed thm
R24586:24596 Integers Make repr_signed thm
prf 24663:24674 Make add_unsigned
R24696:24698 Coq.Init.Logic <> :type_scope:x_'='_x not
R24689:24691 Integers Make add def
R24695:24695 Integers <> y var
R24693:24693 Integers <> x var
R24699:24702 Integers Make repr def
R24715:24717 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R24705:24712 Integers Make unsigned def
R24714:24714 Integers <> x var
R24718:24725 Integers Make unsigned def
R24727:24727 Integers <> y var
prf 24773:24782 Make add_signed
R24804:24806 Coq.Init.Logic <> :type_scope:x_'='_x not
R24797:24799 Integers Make add def
R24803:24803 Integers <> y var
R24801:24801 Integers <> x var
R24807:24810 Integers Make repr def
R24821:24823 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R24813:24818 Integers Make signed def
R24820:24820 Integers <> x var
R24824:24829 Integers Make signed def
R24831:24831 Integers <> y var
R24861:24872 Integers Make add_unsigned thm
R24861:24872 Integers Make add_unsigned thm
R24881:24892 Integers Make eqm_samerepr thm
R24881:24892 Integers Make eqm_samerepr thm
R24903:24909 Integers Make eqm_add thm
R24918:24924 Integers Make eqm_sym thm
R24933:24951 Integers Make eqm_signed_unsigned thm
R24903:24909 Integers Make eqm_add thm
R24918:24924 Integers Make eqm_sym thm
R24918:24924 Integers Make eqm_sym thm
R24933:24951 Integers Make eqm_signed_unsigned thm
R24933:24951 Integers Make eqm_signed_unsigned thm
prf 24968:24977 Make add_commut
R24999:25001 Coq.Init.Logic <> :type_scope:x_'='_x not
R24992:24994 Integers Make add def
R24998:24998 Integers <> y var
R24996:24996 Integers <> x var
R25002:25004 Integers Make add def
R25008:25008 Integers <> x var
R25006:25006 Integers <> y var
R25033:25035 Integers Make add def
prf 25066:25073 Make add_zero
R25096:25098 Coq.Init.Logic <> :type_scope:x_'='_x not
R25086:25088 Integers Make add def
R25092:25095 Integers Make zero def
R25090:25090 Integers <> x var
R25099:25099 Integers <> x var
R25126:25128 Integers Make add def
R25139:25151 Integers Make unsigned_zero thm
R25139:25151 Integers Make unsigned_zero thm
R25164:25172 Coq.ZArith.BinInt <> Zplus_0_r syndef
R25164:25172 Coq.ZArith.BinInt <> Zplus_0_r syndef
R25181:25193 Integers Make repr_unsigned thm
R25181:25193 Integers Make repr_unsigned thm
prf 25210:25219 Make add_zero_l
R25242:25244 Coq.Init.Logic <> :type_scope:x_'='_x not
R25232:25234 Integers Make add def
R25241:25241 Integers <> x var
R25236:25239 Integers Make zero def
R25245:25245 Integers <> x var
R25273:25282 Integers Make add_commut thm
R25273:25282 Integers Make add_commut thm
R25291:25298 Integers Make add_zero thm
R25291:25298 Integers Make add_zero thm
prf 25315:25323 Make add_assoc
R25355:25357 Coq.Init.Logic <> :type_scope:x_'='_x not
R25340:25342 Integers Make add def
R25354:25354 Integers <> z var
R25345:25347 Integers Make add def
R25351:25351 Integers <> y var
R25349:25349 Integers <> x var
R25358:25360 Integers Make add def
R25365:25367 Integers Make add def
R25371:25371 Integers <> z var
R25369:25369 Integers <> y var
R25362:25362 Integers <> x var
R25399:25401 Integers Make add def
R25417:25424 Integers Make unsigned def
R25417:25424 Integers Make unsigned def
R25443:25450 Integers Make unsigned def
R25443:25450 Integers Make unsigned def
R25469:25476 Integers Make unsigned def
R25469:25476 Integers Make unsigned def
R25490:25501 Integers Make eqm_samerepr thm
R25490:25501 Integers Make eqm_samerepr thm
R25529:25529 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R25537:25540 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R25532:25534 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R25513:25521 Integers Make eqm_trans thm
R25529:25529 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R25537:25540 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R25532:25534 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R25513:25521 Integers Make eqm_trans thm
R25577:25587 Coq.ZArith.BinInt <> Zplus_assoc syndef
R25577:25587 Coq.ZArith.BinInt <> Zplus_assoc syndef
prf 25620:25629 Make add_permut
R25661:25663 Coq.Init.Logic <> :type_scope:x_'='_x not
R25646:25648 Integers Make add def
R25653:25655 Integers Make add def
R25659:25659 Integers <> z var
R25657:25657 Integers <> y var
R25650:25650 Integers <> x var
R25664:25666 Integers Make add def
R25671:25673 Integers Make add def
R25677:25677 Integers <> z var
R25675:25675 Integers <> x var
R25668:25668 Integers <> y var
R25707:25716 Integers Make add_commut thm
R25707:25716 Integers Make add_commut thm
R25735:25743 Integers Make add_assoc thm
R25735:25743 Integers Make add_assoc thm
R25752:25761 Integers Make add_commut thm
R25752:25761 Integers Make add_commut thm
prf 25779:25790 Make add_neg_zero
R25816:25818 Coq.Init.Logic <> :type_scope:x_'='_x not
R25803:25805 Integers Make add def
R25810:25812 Integers Make neg def
R25814:25814 Integers <> x var
R25807:25807 Integers <> x var
R25819:25822 Integers Make zero def
R25849:25851 Integers Make add def
R25854:25856 Integers Make neg def
R25859:25862 Integers Make zero def
R25871:25882 Integers Make eqm_samerepr thm
R25871:25882 Integers Make eqm_samerepr thm
R25913:25916 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R25931:25931 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R25903:25910 Integers Make unsigned def
R25917:25919 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R25930:25930 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R25920:25927 Integers Make unsigned def
R25913:25916 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R25931:25931 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R25903:25910 Integers Make unsigned def
R25917:25919 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R25930:25930 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R25920:25927 Integers Make unsigned def
prf 25974:25991 Make unsigned_add_carry
R26028:26030 Coq.Init.Logic <> :type_scope:x_'='_x not
R26010:26017 Integers Make unsigned def
R26020:26022 Integers Make add def
R26026:26026 Integers <> y var
R26024:26024 Integers <> x var
R26054:26056 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R26041:26043 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R26031:26038 Integers Make unsigned def
R26040:26040 Integers <> x var
R26044:26051 Integers Make unsigned def
R26053:26053 Integers <> y var
R26086:26088 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R26057:26064 Integers Make unsigned def
R26067:26075 Integers Make add_carry def
R26081:26084 Integers Make zero def
R26079:26079 Integers <> y var
R26077:26077 Integers <> x var
R26089:26095 Integers Make modulus def
R26124:26126 Integers Make add def
R26129:26137 Integers Make add_carry def
R26148:26160 Integers Make unsigned_zero thm
R26148:26160 Integers Make unsigned_zero thm
R26171:26179 Coq.ZArith.BinInt <> Zplus_0_r syndef
R26171:26179 Coq.ZArith.BinInt <> Zplus_0_r syndef
R26192:26207 Integers Make unsigned_repr_eq thm
R26192:26207 Integers Make unsigned_repr_eq thm
R26224:26237 Integers Make unsigned_range thm
R26243:26256 Integers Make unsigned_range thm
R26224:26237 Integers Make unsigned_range thm
R26243:26256 Integers Make unsigned_range thm
R26283:26285 Coqlib <> zlt def
R26313:26319 Integers Make modulus def
R26298:26300 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R26288:26295 Integers Make unsigned def
R26301:26308 Integers Make unsigned def
R26283:26285 Coqlib <> zlt def
R26313:26319 Integers Make modulus def
R26298:26300 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R26288:26295 Integers Make unsigned def
R26301:26308 Integers Make unsigned def
R26333:26345 Integers Make unsigned_zero thm
R26333:26345 Integers Make unsigned_zero thm
R26354:26364 Coqlib <> Zmod_unique thm
R26354:26364 Coqlib <> Zmod_unique thm
R26399:26410 Integers Make unsigned_one thm
R26399:26410 Integers Make unsigned_one thm
R26419:26429 Coqlib <> Zmod_unique thm
R26419:26429 Coqlib <> Zmod_unique thm
prf 26471:26489 Make unsigned_add_either
R26552:26557 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R26526:26528 Coq.Init.Logic <> :type_scope:x_'='_x not
R26508:26515 Integers Make unsigned def
R26518:26520 Integers Make add def
R26524:26524 Integers <> y var
R26522:26522 Integers <> x var
R26539:26541 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R26529:26536 Integers Make unsigned def
R26538:26538 Integers <> x var
R26542:26549 Integers Make unsigned def
R26551:26551 Integers <> y var
R26576:26578 Coq.Init.Logic <> :type_scope:x_'='_x not
R26558:26565 Integers Make unsigned def
R26568:26570 Integers Make add def
R26574:26574 Integers <> y var
R26572:26572 Integers <> x var
R26602:26604 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R26589:26591 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R26579:26586 Integers Make unsigned def
R26588:26588 Integers <> x var
R26592:26599 Integers Make unsigned def
R26601:26601 Integers <> y var
R26605:26611 Integers Make modulus def
R26639:26656 Integers Make unsigned_add_carry thm
R26639:26656 Integers Make unsigned_add_carry thm
R26666:26674 Integers Make add_carry def
R26688:26700 Integers Make unsigned_zero thm
R26688:26700 Integers Make unsigned_zero thm
R26711:26719 Coq.ZArith.BinInt <> Zplus_0_r syndef
R26711:26719 Coq.ZArith.BinInt <> Zplus_0_r syndef
R26735:26737 Coqlib <> zlt def
R26765:26771 Integers Make modulus def
R26750:26752 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R26740:26747 Integers Make unsigned def
R26753:26760 Integers Make unsigned def
R26735:26737 Coqlib <> zlt def
R26765:26771 Integers Make modulus def
R26750:26752 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R26740:26747 Integers Make unsigned def
R26753:26760 Integers Make unsigned def
R26785:26797 Integers Make unsigned_zero thm
R26785:26797 Integers Make unsigned_zero thm
R26823:26834 Integers Make unsigned_one thm
R26823:26834 Integers Make unsigned_one thm
prf 26899:26906 Make neg_repr
R26931:26933 Coq.Init.Logic <> :type_scope:x_'='_x not
R26919:26921 Integers Make neg def
R26924:26927 Integers Make repr def
R26929:26929 Integers <> z var
R26934:26937 Integers Make repr def
R26940:26940 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R26941:26941 Integers <> z var
R26969:26971 Integers Make neg def
R26980:26991 Integers Make eqm_samerepr thm
R26980:26991 Integers Make eqm_samerepr thm
prf 27024:27031 Make neg_zero
R27042:27044 Coq.Init.Logic <> :type_scope:x_'='_x not
R27034:27036 Integers Make neg def
R27038:27041 Integers Make zero def
R27045:27048 Integers Make zero def
R27067:27069 Integers Make neg def
R27080:27092 Integers Make unsigned_zero thm
R27080:27092 Integers Make unsigned_zero thm
prf 27116:27129 Make neg_involutive
R27153:27155 Coq.Init.Logic <> :type_scope:x_'='_x not
R27142:27144 Integers Make neg def
R27147:27149 Integers Make neg def
R27151:27151 Integers <> x var
R27156:27156 Integers <> x var
R27183:27185 Integers Make neg def
R27196:27206 Integers Make eqm_repr_eq thm
R27196:27206 Integers Make eqm_repr_eq thm
R27216:27224 Integers Make eqm_trans thm
R27216:27224 Integers Make eqm_trans thm
R27233:27239 Integers Make eqm_neg thm
R27233:27239 Integers Make eqm_neg thm
R27250:27268 Integers Make eqm_unsigned_repr_l thm
R27250:27268 Integers Make eqm_unsigned_repr_l thm
R27277:27284 Integers Make eqm_refl thm
R27277:27284 Integers Make eqm_refl thm
R27293:27301 Integers Make eqm_refl2 thm
R27293:27301 Integers Make eqm_refl2 thm
prf 27326:27338 Make neg_add_distr
R27365:27367 Coq.Init.Logic <> :type_scope:x_'='_x not
R27353:27355 Integers Make neg def
R27357:27359 Integers Make add def
R27363:27363 Integers <> y var
R27361:27361 Integers <> x var
R27368:27370 Integers Make add def
R27381:27383 Integers Make neg def
R27385:27385 Integers <> y var
R27373:27375 Integers Make neg def
R27377:27377 Integers <> x var
R27413:27415 Integers Make neg def
R27418:27420 Integers Make add def
R27429:27440 Integers Make eqm_samerepr thm
R27429:27440 Integers Make eqm_samerepr thm
R27467:27469 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R27493:27493 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R27480:27482 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R27470:27477 Integers Make unsigned def
R27483:27490 Integers Make unsigned def
R27451:27459 Integers Make eqm_trans thm
R27467:27469 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R27493:27493 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R27480:27482 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R27470:27477 Integers Make unsigned def
R27483:27490 Integers Make unsigned def
R27451:27459 Integers Make eqm_trans thm
R27526:27528 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R27552:27552 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R27539:27541 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R27529:27536 Integers Make unsigned def
R27542:27549 Integers Make unsigned def
R27566:27566 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R27579:27583 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R27596:27596 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R27567:27568 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R27569:27576 Integers Make unsigned def
R27584:27585 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R27586:27593 Integers Make unsigned def
R27566:27566 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R27579:27583 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R27596:27596 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R27567:27568 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R27569:27576 Integers Make unsigned def
R27584:27585 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R27586:27593 Integers Make unsigned def
R27526:27528 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R27552:27552 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R27539:27541 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R27529:27536 Integers Make unsigned def
R27542:27549 Integers Make unsigned def
prf 27676:27685 Make sub_zero_l
R27708:27710 Coq.Init.Logic <> :type_scope:x_'='_x not
R27698:27700 Integers Make sub def
R27704:27707 Integers Make zero def
R27702:27702 Integers <> x var
R27711:27711 Integers <> x var
R27738:27740 Integers Make sub def
R27751:27763 Integers Make unsigned_zero thm
R27751:27763 Integers Make unsigned_zero thm
R27788:27790 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R27778:27785 Integers Make unsigned def
R27800:27807 Integers Make unsigned def
R27800:27807 Integers Make unsigned def
R27788:27790 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R27778:27785 Integers Make unsigned def
R27828:27840 Integers Make repr_unsigned thm
R27828:27840 Integers Make repr_unsigned thm
prf 27857:27866 Make sub_zero_r
R27889:27891 Coq.Init.Logic <> :type_scope:x_'='_x not
R27879:27881 Integers Make sub def
R27888:27888 Integers <> x var
R27883:27886 Integers Make zero def
R27892:27894 Integers Make neg def
R27896:27896 Integers <> x var
R27923:27925 Integers Make sub def
R27928:27930 Integers Make neg def
R27941:27953 Integers Make unsigned_zero thm
R27941:27953 Integers Make unsigned_zero thm
prf 27976:27986 Make sub_add_opp
R28008:28010 Coq.Init.Logic <> :type_scope:x_'='_x not
R28001:28003 Integers Make sub def
R28007:28007 Integers <> y var
R28005:28005 Integers <> x var
R28011:28013 Integers Make add def
R28018:28020 Integers Make neg def
R28022:28022 Integers <> y var
R28015:28015 Integers <> x var
R28050:28052 Integers Make sub def
R28055:28057 Integers Make add def
R28060:28062 Integers Make neg def
R28071:28082 Integers Make eqm_samerepr thm
R28071:28082 Integers Make eqm_samerepr thm
R28093:28099 Integers Make eqm_add thm
R28093:28099 Integers Make eqm_add thm
prf 28132:28139 Make sub_idem
R28159:28161 Coq.Init.Logic <> :type_scope:x_'='_x not
R28152:28154 Integers Make sub def
R28158:28158 Integers <> x var
R28156:28156 Integers <> x var
R28162:28165 Integers Make zero def
R28192:28194 Integers Make sub def
R28204:28207 Integers Make zero def
prf 28238:28246 Make sub_add_l
R28278:28280 Coq.Init.Logic <> :type_scope:x_'='_x not
R28263:28265 Integers Make sub def
R28277:28277 Integers <> z var
R28268:28270 Integers Make add def
R28274:28274 Integers <> y var
R28272:28272 Integers <> x var
R28281:28283 Integers Make add def
R28295:28295 Integers <> y var
R28286:28288 Integers Make sub def
R28292:28292 Integers <> z var
R28290:28290 Integers <> x var
R28330:28340 Integers Make sub_add_opp thm
R28330:28340 Integers Make sub_add_opp thm
R28330:28340 Integers Make sub_add_opp thm
R28330:28340 Integers Make sub_add_opp thm
R28361:28369 Integers Make add_assoc thm
R28361:28369 Integers Make add_assoc thm
R28361:28369 Integers Make add_assoc thm
R28361:28369 Integers Make add_assoc thm
R28385:28394 Integers Make add_commut thm
R28385:28394 Integers Make add_commut thm
prf 28411:28419 Make sub_add_r
R28451:28453 Coq.Init.Logic <> :type_scope:x_'='_x not
R28436:28438 Integers Make sub def
R28443:28445 Integers Make add def
R28449:28449 Integers <> z var
R28447:28447 Integers <> y var
R28440:28440 Integers <> x var
R28454:28456 Integers Make add def
R28469:28471 Integers Make neg def
R28473:28473 Integers <> y var
R28459:28461 Integers Make sub def
R28465:28465 Integers <> z var
R28463:28463 Integers <> x var
R28509:28519 Integers Make sub_add_opp thm
R28509:28519 Integers Make sub_add_opp thm
R28509:28519 Integers Make sub_add_opp thm
R28509:28519 Integers Make sub_add_opp thm
R28532:28544 Integers Make neg_add_distr thm
R28532:28544 Integers Make neg_add_distr thm
R28555:28564 Integers Make add_permut thm
R28555:28564 Integers Make add_permut thm
R28573:28582 Integers Make add_commut thm
R28573:28582 Integers Make add_commut thm
prf 28599:28609 Make sub_shifted
R28653:28655 Coq.Init.Logic <> :type_scope:x_'='_x not
R28630:28632 Integers Make sub def
R28645:28647 Integers Make add def
R28651:28651 Integers <> z var
R28649:28649 Integers <> y var
R28635:28637 Integers Make add def
R28641:28641 Integers <> z var
R28639:28639 Integers <> x var
R28656:28658 Integers Make sub def
R28662:28662 Integers <> y var
R28660:28660 Integers <> x var
R28690:28700 Integers Make sub_add_opp thm
R28690:28700 Integers Make sub_add_opp thm
R28711:28723 Integers Make neg_add_distr thm
R28711:28723 Integers Make neg_add_distr thm
R28736:28744 Integers Make add_assoc thm
R28736:28744 Integers Make add_assoc thm
R28759:28768 Integers Make add_commut thm
R28779:28781 Integers Make neg def
R28771:28773 Integers Make neg def
R28759:28768 Integers Make add_commut thm
R28779:28781 Integers Make neg def
R28771:28773 Integers Make neg def
R28802:28810 Integers Make add_assoc thm
R28802:28810 Integers Make add_assoc thm
R28824:28835 Integers Make add_neg_zero thm
R28824:28835 Integers Make add_neg_zero thm
R28849:28858 Integers Make add_commut thm
R28860:28863 Integers Make zero def
R28849:28858 Integers Make add_commut thm
R28860:28863 Integers Make zero def
R28875:28882 Integers Make add_zero thm
R28875:28882 Integers Make add_zero thm
R28903:28913 Integers Make sub_add_opp thm
R28903:28913 Integers Make sub_add_opp thm
prf 28930:28939 Make sub_signed
R28963:28965 Coq.Init.Logic <> :type_scope:x_'='_x not
R28956:28958 Integers Make sub def
R28962:28962 Integers <> y var
R28960:28960 Integers <> x var
R28966:28969 Integers Make repr def
R28980:28982 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R28972:28977 Integers Make signed def
R28979:28979 Integers <> x var
R28983:28988 Integers Make signed def
R28990:28990 Integers <> y var
R29018:29020 Integers Make sub def
R29029:29040 Integers Make eqm_samerepr thm
R29029:29040 Integers Make eqm_samerepr thm
R29051:29057 Integers Make eqm_sub thm
R29066:29072 Integers Make eqm_sym thm
R29081:29099 Integers Make eqm_signed_unsigned thm
R29051:29057 Integers Make eqm_sub thm
R29066:29072 Integers Make eqm_sym thm
R29066:29072 Integers Make eqm_sym thm
R29081:29099 Integers Make eqm_signed_unsigned thm
R29081:29099 Integers Make eqm_signed_unsigned thm
prf 29116:29134 Make unsigned_sub_borrow
R29171:29173 Coq.Init.Logic <> :type_scope:x_'='_x not
R29153:29160 Integers Make unsigned def
R29163:29165 Integers Make sub def
R29169:29169 Integers <> y var
R29167:29167 Integers <> x var
R29197:29199 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R29184:29186 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R29174:29181 Integers Make unsigned def
R29183:29183 Integers <> x var
R29187:29194 Integers Make unsigned def
R29196:29196 Integers <> y var
R29230:29232 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R29200:29207 Integers Make unsigned def
R29210:29219 Integers Make sub_borrow def
R29225:29228 Integers Make zero def
R29223:29223 Integers <> y var
R29221:29221 Integers <> x var
R29233:29239 Integers Make modulus def
R29268:29270 Integers Make sub def
R29273:29282 Integers Make sub_borrow def
R29293:29305 Integers Make unsigned_zero thm
R29293:29305 Integers Make unsigned_zero thm
R29316:29325 Coq.ZArith.BinInt <> Zminus_0_r syndef
R29316:29325 Coq.ZArith.BinInt <> Zminus_0_r syndef
R29338:29353 Integers Make unsigned_repr_eq thm
R29338:29353 Integers Make unsigned_repr_eq thm
R29370:29383 Integers Make unsigned_range thm
R29389:29402 Integers Make unsigned_range thm
R29370:29383 Integers Make unsigned_range thm
R29389:29402 Integers Make unsigned_range thm
R29429:29431 Coqlib <> zlt def
R29444:29446 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R29434:29441 Integers Make unsigned def
R29447:29454 Integers Make unsigned def
R29429:29431 Coqlib <> zlt def
R29444:29446 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R29434:29441 Integers Make unsigned def
R29447:29454 Integers Make unsigned def
R29473:29484 Integers Make unsigned_one thm
R29473:29484 Integers Make unsigned_one thm
R29493:29503 Coqlib <> Zmod_unique thm
R29493:29503 Coqlib <> Zmod_unique thm
R29541:29553 Integers Make unsigned_zero thm
R29541:29553 Integers Make unsigned_zero thm
R29562:29572 Coqlib <> Zmod_unique thm
R29562:29572 Coqlib <> Zmod_unique thm
prf 29652:29661 Make mul_commut
R29683:29685 Coq.Init.Logic <> :type_scope:x_'='_x not
R29676:29678 Integers Make mul def
R29682:29682 Integers <> y var
R29680:29680 Integers <> x var
R29686:29688 Integers Make mul def
R29692:29692 Integers <> x var
R29690:29690 Integers <> y var
R29719:29721 Integers Make mul def
prf 29752:29759 Make mul_zero
R29782:29784 Coq.Init.Logic <> :type_scope:x_'='_x not
R29772:29774 Integers Make mul def
R29778:29781 Integers Make zero def
R29776:29776 Integers <> x var
R29785:29788 Integers Make zero def
R29815:29817 Integers Make mul def
R29828:29840 Integers Make unsigned_zero thm
R29828:29840 Integers Make unsigned_zero thm
R29853:29856 Integers Make zero def
prf 29886:29892 Make mul_one
R29914:29916 Coq.Init.Logic <> :type_scope:x_'='_x not
R29905:29907 Integers Make mul def
R29911:29913 Integers Make one def
R29909:29909 Integers <> x var
R29917:29917 Integers <> x var
R29944:29946 Integers Make mul def
R29957:29968 Integers Make unsigned_one thm
R29957:29968 Integers Make unsigned_one thm
R29987:29990 Integers Make repr def
R29993:30000 Integers Make unsigned def
R29987:29990 Integers Make repr def
R29993:30000 Integers Make unsigned def
R30028:30040 Integers Make repr_unsigned thm
R30028:30040 Integers Make repr_unsigned thm
prf 30057:30064 Make mul_mone
R30087:30089 Coq.Init.Logic <> :type_scope:x_'='_x not
R30077:30079 Integers Make mul def
R30083:30086 Integers Make mone def
R30081:30081 Integers <> x var
R30090:30092 Integers Make neg def
R30094:30094 Integers <> x var
R30121:30123 Integers Make mul def
R30126:30128 Integers Make neg def
R30139:30151 Integers Make unsigned_mone thm
R30139:30151 Integers Make unsigned_mone thm
R30163:30174 Integers Make eqm_samerepr thm
R30163:30174 Integers Make eqm_samerepr thm
R30188:30188 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R30189:30196 Integers Make unsigned def
R30208:30210 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R30211:30218 Integers Make unsigned def
R30208:30210 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R30211:30218 Integers Make unsigned def
R30188:30188 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R30189:30196 Integers Make unsigned def
R30254:30257 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R30269:30269 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R30244:30251 Integers Make unsigned def
R30265:30267 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R30258:30264 Integers Make modulus def
R30298:30300 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R30288:30290 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R30278:30285 Integers Make unsigned def
R30291:30297 Integers Make modulus def
R30301:30308 Integers Make unsigned def
R30298:30300 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R30288:30290 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R30278:30285 Integers Make unsigned def
R30291:30297 Integers Make modulus def
R30301:30308 Integers Make unsigned def
R30254:30257 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R30269:30269 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R30244:30251 Integers Make unsigned def
R30265:30267 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R30258:30264 Integers Make modulus def
R30330:30336 Integers Make eqm_sub thm
R30330:30336 Integers Make eqm_sub thm
R30347:30354 Integers Make unsigned def
R30347:30354 Integers Make unsigned def
R30373:30380 Integers Make eqm_refl thm
R30373:30380 Integers Make eqm_refl thm
prf 30397:30405 Make mul_assoc
R30437:30439 Coq.Init.Logic <> :type_scope:x_'='_x not
R30422:30424 Integers Make mul def
R30436:30436 Integers <> z var
R30427:30429 Integers Make mul def
R30433:30433 Integers <> y var
R30431:30431 Integers <> x var
R30440:30442 Integers Make mul def
R30447:30449 Integers Make mul def
R30453:30453 Integers <> z var
R30451:30451 Integers <> y var
R30444:30444 Integers <> x var
R30481:30483 Integers Make mul def
R30499:30506 Integers Make unsigned def
R30499:30506 Integers Make unsigned def
R30525:30532 Integers Make unsigned def
R30525:30532 Integers Make unsigned def
R30551:30558 Integers Make unsigned def
R30551:30558 Integers Make unsigned def
R30572:30583 Integers Make eqm_samerepr thm
R30572:30583 Integers Make eqm_samerepr thm
R30608:30608 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R30616:30619 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R30611:30613 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R30592:30600 Integers Make eqm_trans thm
R30608:30608 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R30616:30619 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R30611:30613 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R30592:30600 Integers Make eqm_trans thm
R30656:30666 Coq.ZArith.BinInt <> Zmult_assoc syndef
R30656:30666 Coq.ZArith.BinInt <> Zmult_assoc syndef
prf 30699:30713 Make mul_add_distr_l
R30747:30749 Coq.Init.Logic <> :type_scope:x_'='_x not
R30732:30734 Integers Make mul def
R30746:30746 Integers <> z var
R30737:30739 Integers Make add def
R30743:30743 Integers <> y var
R30741:30741 Integers <> x var
R30750:30752 Integers Make add def
R30765:30767 Integers Make mul def
R30771:30771 Integers <> z var
R30769:30769 Integers <> y var
R30755:30757 Integers Make mul def
R30761:30761 Integers <> z var
R30759:30759 Integers <> x var
R30799:30801 Integers Make mul def
R30804:30806 Integers Make add def
R30817:30828 Integers Make eqm_samerepr thm
R30817:30828 Integers Make eqm_samerepr thm
R30844:30851 Integers Make unsigned def
R30844:30851 Integers Make unsigned def
R30870:30877 Integers Make unsigned def
R30870:30877 Integers Make unsigned def
R30896:30903 Integers Make unsigned def
R30896:30903 Integers Make unsigned def
R30933:30933 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R30941:30944 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R30936:30938 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R30917:30925 Integers Make eqm_trans thm
R30933:30933 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R30941:30944 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R30936:30938 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R30917:30925 Integers Make eqm_trans thm
R30979:30979 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R30987:30990 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R30982:30984 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R31008:31010 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R31003:31005 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R31013:31015 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R31008:31010 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R31003:31005 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R31013:31015 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R30979:30979 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R30987:30990 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R30982:30984 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
prf 31061:31075 Make mul_add_distr_r
R31109:31111 Coq.Init.Logic <> :type_scope:x_'='_x not
R31094:31096 Integers Make mul def
R31101:31103 Integers Make add def
R31107:31107 Integers <> z var
R31105:31105 Integers <> y var
R31098:31098 Integers <> x var
R31112:31114 Integers Make add def
R31127:31129 Integers Make mul def
R31133:31133 Integers <> z var
R31131:31131 Integers <> x var
R31117:31119 Integers Make mul def
R31123:31123 Integers <> y var
R31121:31121 Integers <> x var
R31162:31171 Integers Make mul_commut thm
R31162:31171 Integers Make mul_commut thm
R31182:31196 Integers Make mul_add_distr_l thm
R31182:31196 Integers Make mul_add_distr_l thm
R31215:31224 Integers Make mul_commut thm
R31215:31224 Integers Make mul_commut thm
R31215:31224 Integers Make mul_commut thm
prf 31242:31256 Make neg_mul_distr_l
R31286:31288 Coq.Init.Logic <> :type_scope:x_'='_x not
R31274:31276 Integers Make neg def
R31278:31280 Integers Make mul def
R31284:31284 Integers <> y var
R31282:31282 Integers <> x var
R31289:31291 Integers Make mul def
R31301:31301 Integers <> y var
R31294:31296 Integers Make neg def
R31298:31298 Integers <> x var
R31328:31330 Integers Make mul def
R31333:31335 Integers Make neg def
R31351:31358 Integers Make unsigned def
R31351:31358 Integers Make unsigned def
R31376:31383 Integers Make unsigned def
R31376:31383 Integers Make unsigned def
R31397:31408 Integers Make eqm_samerepr thm
R31397:31408 Integers Make eqm_samerepr thm
R31433:31435 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R31443:31443 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R31438:31440 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R31417:31425 Integers Make eqm_trans thm
R31433:31435 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R31443:31443 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R31438:31440 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R31417:31425 Integers Make eqm_trans thm
R31476:31478 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R31486:31486 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R31481:31483 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R31495:31495 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R31499:31502 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R31496:31496 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R31495:31495 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R31499:31502 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R31496:31496 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R31476:31478 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R31486:31486 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R31481:31483 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
prf 31548:31562 Make neg_mul_distr_r
R31592:31594 Coq.Init.Logic <> :type_scope:x_'='_x not
R31580:31582 Integers Make neg def
R31584:31586 Integers Make mul def
R31590:31590 Integers <> y var
R31588:31588 Integers <> x var
R31595:31597 Integers Make mul def
R31602:31604 Integers Make neg def
R31606:31606 Integers <> y var
R31599:31599 Integers <> x var
R31636:31645 Integers Make mul_commut thm
R31636:31645 Integers Make mul_commut thm
R31662:31671 Integers Make mul_commut thm
R31676:31678 Integers Make neg def
R31662:31671 Integers Make mul_commut thm
R31676:31678 Integers Make neg def
R31693:31707 Integers Make neg_mul_distr_l thm
R31693:31707 Integers Make neg_mul_distr_l thm
prf 31725:31734 Make mul_signed
R31758:31760 Coq.Init.Logic <> :type_scope:x_'='_x not
R31751:31753 Integers Make mul def
R31757:31757 Integers <> y var
R31755:31755 Integers <> x var
R31761:31764 Integers Make repr def
R31775:31777 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R31767:31772 Integers Make signed def
R31774:31774 Integers <> x var
R31778:31783 Integers Make signed def
R31785:31785 Integers <> y var
R31813:31815 Integers Make mul def
R31824:31835 Integers Make eqm_samerepr thm
R31824:31835 Integers Make eqm_samerepr thm
R31846:31853 Integers Make eqm_mult thm
R31862:31868 Integers Make eqm_sym thm
R31877:31895 Integers Make eqm_signed_unsigned thm
R31846:31853 Integers Make eqm_mult thm
R31862:31868 Integers Make eqm_sym thm
R31862:31868 Integers Make eqm_sym thm
R31877:31895 Integers Make eqm_signed_unsigned thm
R31877:31895 Integers Make eqm_signed_unsigned thm
prf 31956:31971 Make modu_divu_Euclid
R32002:32004 Coq.Init.Logic <> :type_scope:x_'='_x not
R32001:32001 Integers <> x var
R32005:32007 Integers Make add def
R32029:32032 Integers Make modu def
R32036:32036 Integers <> y var
R32034:32034 Integers <> x var
R32010:32012 Integers Make mul def
R32025:32025 Integers <> y var
R32015:32018 Integers Make divu def
R32022:32022 Integers <> y var
R32020:32020 Integers <> x var
R31989:31992 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R31988:31988 Integers <> y var
R31993:31996 Integers Make zero def
R32064:32066 Integers Make add def
R32069:32071 Integers Make mul def
R32074:32077 Integers Make divu def
R32080:32083 Integers Make modu def
R32102:32105 Integers Make repr def
R32108:32115 Integers Make unsigned def
R32102:32105 Integers Make repr def
R32108:32115 Integers Make unsigned def
R32147:32158 Integers Make eqm_samerepr thm
R32147:32158 Integers Make eqm_samerepr thm
R32175:32182 Integers Make unsigned def
R32175:32182 Integers Make unsigned def
R32199:32206 Integers Make unsigned def
R32199:32206 Integers Make unsigned def
R32250:32252 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R32236:32236 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R32244:32247 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R32239:32241 Coq.ZArith.BinInt <> :Z_scope:x_'/'_x not
R32255:32259 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R32220:32228 Integers Make eqm_trans thm
R32250:32252 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R32236:32236 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R32244:32247 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R32239:32241 Coq.ZArith.BinInt <> :Z_scope:x_'/'_x not
R32255:32259 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R32220:32228 Integers Make eqm_trans thm
R32273:32281 Integers Make eqm_refl2 thm
R32273:32281 Integers Make eqm_refl2 thm
R32292:32301 Coq.ZArith.BinInt <> Zmult_comm syndef
R32292:32301 Coq.ZArith.BinInt <> Zmult_comm syndef
R32310:32321 Coq.ZArith.Zdiv <> Z_div_mod_eq thm
R32310:32321 Coq.ZArith.Zdiv <> Z_div_mod_eq thm
R32338:32351 Integers Make unsigned_range thm
R32338:32351 Integers Make unsigned_range thm
R32384:32387 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R32374:32381 Integers Make unsigned def
R32384:32387 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R32374:32381 Integers Make unsigned def
R32427:32439 Integers Make repr_unsigned thm
R32427:32439 Integers Make repr_unsigned thm
R32452:32455 Integers Make zero def
prf 32522:32530 Make modu_divu
R32568:32570 Coq.Init.Logic <> :type_scope:x_'='_x not
R32560:32563 Integers Make modu def
R32567:32567 Integers <> y var
R32565:32565 Integers <> x var
R32571:32573 Integers Make sub def
R32578:32580 Integers Make mul def
R32593:32593 Integers <> y var
R32583:32586 Integers Make divu def
R32590:32590 Integers <> y var
R32588:32588 Integers <> x var
R32575:32575 Integers <> x var
R32548:32551 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R32547:32547 Integers <> y var
R32552:32555 Integers Make zero def
R32655:32657 Coq.Init.Logic <> :type_scope:x_'='_x not
R32654:32654 Integers <> c var
R32658:32660 Integers Make sub def
R32664:32664 Integers <> b var
R32662:32662 Integers <> a var
R32640:32642 Coq.Init.Logic <> :type_scope:x_'='_x not
R32639:32639 Integers <> a var
R32643:32645 Integers Make add def
R32649:32649 Integers <> c var
R32647:32647 Integers <> b var
R32655:32657 Coq.Init.Logic <> :type_scope:x_'='_x not
R32654:32654 Integers <> c var
R32658:32660 Integers Make sub def
R32664:32664 Integers <> b var
R32662:32662 Integers <> a var
R32640:32642 Coq.Init.Logic <> :type_scope:x_'='_x not
R32639:32639 Integers <> a var
R32643:32645 Integers Make add def
R32649:32649 Integers <> c var
R32647:32647 Integers <> b var
R32695:32703 Integers Make sub_add_l thm
R32695:32703 Integers Make sub_add_l thm
R32714:32721 Integers Make sub_idem thm
R32714:32721 Integers Make sub_idem thm
R32734:32743 Integers Make add_commut thm
R32734:32743 Integers Make add_commut thm
R32754:32761 Integers Make add_zero thm
R32754:32761 Integers Make add_zero thm
R32788:32803 Integers Make modu_divu_Euclid thm
R32788:32803 Integers Make modu_divu_Euclid thm
prf 32824:32839 Make mods_divs_Euclid
R32857:32859 Coq.Init.Logic <> :type_scope:x_'='_x not
R32856:32856 Integers <> x var
R32860:32862 Integers Make add def
R32884:32887 Integers Make mods def
R32891:32891 Integers <> y var
R32889:32889 Integers <> x var
R32865:32867 Integers Make mul def
R32880:32880 Integers <> y var
R32870:32873 Integers Make divs def
R32877:32877 Integers <> y var
R32875:32875 Integers <> x var
R32919:32921 Integers Make add def
R32924:32926 Integers Make mul def
R32929:32932 Integers Make divs def
R32935:32938 Integers Make mods def
R32957:32960 Integers Make repr def
R32963:32968 Integers Make signed def
R32957:32960 Integers Make repr def
R32963:32968 Integers Make signed def
R33000:33011 Integers Make eqm_samerepr thm
R33000:33011 Integers Make eqm_samerepr thm
R33028:33033 Integers Make signed def
R33028:33033 Integers Make signed def
R33050:33055 Integers Make signed def
R33050:33055 Integers Make signed def
R33104:33106 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R33085:33085 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R33098:33101 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R33086:33091 Coq.ZArith.BinInt Z quot def
R33107:33111 Coq.ZArith.BinInt Z rem def
R33069:33077 Integers Make eqm_trans thm
R33104:33106 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R33085:33085 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R33098:33101 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R33086:33091 Coq.ZArith.BinInt Z quot def
R33107:33111 Coq.ZArith.BinInt Z rem def
R33069:33077 Integers Make eqm_trans thm
R33129:33137 Integers Make eqm_refl2 thm
R33129:33137 Integers Make eqm_refl2 thm
R33148:33157 Coq.ZArith.BinInt <> Zmult_comm syndef
R33148:33157 Coq.ZArith.BinInt <> Zmult_comm syndef
R33166:33176 Coq.ZArith.BinInt Z quot_rem' thm
R33166:33176 Coq.ZArith.BinInt Z quot_rem' thm
R33187:33193 Integers Make eqm_add thm
R33187:33193 Integers Make eqm_add thm
R33220:33238 Integers Make eqm_unsigned_repr_r thm
R33220:33238 Integers Make eqm_unsigned_repr_r thm
R33247:33254 Integers Make eqm_mult thm
R33247:33254 Integers Make eqm_mult thm
R33294:33312 Integers Make eqm_signed_unsigned thm
R33294:33312 Integers Make eqm_signed_unsigned thm
prf 33330:33338 Make mods_divs
R33363:33365 Coq.Init.Logic <> :type_scope:x_'='_x not
R33355:33358 Integers Make mods def
R33362:33362 Integers <> y var
R33360:33360 Integers <> x var
R33366:33368 Integers Make sub def
R33373:33375 Integers Make mul def
R33388:33388 Integers <> y var
R33378:33381 Integers Make divs def
R33385:33385 Integers <> y var
R33383:33383 Integers <> x var
R33370:33370 Integers <> x var
R33450:33452 Coq.Init.Logic <> :type_scope:x_'='_x not
R33449:33449 Integers <> c var
R33453:33455 Integers Make sub def
R33459:33459 Integers <> b var
R33457:33457 Integers <> a var
R33435:33437 Coq.Init.Logic <> :type_scope:x_'='_x not
R33434:33434 Integers <> a var
R33438:33440 Integers Make add def
R33444:33444 Integers <> c var
R33442:33442 Integers <> b var
R33450:33452 Coq.Init.Logic <> :type_scope:x_'='_x not
R33449:33449 Integers <> c var
R33453:33455 Integers Make sub def
R33459:33459 Integers <> b var
R33457:33457 Integers <> a var
R33435:33437 Coq.Init.Logic <> :type_scope:x_'='_x not
R33434:33434 Integers <> a var
R33438:33440 Integers Make add def
R33444:33444 Integers <> c var
R33442:33442 Integers <> b var
R33490:33498 Integers Make sub_add_l thm
R33490:33498 Integers Make sub_add_l thm
R33509:33516 Integers Make sub_idem thm
R33509:33516 Integers Make sub_idem thm
R33529:33538 Integers Make add_commut thm
R33529:33538 Integers Make add_commut thm
R33549:33556 Integers Make add_zero thm
R33549:33556 Integers Make add_zero thm
R33582:33597 Integers Make mods_divs_Euclid thm
R33582:33597 Integers Make mods_divs_Euclid thm
prf 33614:33621 Make divu_one
R33646:33648 Coq.Init.Logic <> :type_scope:x_'='_x not
R33636:33639 Integers Make divu def
R33643:33645 Integers Make one def
R33641:33641 Integers <> x var
R33649:33649 Integers <> x var
R33668:33671 Integers Make divu def
R33690:33701 Integers Make unsigned_one thm
R33690:33701 Integers Make unsigned_one thm
R33712:33719 Coq.ZArith.Zdiv <> Zdiv_1_r thm
R33712:33719 Coq.ZArith.Zdiv <> Zdiv_1_r thm
R33728:33740 Integers Make repr_unsigned thm
R33728:33740 Integers Make repr_unsigned thm
prf 33757:33764 Make modu_one
R33789:33791 Coq.Init.Logic <> :type_scope:x_'='_x not
R33779:33782 Integers Make modu def
R33786:33788 Integers Make one def
R33784:33784 Integers <> x var
R33792:33795 Integers Make zero def
R33823:33831 Integers Make modu_divu thm
R33823:33831 Integers Make modu_divu thm
R33842:33849 Integers Make divu_one thm
R33842:33849 Integers Make divu_one thm
R33860:33866 Integers Make mul_one thm
R33860:33866 Integers Make mul_one thm
R33875:33882 Integers Make sub_idem thm
R33875:33882 Integers Make sub_idem thm
R33893:33904 Integers Make one_not_zero thm
R33893:33904 Integers Make one_not_zero thm
prf 33921:33929 Make divs_mone
R33955:33957 Coq.Init.Logic <> :type_scope:x_'='_x not
R33944:33947 Integers Make divs def
R33951:33954 Integers Make mone def
R33949:33949 Integers <> x var
R33958:33960 Integers Make neg def
R33962:33962 Integers <> x var
R33981:33984 Integers Make divs def
R33987:33989 Integers Make neg def
R34011:34021 Integers Make signed_mone thm
R34011:34021 Integers Make signed_mone thm
R34036:34041 Coq.ZArith.BinInt Z quot def
R34044:34049 Integers Make signed def
R34066:34068 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R34077:34077 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R34069:34074 Integers Make signed def
R34066:34068 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R34077:34077 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R34069:34074 Integers Make signed def
R34036:34041 Coq.ZArith.BinInt Z quot def
R34044:34049 Integers Make signed def
R34089:34100 Integers Make eqm_samerepr thm
R34089:34100 Integers Make eqm_samerepr thm
R34109:34115 Integers Make eqm_neg thm
R34109:34115 Integers Make eqm_neg thm
R34124:34142 Integers Make eqm_signed_unsigned thm
R34124:34142 Integers Make eqm_signed_unsigned thm
R34159:34164 Integers Make signed def
R34159:34164 Integers Make signed def
R34208:34209 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R34208:34209 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R34224:34234 Coq.ZArith.Zquot <> Zquot_opp_r thm
R34224:34234 Coq.ZArith.Zquot <> Zquot_opp_r thm
R34260:34262 Coq.Init.Logic <> :type_scope:x_'='_x not
R34247:34252 Coq.ZArith.BinInt Z quot def
R34260:34262 Coq.Init.Logic <> :type_scope:x_'='_x not
R34247:34252 Coq.ZArith.BinInt Z quot def
R34287:34303 Coq.ZArith.Zquot <> Zquot_unique_full thm
R34287:34303 Coq.ZArith.Zquot <> Zquot_unique_full thm
R34328:34332 Coq.ZArith.BinInt Z abs def
R34328:34332 Coq.ZArith.BinInt Z abs def
R34360:34362 Coqlib <> zle def
R34360:34362 Coqlib <> zle def
R34408:34410 Integers Make one def
prf 34448:34456 Make mods_mone
R34482:34484 Coq.Init.Logic <> :type_scope:x_'='_x not
R34471:34474 Integers Make mods def
R34478:34481 Integers Make mone def
R34476:34476 Integers <> x var
R34485:34488 Integers Make zero def
R34516:34524 Integers Make mods_divs thm
R34516:34524 Integers Make mods_divs thm
R34535:34543 Integers Make divs_mone thm
R34535:34543 Integers Make divs_mone thm
R34560:34574 Integers Make neg_mul_distr_l thm
R34560:34574 Integers Make neg_mul_distr_l thm
R34585:34592 Integers Make mul_mone thm
R34585:34592 Integers Make mul_mone thm
R34603:34616 Integers Make neg_involutive thm
R34603:34616 Integers Make neg_involutive thm
R34625:34632 Integers Make sub_idem thm
R34625:34632 Integers Make sub_idem thm
prf 34736:34745 Make Ztestbit_0
R34771:34773 Coq.Init.Logic <> :type_scope:x_'='_x not
R34758:34766 Coq.ZArith.BinInt Z testbit def
R34770:34770 Integers <> n var
R34774:34778 Coq.Init.Datatypes <> false constr
R34787:34799 Coq.ZArith.BinInt Z testbit_0_l thm
prf 34810:34819 Make Ztestbit_1
R34845:34847 Coq.Init.Logic <> :type_scope:x_'='_x not
R34832:34840 Coq.ZArith.BinInt Z testbit def
R34844:34844 Integers <> n var
R34848:34850 Coqlib <> zeq def
R34852:34852 Integers <> n var
prf 34912:34922 Make Ztestbit_m1
R34961:34963 Coq.Init.Logic <> :type_scope:x_'='_x not
R34945:34953 Coq.ZArith.BinInt Z testbit def
R34960:34960 Integers <> n var
R34964:34967 Coq.Init.Datatypes <> true constr
R34936:34939 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R34940:34940 Integers <> n var
prf 35026:35038 Make Zshiftin_spec
R35067:35069 Coq.Init.Logic <> :type_scope:x_'='_x not
R35055:35062 Integers Make Zshiftin def
R35066:35066 Integers <> x var
R35064:35064 Integers <> b var
R35075:35078 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R35097:35097 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R35071:35073 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R35074:35074 Integers <> x var
R35082:35082 Integers <> b var
R35116:35123 Integers Make Zshiftin def
R35158:35175 Coq.ZArith.BinInt Z succ_double_spec thm
R35158:35175 Coq.ZArith.BinInt Z succ_double_spec thm
R35198:35210 Coq.ZArith.BinInt Z double_spec thm
R35198:35210 Coq.ZArith.BinInt Z double_spec thm
prf 35233:35244 Make Zshiftin_inj
R35313:35316 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R35308:35310 Coq.Init.Logic <> :type_scope:x_'='_x not
R35306:35307 Integers <> b1 var
R35311:35312 Integers <> b2 var
R35319:35321 Coq.Init.Logic <> :type_scope:x_'='_x not
R35317:35318 Integers <> x1 var
R35322:35323 Integers <> x2 var
R35285:35287 Coq.Init.Logic <> :type_scope:x_'='_x not
R35271:35278 Integers Make Zshiftin def
R35283:35284 Integers <> x1 var
R35280:35281 Integers <> b1 var
R35288:35295 Integers Make Zshiftin def
R35300:35301 Integers <> x2 var
R35297:35298 Integers <> b2 var
R35352:35364 Integers Make Zshiftin_spec thm
R35352:35364 Integers Make Zshiftin_spec thm
R35352:35364 Integers Make Zshiftin_spec thm
R35352:35364 Integers Make Zshiftin_spec thm
prf 35504:35510 Make Zdecomp
R35526:35528 Coq.Init.Logic <> :type_scope:x_'='_x not
R35525:35525 Integers <> x var
R35529:35536 Integers Make Zshiftin def
R35549:35554 Coq.ZArith.BinInt Z div2 def
R35556:35556 Integers <> x var
R35539:35543 Coq.ZArith.BinInt Z odd def
R35545:35545 Integers <> x var
R35666:35685 Coq.PArith.BinPos Pos pred_double_succ thm
R35666:35685 Coq.PArith.BinPos Pos pred_double_succ thm
prf 35707:35722 Make Ztestbit_shiftin
R35781:35783 Coq.Init.Logic <> :type_scope:x_'='_x not
R35755:35763 Coq.ZArith.BinInt Z testbit def
R35780:35780 Integers <> n var
R35766:35773 Integers Make Zshiftin def
R35777:35777 Integers <> x var
R35775:35775 Integers <> b var
R35787:35789 Coqlib <> zeq def
R35791:35791 Integers <> n var
R35807:35815 Coq.ZArith.BinInt Z testbit def
R35820:35825 Coq.ZArith.BinInt Z pred def
R35827:35827 Integers <> n var
R35817:35817 Integers <> x var
R35800:35800 Integers <> b var
R35744:35747 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R35748:35748 Integers <> n var
R35856:35868 Integers Make Zshiftin_spec thm
R35856:35868 Integers Make Zshiftin_spec thm
R35881:35883 Coqlib <> zeq def
R35881:35883 Coqlib <> zeq def
R35928:35942 Coq.ZArith.BinInt Z testbit_odd_0 thm
R35928:35942 Coq.ZArith.BinInt Z testbit_odd_0 thm
R35959:35967 Coq.ZArith.BinInt <> Zplus_0_r syndef
R35959:35967 Coq.ZArith.BinInt <> Zplus_0_r syndef
R35976:35991 Coq.ZArith.BinInt Z testbit_even_0 thm
R35976:35991 Coq.ZArith.BinInt Z testbit_even_0 thm
R36007:36010 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R36011:36016 Coq.ZArith.BinInt Z pred def
R36007:36010 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R36011:36016 Coq.ZArith.BinInt Z pred def
R36046:36051 Coq.ZArith.BinInt Z pred def
R36046:36051 Coq.ZArith.BinInt Z pred def
R36082:36087 Coq.ZArith.BinInt Z succ def
R36082:36087 Coq.ZArith.BinInt Z succ def
R36144:36161 Coq.ZArith.BinInt Z testbit_odd_succ thm
R36144:36161 Coq.ZArith.BinInt Z testbit_odd_succ thm
R36184:36192 Coq.ZArith.BinInt <> Zplus_0_r syndef
R36184:36192 Coq.ZArith.BinInt <> Zplus_0_r syndef
R36201:36219 Coq.ZArith.BinInt Z testbit_even_succ thm
R36201:36219 Coq.ZArith.BinInt Z testbit_even_succ thm
prf 36241:36261 Make Ztestbit_shiftin_base
R36304:36306 Coq.Init.Logic <> :type_scope:x_'='_x not
R36278:36286 Coq.ZArith.BinInt Z testbit def
R36289:36296 Integers Make Zshiftin def
R36300:36300 Integers <> x var
R36298:36298 Integers <> b var
R36307:36307 Integers <> b var
R36335:36350 Integers Make Ztestbit_shiftin thm
R36335:36350 Integers Make Ztestbit_shiftin thm
R36359:36366 Coqlib <> zeq_true thm
R36359:36366 Coqlib <> zeq_true thm
prf 36389:36409 Make Ztestbit_shiftin_succ
R36473:36475 Coq.Init.Logic <> :type_scope:x_'='_x not
R36438:36446 Coq.ZArith.BinInt Z testbit def
R36464:36469 Coq.ZArith.BinInt Z succ def
R36471:36471 Integers <> n var
R36449:36456 Integers Make Zshiftin def
R36460:36460 Integers <> x var
R36458:36458 Integers <> b var
R36476:36484 Coq.ZArith.BinInt Z testbit def
R36488:36488 Integers <> n var
R36486:36486 Integers <> x var
R36429:36432 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R36433:36433 Integers <> n var
R36516:36531 Integers Make Ztestbit_shiftin thm
R36516:36531 Integers Make Ztestbit_shiftin thm
R36542:36550 Coqlib <> zeq_false thm
R36542:36550 Coqlib <> zeq_false thm
R36561:36571 Coq.ZArith.BinInt Z pred_succ thm
R36561:36571 Coq.ZArith.BinInt Z pred_succ thm
prf 36610:36620 Make Ztestbit_eq
R36662:36664 Coq.Init.Logic <> :type_scope:x_'='_x not
R36649:36657 Coq.ZArith.BinInt Z testbit def
R36661:36661 Integers <> n var
R36659:36659 Integers <> x var
R36668:36670 Coqlib <> zeq def
R36672:36672 Integers <> n var
R36694:36702 Coq.ZArith.BinInt Z testbit def
R36716:36721 Coq.ZArith.BinInt Z pred def
R36723:36723 Integers <> n var
R36705:36710 Coq.ZArith.BinInt Z div2 def
R36712:36712 Integers <> x var
R36681:36685 Coq.ZArith.BinInt Z odd def
R36687:36687 Integers <> x var
R36638:36641 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R36642:36642 Integers <> n var
R36753:36759 Integers Make Zdecomp thm
R36753:36759 Integers Make Zdecomp thm
R36776:36791 Integers Make Ztestbit_shiftin thm
R36776:36791 Integers Make Ztestbit_shiftin thm
prf 36814:36826 Make Ztestbit_base
R36854:36856 Coq.Init.Logic <> :type_scope:x_'='_x not
R36841:36849 Coq.ZArith.BinInt Z testbit def
R36851:36851 Integers <> x var
R36857:36861 Coq.ZArith.BinInt Z odd def
R36863:36863 Integers <> x var
R36891:36901 Integers Make Ztestbit_eq thm
R36891:36901 Integers Make Ztestbit_eq thm
R36910:36917 Coqlib <> zeq_true thm
R36910:36917 Coqlib <> zeq_true thm
prf 36941:36953 Make Ztestbit_succ
R37002:37004 Coq.Init.Logic <> :type_scope:x_'='_x not
R36980:36988 Coq.ZArith.BinInt Z testbit def
R36993:36998 Coq.ZArith.BinInt Z succ def
R37000:37000 Integers <> n var
R36990:36990 Integers <> x var
R37005:37013 Coq.ZArith.BinInt Z testbit def
R37026:37026 Integers <> n var
R37016:37021 Coq.ZArith.BinInt Z div2 def
R37023:37023 Integers <> x var
R36971:36974 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R36975:36975 Integers <> n var
R37054:37064 Integers Make Ztestbit_eq thm
R37054:37064 Integers Make Ztestbit_eq thm
R37075:37083 Coqlib <> zeq_false thm
R37075:37083 Coqlib <> zeq_false thm
R37094:37104 Coq.ZArith.BinInt Z pred_succ thm
R37094:37104 Coq.ZArith.BinInt Z pred_succ thm
prf 37142:37156 Make eqmod_same_bits
R37247:37251 Integers Make eqmod def
R37273:37273 Integers <> y var
R37271:37271 Integers <> x var
R37254:37266 Coq.ZArith.Zpower <> two_power_nat def
R37268:37268 Integers <> n var
R37224:37226 Coq.Init.Logic <> :type_scope:x_'='_x not
R37211:37219 Coq.ZArith.BinInt Z testbit def
R37223:37223 Integers <> i var
R37221:37221 Integers <> x var
R37227:37235 Coq.ZArith.BinInt Z testbit def
R37239:37239 Integers <> i var
R37237:37237 Integers <> y var
R37189:37192 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R37194:37196 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R37193:37193 Integers <> i var
R37193:37193 Integers <> i var
R37197:37204 Coq.ZArith.BinInt Z of_nat def
R37206:37206 Integers <> n var
R37318:37330 Coq.ZArith.Zpower <> two_power_nat def
R37318:37330 Coq.ZArith.Zpower <> two_power_nat def
R37352:37352 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R37352:37352 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R37375:37389 Coq.ZArith.Zpower <> two_power_nat_S thm
R37375:37389 Coq.ZArith.Zpower <> two_power_nat_S thm
R37405:37409 Integers Make eqmod def
R37441:37446 Coq.ZArith.BinInt Z div2 def
R37430:37435 Coq.ZArith.BinInt Z div2 def
R37412:37424 Coq.ZArith.Zpower <> two_power_nat def
R37405:37409 Integers Make eqmod def
R37441:37446 Coq.ZArith.BinInt Z div2 def
R37430:37435 Coq.ZArith.BinInt Z div2 def
R37412:37424 Coq.ZArith.Zpower <> two_power_nat def
R37490:37502 Integers Make Ztestbit_succ thm
R37490:37502 Integers Make Ztestbit_succ thm
R37490:37502 Integers Make Ztestbit_succ thm
R37490:37502 Integers Make Ztestbit_succ thm
R37522:37526 Coq.ZArith.Znat <> inj_S syndef
R37522:37526 Coq.ZArith.Znat <> inj_S syndef
R37604:37610 Integers Make Zdecomp thm
R37604:37610 Integers Make Zdecomp thm
R37625:37631 Integers Make Zdecomp thm
R37625:37631 Integers Make Zdecomp thm
R37649:37653 Coq.ZArith.BinInt Z odd def
R37664:37668 Coq.ZArith.BinInt Z odd def
R37664:37668 Coq.ZArith.BinInt Z odd def
R37649:37653 Coq.ZArith.BinInt Z odd def
R37697:37709 Integers Make Zshiftin_spec thm
R37697:37709 Integers Make Zshiftin_spec thm
R37697:37709 Integers Make Zshiftin_spec thm
R37697:37709 Integers Make Zshiftin_spec thm
R37744:37748 Coq.ZArith.Znat <> inj_S syndef
R37744:37748 Coq.ZArith.Znat <> inj_S syndef
R37769:37781 Integers Make Ztestbit_base thm
R37769:37781 Integers Make Ztestbit_base thm
R37769:37781 Integers Make Ztestbit_base thm
R37769:37781 Integers Make Ztestbit_base thm
prf 37802:37814 Make eqm_same_bits
R37902:37904 Integers Make eqm def
R37908:37908 Integers <> y var
R37906:37906 Integers <> x var
R37879:37881 Coq.Init.Logic <> :type_scope:x_'='_x not
R37866:37874 Coq.ZArith.BinInt Z testbit def
R37878:37878 Integers <> i var
R37876:37876 Integers <> x var
R37882:37890 Coq.ZArith.BinInt Z testbit def
R37894:37894 Integers <> i var
R37892:37892 Integers <> y var
R37845:37848 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R37850:37852 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R37849:37849 Integers <> i var
R37849:37849 Integers <> i var
R37853:37861 Integers Make zwordsize def
R37918:37932 Integers Make eqmod_same_bits thm
R37934:37941 Integers Make wordsize def
prf 37952:37966 Make same_bits_eqmod
R38058:38060 Coq.Init.Logic <> :type_scope:x_'='_x not
R38045:38053 Coq.ZArith.BinInt Z testbit def
R38057:38057 Integers <> i var
R38055:38055 Integers <> x var
R38061:38069 Coq.ZArith.BinInt Z testbit def
R38073:38073 Integers <> i var
R38071:38071 Integers <> y var
R38021:38024 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R38026:38028 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R38025:38025 Integers <> i var
R38025:38025 Integers <> i var
R38029:38036 Coq.ZArith.BinInt Z of_nat def
R38038:38038 Integers <> n var
R37989:37993 Integers Make eqmod def
R38015:38015 Integers <> y var
R38013:38013 Integers <> x var
R37996:38008 Coq.ZArith.Zpower <> two_power_nat def
R38010:38010 Integers <> n var
R38155:38159 Coq.ZArith.Znat <> inj_S syndef
R38155:38159 Coq.ZArith.Znat <> inj_S syndef
R38176:38190 Coq.ZArith.Zpower <> two_power_nat_S thm
R38176:38190 Coq.ZArith.Zpower <> two_power_nat_S thm
R38213:38223 Integers Make Ztestbit_eq thm
R38213:38223 Integers Make Ztestbit_eq thm
R38213:38223 Integers Make Ztestbit_eq thm
R38213:38223 Integers Make Ztestbit_eq thm
R0:-1 Integers <> y var
R0:-1 Integers <> y var
R0:-1 Integers <> y var
R38313:38332 Coq.Init.Logic <> :type_scope:x_'='_x not
R38284:38291 Integers Make Zshiftin def
R38304:38309 Coq.ZArith.BinInt Z div2 def
R38294:38298 Coq.ZArith.BinInt Z odd def
R38333:38340 Integers Make Zshiftin def
R38372:38374 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R38354:38356 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R38357:38369 Coq.ZArith.Zpower <> two_power_nat def
R38375:38380 Coq.ZArith.BinInt Z div2 def
R38343:38347 Coq.ZArith.BinInt Z odd def
R38313:38332 Coq.Init.Logic <> :type_scope:x_'='_x not
R38284:38291 Integers Make Zshiftin def
R38304:38309 Coq.ZArith.BinInt Z div2 def
R38294:38298 Coq.ZArith.BinInt Z odd def
R38333:38340 Integers Make Zshiftin def
R38372:38374 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R38354:38356 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R38357:38369 Coq.ZArith.Zpower <> two_power_nat def
R38375:38380 Coq.ZArith.BinInt Z div2 def
R38343:38347 Coq.ZArith.BinInt Z odd def
R38408:38414 Integers Make Zdecomp thm
R38408:38414 Integers Make Zdecomp thm
R38435:38441 Integers Make Zdecomp thm
R38435:38441 Integers Make Zdecomp thm
R38480:38492 Integers Make Zshiftin_spec thm
R38480:38492 Integers Make Zshiftin_spec thm
R38480:38492 Integers Make Zshiftin_spec thm
R38480:38492 Integers Make Zshiftin_spec thm
R38520:38531 Integers Make Zshiftin_inj thm
R38569:38571 Coqlib <> zeq def
R38569:38571 Coqlib <> zeq def
prf 38643:38655 Make same_bits_eqm
R38726:38728 Coq.Init.Logic <> :type_scope:x_'='_x not
R38713:38721 Coq.ZArith.BinInt Z testbit def
R38725:38725 Integers <> i var
R38723:38723 Integers <> x var
R38729:38737 Coq.ZArith.BinInt Z testbit def
R38741:38741 Integers <> i var
R38739:38739 Integers <> y var
R38690:38693 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R38695:38697 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R38694:38694 Integers <> i var
R38694:38694 Integers <> i var
R38698:38706 Integers Make zwordsize def
R38676:38678 Integers Make eqm def
R38682:38682 Integers <> y var
R38680:38680 Integers <> x var
R38751:38765 Integers Make same_bits_eqmod thm
R38767:38774 Integers Make wordsize def
prf 38786:38807 Make two_power_nat_infinity
R38832:38838 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R38840:38841 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R38843:38845 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x not
R38842:38842 Integers <> x var
R38846:38858 Coq.ZArith.Zpower <> two_power_nat def
R38860:38860 Integers <> n var
R38823:38826 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R38827:38827 Integers <> x var
R38906:38916 Coq.ZArith.Wf_Z <> natlike_ind thm
R38906:38916 Coq.ZArith.Wf_Z <> natlike_ind thm
R38934:38934 Coq.Init.Datatypes <> O constr
R38934:38934 Coq.Init.Datatypes <> O constr
R38993:38993 Coq.Init.Datatypes <> S constr
R38993:38993 Coq.Init.Datatypes <> S constr
R39007:39021 Coq.ZArith.Zpower <> two_power_nat_S thm
R39007:39021 Coq.ZArith.Zpower <> two_power_nat_S thm
R39039:39055 Coqlib <> two_power_nat_pos thm
R39039:39055 Coqlib <> two_power_nat_pos thm
prf 39081:39095 Make equal_same_bits
R39172:39174 Coq.Init.Logic <> :type_scope:x_'='_x not
R39171:39171 Integers <> x var
R39175:39175 Integers <> y var
R39148:39150 Coq.Init.Logic <> :type_scope:x_'='_x not
R39135:39143 Coq.ZArith.BinInt Z testbit def
R39147:39147 Integers <> i var
R39145:39145 Integers <> x var
R39151:39159 Coq.ZArith.BinInt Z testbit def
R39163:39163 Integers <> i var
R39161:39161 Integers <> y var
R39126:39129 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R39130:39130 Integers <> i var
R39211:39213 Coqlib <> zlt def
R39236:39238 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R39225:39227 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R39211:39213 Coqlib <> zlt def
R39236:39238 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R39225:39227 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R39254:39257 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R39254:39257 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R39286:39288 Coqlib <> zlt def
R39286:39288 Coqlib <> zlt def
R39314:39335 Integers Make two_power_nat_infinity thm
R39314:39335 Integers Make two_power_nat_infinity thm
R39373:39377 Integers Make eqmod def
R39380:39392 Coq.ZArith.Zpower <> two_power_nat def
R39373:39377 Integers Make eqmod def
R39380:39392 Coq.ZArith.Zpower <> two_power_nat def
R39413:39427 Integers Make eqmod_same_bits thm
R39413:39427 Integers Make eqmod_same_bits thm
R0:-1 Integers <> y var
R39465:39469 Integers Make eqmod def
R39472:39484 Coq.ZArith.Zpower <> two_power_nat def
R39465:39469 Integers Make eqmod def
R39472:39484 Coq.ZArith.Zpower <> two_power_nat def
R39519:39521 Coqlib <> zlt def
R39519:39521 Coqlib <> zlt def
R39551:39553 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R39551:39553 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R39573:39581 Integers Make eqmod_sub thm
R39573:39581 Integers Make eqmod_sub thm
R39590:39599 Integers Make eqmod_refl thm
R39590:39599 Integers Make eqmod_refl thm
R39629:39631 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R39629:39631 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R39651:39659 Integers Make eqmod_sub thm
R39651:39659 Integers Make eqmod_sub thm
R39668:39677 Integers Make eqmod_refl thm
R39668:39677 Integers Make eqmod_refl thm
R39686:39694 Integers Make eqmod_sym thm
R39686:39694 Integers Make eqmod_sym thm
R39714:39716 Coq.Init.Logic <> :type_scope:x_'='_x not
R39714:39716 Coq.Init.Logic <> :type_scope:x_'='_x not
R39752:39764 Coq.ZArith.Zpower <> two_power_nat def
R39731:39744 Integers Make eqmod_small_eq thm
R39752:39764 Coq.ZArith.Zpower <> two_power_nat def
R39731:39744 Integers Make eqmod_small_eq thm
R39795:39811 Coqlib <> two_power_nat_pos thm
R39795:39811 Coqlib <> two_power_nat_pos thm
R39852:39854 Coqlib <> zlt def
R39852:39854 Coqlib <> zlt def
prf 39881:39896 Make Z_one_complement
R39951:39953 Coq.Init.Logic <> :type_scope:x_'='_x not
R39933:39941 Coq.ZArith.BinInt Z testbit def
R39950:39950 Integers <> i var
R39946:39946 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R39944:39944 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R39945:39945 Integers <> x var
R39954:39957 Coq.Init.Datatypes <> negb def
R39960:39968 Coq.ZArith.BinInt Z testbit def
R39972:39972 Integers <> i var
R39970:39970 Integers <> x var
R39912:39915 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R39916:39916 Integers <> i var
R40019:40027 Coq.ZArith.Wf_Z <> Zlt_0_ind thm
R40019:40027 Coq.ZArith.Wf_Z <> Zlt_0_ind thm
R40071:40077 Integers Make Zdecomp thm
R40071:40077 Integers Make Zdecomp thm
R40093:40098 Coq.ZArith.BinInt Z div2 def
R40093:40098 Coq.ZArith.BinInt Z div2 def
R40137:40139 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R40115:40116 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R40117:40124 Integers Make Zshiftin def
R40127:40131 Coq.ZArith.BinInt Z odd def
R40154:40161 Integers Make Zshiftin def
R40184:40186 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R40181:40182 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R40164:40167 Coq.Init.Datatypes <> negb def
R40170:40174 Coq.ZArith.BinInt Z odd def
R40154:40161 Integers Make Zshiftin def
R40184:40186 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R40181:40182 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R40164:40167 Coq.Init.Datatypes <> negb def
R40170:40174 Coq.ZArith.BinInt Z odd def
R40137:40139 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R40115:40116 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R40117:40124 Integers Make Zshiftin def
R40127:40131 Coq.ZArith.BinInt Z odd def
R40203:40218 Integers Make Ztestbit_shiftin thm
R40203:40218 Integers Make Ztestbit_shiftin thm
R40203:40218 Integers Make Ztestbit_shiftin thm
R40203:40218 Integers Make Ztestbit_shiftin thm
R40240:40242 Coqlib <> zeq def
R40240:40242 Coqlib <> zeq def
R40286:40298 Integers Make Zshiftin_spec thm
R40286:40298 Integers Make Zshiftin_spec thm
R40286:40298 Integers Make Zshiftin_spec thm
R40286:40298 Integers Make Zshiftin_spec thm
R40311:40315 Coq.ZArith.BinInt Z odd def
R40327:40330 Coq.Init.Datatypes <> negb def
R40311:40315 Coq.ZArith.BinInt Z odd def
R40327:40330 Coq.Init.Datatypes <> negb def
R40327:40330 Coq.Init.Datatypes <> negb def
prf 40351:40364 Make Ztestbit_above
R40449:40451 Coq.Init.Logic <> :type_scope:x_'='_x not
R40436:40444 Coq.ZArith.BinInt Z testbit def
R40448:40448 Integers <> i var
R40446:40446 Integers <> x var
R40452:40456 Coq.Init.Datatypes <> false constr
R40416:40419 Coq.ZArith.BinInt <> :Z_scope:x_'>='_x not
R40415:40415 Integers <> i var
R40420:40427 Coq.ZArith.BinInt Z of_nat def
R40429:40429 Integers <> n var
R40386:40389 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R40391:40393 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R40390:40390 Integers <> x var
R40390:40390 Integers <> x var
R40394:40406 Coq.ZArith.Zpower <> two_power_nat def
R40408:40408 Integers <> n var
R40502:40514 Coq.ZArith.Zpower <> two_power_nat def
R40502:40514 Coq.ZArith.Zpower <> two_power_nat def
R40575:40587 Coq.ZArith.BinInt Z testbit_0_l thm
R40575:40587 Coq.ZArith.BinInt Z testbit_0_l thm
R40602:40606 Coq.ZArith.Znat <> inj_S syndef
R40602:40606 Coq.ZArith.Znat <> inj_S syndef
R40623:40633 Integers Make Ztestbit_eq thm
R40623:40633 Integers Make Ztestbit_eq thm
R40644:40652 Coqlib <> zeq_false thm
R40644:40652 Coqlib <> zeq_false thm
R40678:40692 Coq.ZArith.Zpower <> two_power_nat_S thm
R40678:40692 Coq.ZArith.Zpower <> two_power_nat_S thm
R40709:40715 Integers Make Zdecomp thm
R40709:40715 Integers Make Zdecomp thm
R40739:40751 Integers Make Zshiftin_spec thm
R40739:40751 Integers Make Zshiftin_spec thm
R40769:40773 Coq.ZArith.BinInt Z odd def
R40769:40773 Coq.ZArith.BinInt Z odd def
prf 40825:40842 Make Ztestbit_above_neg
R40928:40930 Coq.Init.Logic <> :type_scope:x_'='_x not
R40915:40923 Coq.ZArith.BinInt Z testbit def
R40927:40927 Integers <> i var
R40925:40925 Integers <> x var
R40931:40934 Coq.Init.Datatypes <> true constr
R40895:40898 Coq.ZArith.BinInt <> :Z_scope:x_'>='_x not
R40894:40894 Integers <> i var
R40899:40906 Coq.ZArith.BinInt Z of_nat def
R40908:40908 Integers <> n var
R40879:40882 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R40884:40886 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R40863:40863 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R40864:40876 Coq.ZArith.Zpower <> two_power_nat def
R40878:40878 Integers <> n var
R40883:40883 Integers <> x var
R40883:40883 Integers <> x var
R40966:40966 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R40964:40964 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R40966:40966 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R40964:40964 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R40994:40996 Coq.Init.Logic <> :type_scope:x_'='_x not
R40981:40989 Coq.ZArith.BinInt Z testbit def
R40997:41001 Coq.Init.Datatypes <> false constr
R40994:40996 Coq.Init.Logic <> :type_scope:x_'='_x not
R40981:40989 Coq.ZArith.BinInt Z testbit def
R40997:41001 Coq.Init.Datatypes <> false constr
R41016:41029 Integers Make Ztestbit_above thm
R41016:41029 Integers Make Ztestbit_above thm
R41093:41108 Integers Make Z_one_complement thm
R41093:41108 Integers Make Z_one_complement thm
R41137:41140 Coq.Init.Datatypes <> negb def
R41142:41146 Coq.Init.Datatypes <> false constr
R41126:41129 Coq.Init.Datatypes <> true constr
R41126:41129 Coq.Init.Datatypes <> true constr
R41137:41140 Coq.Init.Datatypes <> negb def
R41142:41146 Coq.Init.Datatypes <> false constr
R41173:41187 Coq.Bool.Bool <> negb_involutive thm
R41173:41187 Coq.Bool.Bool <> negb_involutive thm
prf 41218:41226 Make Zsign_bit
R41303:41305 Coq.Init.Logic <> :type_scope:x_'='_x not
R41279:41287 Coq.ZArith.BinInt Z testbit def
R41292:41299 Coq.ZArith.BinInt <> Z_of_nat syndef
R41301:41301 Integers <> n var
R41289:41289 Integers <> x var
R41309:41311 Coqlib <> zlt def
R41316:41328 Coq.ZArith.Zpower <> two_power_nat def
R41330:41330 Integers <> n var
R41313:41313 Integers <> x var
R41349:41352 Coq.Init.Datatypes <> true constr
R41338:41342 Coq.Init.Datatypes <> false constr
R41246:41249 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R41251:41253 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R41250:41250 Integers <> x var
R41250:41250 Integers <> x var
R41254:41266 Coq.ZArith.Zpower <> two_power_nat def
R41269:41269 Coq.Init.Datatypes <> S constr
R41271:41271 Integers <> n var
R41398:41410 Coq.ZArith.Zpower <> two_power_nat def
R41398:41410 Coq.ZArith.Zpower <> two_power_nat def
R41446:41449 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R41442:41444 Coq.Init.Logic <> :type_scope:x_'='_x not
R41451:41453 Coq.Init.Logic <> :type_scope:x_'='_x not
R41446:41449 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R41442:41444 Coq.Init.Logic <> :type_scope:x_'='_x not
R41451:41453 Coq.Init.Logic <> :type_scope:x_'='_x not
R41519:41523 Coq.ZArith.Znat <> inj_S syndef
R41519:41523 Coq.ZArith.Znat <> inj_S syndef
R41534:41544 Integers Make Ztestbit_eq thm
R41534:41544 Integers Make Ztestbit_eq thm
R41555:41563 Coqlib <> zeq_false thm
R41555:41563 Coqlib <> zeq_false thm
R41574:41584 Coq.ZArith.BinInt Z pred_succ thm
R41574:41584 Coq.ZArith.BinInt Z pred_succ thm
R41613:41627 Coq.ZArith.Zpower <> two_power_nat_S thm
R41613:41627 Coq.ZArith.Zpower <> two_power_nat_S thm
R41645:41647 Coqlib <> zlt def
R41661:41673 Coq.ZArith.Zpower <> two_power_nat def
R41650:41655 Coq.ZArith.BinInt Z div2 def
R41689:41695 Integers Make Zdecomp thm
R41709:41721 Integers Make Zshiftin_spec thm
R41645:41647 Coqlib <> zlt def
R41661:41673 Coq.ZArith.Zpower <> two_power_nat def
R41650:41655 Coq.ZArith.BinInt Z div2 def
R41689:41695 Integers Make Zdecomp thm
R41689:41695 Integers Make Zdecomp thm
R41709:41721 Integers Make Zshiftin_spec thm
R41709:41721 Integers Make Zshiftin_spec thm
R41736:41743 Coqlib <> zlt_true thm
R41736:41743 Coqlib <> zlt_true thm
R41762:41766 Coq.ZArith.BinInt Z odd def
R41762:41766 Coq.ZArith.BinInt Z odd def
R41792:41800 Coqlib <> zlt_false thm
R41792:41800 Coqlib <> zlt_false thm
R41819:41823 Coq.ZArith.BinInt Z odd def
R41819:41823 Coq.ZArith.BinInt Z odd def
R41850:41856 Integers Make Zdecomp thm
R41875:41887 Integers Make Zshiftin_spec thm
R41850:41856 Integers Make Zdecomp thm
R41875:41887 Integers Make Zshiftin_spec thm
R41908:41922 Coq.ZArith.Zpower <> two_power_nat_S thm
R41908:41922 Coq.ZArith.Zpower <> two_power_nat_S thm
R41940:41944 Coq.ZArith.BinInt Z odd def
R41940:41944 Coq.ZArith.BinInt Z odd def
prf 41988:41999 Make Zshiftin_ind
R42015:42015 Coq.Numbers.BinNums <> Z ind
R42111:42111 Integers <> P var
R42113:42113 Integers <> x var
R42102:42105 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R42106:42106 Integers <> x var
R42068:42068 Integers <> P var
R42071:42078 Integers Make Zshiftin def
R42082:42082 Integers <> x var
R42080:42080 Integers <> b var
R42061:42061 Integers <> P var
R42063:42063 Integers <> x var
R42052:42055 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R42056:42056 Integers <> x var
R42029:42029 Integers <> P var
R42190:42197 Integers Make Zshiftin def
R42205:42209 Coq.ZArith.BinInt Z pos syndef
R42199:42202 Coq.Init.Datatypes <> true constr
R42190:42197 Integers Make Zshiftin def
R42205:42209 Coq.ZArith.BinInt Z pos syndef
R42199:42202 Coq.Init.Datatypes <> true constr
R42240:42247 Integers Make Zshiftin def
R42256:42260 Coq.ZArith.BinInt Z pos syndef
R42249:42253 Coq.Init.Datatypes <> false constr
R42240:42247 Integers Make Zshiftin def
R42256:42260 Coq.ZArith.BinInt Z pos syndef
R42249:42253 Coq.Init.Datatypes <> false constr
R42291:42298 Integers Make Zshiftin def
R42300:42303 Coq.Init.Datatypes <> true constr
R42291:42298 Integers Make Zshiftin def
R42300:42303 Coq.Init.Datatypes <> true constr
R0:-1 Integers <> y var
prf 42386:42401 Make Zshiftin_pos_ind
R42417:42417 Coq.Numbers.BinNums <> Z ind
R42511:42511 Integers <> P var
R42513:42513 Integers <> x var
R42503:42505 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x not
R42506:42506 Integers <> x var
R42469:42469 Integers <> P var
R42472:42479 Integers Make Zshiftin def
R42483:42483 Integers <> x var
R42481:42481 Integers <> b var
R42462:42462 Integers <> P var
R42464:42464 Integers <> x var
R42454:42456 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x not
R42457:42457 Integers <> x var
R42431:42431 Integers <> P var
R42608:42615 Integers Make Zshiftin def
R42623:42627 Coq.ZArith.BinInt Z pos syndef
R42617:42620 Coq.Init.Datatypes <> true constr
R42608:42615 Integers Make Zshiftin def
R42623:42627 Coq.ZArith.BinInt Z pos syndef
R42617:42620 Coq.Init.Datatypes <> true constr
R42658:42665 Integers Make Zshiftin def
R42674:42678 Coq.ZArith.BinInt Z pos syndef
R42667:42671 Coq.Init.Datatypes <> false constr
R42658:42665 Integers Make Zshiftin def
R42674:42678 Coq.ZArith.BinInt Z pos syndef
R42667:42671 Coq.Init.Datatypes <> false constr
prf 42716:42726 Make Ztestbit_le
R42830:42833 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R42829:42829 Integers <> x var
R42834:42834 Integers <> y var
R42815:42817 Coq.Init.Logic <> :type_scope:x_'='_x not
R42802:42810 Coq.ZArith.BinInt Z testbit def
R42814:42814 Integers <> i var
R42812:42812 Integers <> y var
R42818:42821 Coq.Init.Datatypes <> true constr
R42791:42793 Coq.Init.Logic <> :type_scope:x_'='_x not
R42778:42786 Coq.ZArith.BinInt Z testbit def
R42790:42790 Integers <> i var
R42788:42788 Integers <> x var
R42794:42797 Coq.Init.Datatypes <> true constr
R42769:42772 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R42773:42773 Integers <> i var
R42746:42749 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R42750:42750 Integers <> y var
R42892:42903 Integers Make Zshiftin_ind thm
R42892:42903 Integers Make Zshiftin_ind thm
R42955:42969 Integers Make equal_same_bits thm
R42955:42969 Integers Make equal_same_bits thm
R42993:43002 Integers Make Ztestbit_0 thm
R42993:43002 Integers Make Ztestbit_0 thm
R43015:43023 Coq.ZArith.BinInt Z testbit def
R43015:43023 Coq.ZArith.BinInt Z testbit def
R43080:43089 Integers Make Ztestbit_0 thm
R43080:43089 Integers Make Ztestbit_0 thm
R43119:43122 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R43110:43115 Coq.ZArith.BinInt Z div2 def
R43119:43122 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R43110:43115 Coq.ZArith.BinInt Z div2 def
R43164:43168 Coq.ZArith.BinInt <> Zsucc syndef
R43164:43168 Coq.ZArith.BinInt <> Zsucc syndef
R43198:43210 Integers Make Ztestbit_succ thm
R43198:43210 Integers Make Ztestbit_succ thm
R43227:43247 Integers Make Ztestbit_shiftin_succ thm
R43227:43247 Integers Make Ztestbit_shiftin_succ thm
R43276:43282 Integers Make Zdecomp thm
R43276:43282 Integers Make Zdecomp thm
R43298:43310 Integers Make Zshiftin_spec thm
R43298:43310 Integers Make Zshiftin_spec thm
R43298:43310 Integers Make Zshiftin_spec thm
R43298:43310 Integers Make Zshiftin_spec thm
R43328:43332 Coq.ZArith.BinInt Z odd def
R43328:43332 Coq.ZArith.BinInt Z odd def
R43423:43435 Integers Make Ztestbit_base thm
R43423:43435 Integers Make Ztestbit_base thm
R43457:43477 Integers Make Ztestbit_shiftin_base thm
R43457:43477 Integers Make Ztestbit_shiftin_base thm
def 43556:43562 Make testbit
R43568:43570 Integers Make int rec
R43577:43577 Coq.Numbers.BinNums <> Z ind
R43582:43585 Coq.Init.Datatypes <> bool ind
R43590:43598 Coq.ZArith.BinInt Z testbit def
R43613:43613 Integers <> i var
R43601:43608 Integers Make unsigned def
R43610:43610 Integers <> x var
prf 43623:43634 Make testbit_repr
R43695:43697 Coq.Init.Logic <> :type_scope:x_'='_x not
R43677:43683 Integers Make testbit def
R43694:43694 Integers <> i var
R43686:43689 Integers Make repr def
R43691:43691 Integers <> x var
R43698:43706 Coq.ZArith.BinInt Z testbit def
R43710:43710 Integers <> i var
R43708:43708 Integers <> x var
R43654:43657 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R43659:43661 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R43658:43658 Integers <> i var
R43658:43658 Integers <> i var
R43662:43670 Integers Make zwordsize def
R43737:43743 Integers Make testbit def
R43752:43764 Integers Make same_bits_eqm thm
R43752:43764 Integers Make same_bits_eqm thm
prf 43795:43806 Make same_bits_eq
R43891:43893 Coq.Init.Logic <> :type_scope:x_'='_x not
R43890:43890 Integers <> x var
R43894:43894 Integers <> y var
R43869:43871 Coq.Init.Logic <> :type_scope:x_'='_x not
R43858:43864 Integers Make testbit def
R43868:43868 Integers <> i var
R43866:43866 Integers <> x var
R43872:43878 Integers Make testbit def
R43882:43882 Integers <> i var
R43880:43880 Integers <> y var
R43837:43840 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R43842:43844 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R43841:43841 Integers <> i var
R43841:43841 Integers <> i var
R43845:43853 Integers Make zwordsize def
R43926:43938 Integers Make repr_unsigned thm
R43926:43938 Integers Make repr_unsigned thm
R43956:43968 Integers Make repr_unsigned thm
R43956:43968 Integers Make repr_unsigned thm
R43983:43994 Integers Make eqm_samerepr thm
R43983:43994 Integers Make eqm_samerepr thm
R44003:44015 Integers Make eqm_same_bits thm
R44003:44015 Integers Make eqm_same_bits thm
prf 44036:44045 Make bits_above
R44091:44093 Coq.Init.Logic <> :type_scope:x_'='_x not
R44080:44086 Integers Make testbit def
R44090:44090 Integers <> i var
R44088:44088 Integers <> x var
R44094:44098 Coq.Init.Datatypes <> false constr
R44063:44066 Coq.ZArith.BinInt <> :Z_scope:x_'>='_x not
R44062:44062 Integers <> i var
R44067:44075 Integers Make zwordsize def
R44144:44151 Integers Make wordsize def
R44124:44137 Integers Make Ztestbit_above thm
R44144:44151 Integers Make wordsize def
R44124:44137 Integers Make Ztestbit_above thm
R44166:44179 Integers Make unsigned_range thm
R44166:44179 Integers Make unsigned_range thm
prf 44196:44204 Make bits_zero
R44233:44235 Coq.Init.Logic <> :type_scope:x_'='_x not
R44219:44225 Integers Make testbit def
R44232:44232 Integers <> i var
R44227:44230 Integers Make zero def
R44236:44240 Coq.Init.Datatypes <> false constr
R44267:44273 Integers Make testbit def
R44284:44296 Integers Make unsigned_zero thm
R44284:44296 Integers Make unsigned_zero thm
R44305:44314 Integers Make Ztestbit_0 thm
R44305:44314 Integers Make Ztestbit_0 thm
prf 44331:44338 Make bits_one
R44364:44366 Coq.Init.Logic <> :type_scope:x_'='_x not
R44351:44357 Integers Make testbit def
R44363:44363 Integers <> n var
R44359:44361 Integers Make one def
R44367:44369 Coqlib <> zeq def
R44371:44371 Integers <> n var
R44392:44398 Integers Make testbit def
R44417:44428 Integers Make unsigned_one thm
R44417:44428 Integers Make unsigned_one thm
R44437:44446 Integers Make Ztestbit_1 thm
R44437:44446 Integers Make Ztestbit_1 thm
prf 44462:44470 Make bits_mone
R44521:44523 Coq.Init.Logic <> :type_scope:x_'='_x not
R44507:44513 Integers Make testbit def
R44520:44520 Integers <> i var
R44515:44518 Integers Make mone def
R44524:44527 Coq.Init.Datatypes <> true constr
R44486:44489 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R44491:44493 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R44490:44490 Integers <> i var
R44490:44490 Integers <> i var
R44494:44502 Integers Make zwordsize def
R44554:44557 Integers Make mone def
R44568:44579 Integers Make testbit_repr thm
R44568:44579 Integers Make testbit_repr thm
R44594:44604 Integers Make Ztestbit_m1 thm
R44594:44604 Integers Make Ztestbit_m1 thm
R44633:44641 Integers Make bits_zero thm
R44643:44651 Integers Make bits_mone thm
R44696:44707 Integers Make same_bits_eq thm
prf 44764:44783 Make sign_bit_of_unsigned
R44823:44825 Coq.Init.Logic <> :type_scope:x_'='_x not
R44798:44804 Integers Make testbit def
R44818:44820 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R44809:44817 Integers Make zwordsize def
R44806:44806 Integers <> x var
R44829:44831 Coqlib <> zlt def
R44846:44857 Integers Make half_modulus def
R44834:44841 Integers Make unsigned def
R44843:44843 Integers <> x var
R44875:44878 Coq.Init.Datatypes <> true constr
R44864:44868 Coq.Init.Datatypes <> false constr
R44905:44911 Integers Make testbit def
R44928:44931 Coq.Init.Peano <> pred def
R44933:44940 Integers Make wordsize def
R44928:44931 Coq.Init.Peano <> pred def
R44933:44940 Integers Make wordsize def
R44967:44969 Coq.Init.Logic <> :type_scope:x_'='_x not
R44963:44965 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R44954:44962 Integers Make zwordsize def
R44970:44977 Coq.ZArith.BinInt <> Z_of_nat syndef
R44967:44969 Coq.Init.Logic <> :type_scope:x_'='_x not
R44963:44965 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R44954:44962 Integers Make zwordsize def
R44970:44977 Coq.ZArith.BinInt <> Z_of_nat syndef
R44997:45005 Integers Make zwordsize def
R45013:45020 Integers Make wordsize def
R45037:45047 Integers WS wordsize defax
R45037:45047 Integers WS wordsize defax
R45071:45090 Integers WS wordsize_not_zero prfax
R45071:45090 Integers WS wordsize_not_zero prfax
R45111:45115 Coq.ZArith.Znat <> inj_S syndef
R45111:45115 Coq.ZArith.Znat <> inj_S syndef
R45155:45157 Coq.Init.Logic <> :type_scope:x_'='_x not
R45143:45154 Integers Make half_modulus def
R45158:45170 Coq.ZArith.Zpower <> two_power_nat def
R45155:45157 Coq.Init.Logic <> :type_scope:x_'='_x not
R45143:45154 Integers Make half_modulus def
R45158:45170 Coq.ZArith.Zpower <> two_power_nat def
R45190:45208 Coqlib <> two_power_nat_two_p thm
R45190:45208 Coqlib <> two_power_nat_two_p thm
R45231:45248 Integers Make half_modulus_power thm
R45231:45248 Integers Make half_modulus_power thm
R45284:45292 Integers Make Zsign_bit thm
R45284:45292 Integers Make Zsign_bit thm
R45303:45317 Coq.ZArith.Zpower <> two_power_nat_S thm
R45303:45317 Coq.ZArith.Zpower <> two_power_nat_S thm
R45349:45368 Integers Make half_modulus_modulus thm
R45349:45368 Integers Make half_modulus_modulus thm
R45377:45390 Integers Make unsigned_range thm
R45377:45390 Integers Make unsigned_range thm
prf 45407:45417 Make bits_signed
R45468:45470 Coq.Init.Logic <> :type_scope:x_'='_x not
R45446:45454 Coq.ZArith.BinInt Z testbit def
R45467:45467 Integers <> i var
R45457:45462 Integers Make signed def
R45464:45464 Integers <> x var
R45471:45477 Integers Make testbit def
R45485:45487 Coqlib <> zlt def
R45491:45499 Integers Make zwordsize def
R45489:45489 Integers <> i var
R45522:45524 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R45513:45521 Integers Make zwordsize def
R45506:45506 Integers <> i var
R45479:45479 Integers <> x var
R45435:45438 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R45439:45439 Integers <> i var
R45558:45560 Coqlib <> zlt def
R45564:45572 Integers Make zwordsize def
R45558:45560 Coqlib <> zlt def
R45564:45572 Integers Make zwordsize def
R45586:45598 Integers Make same_bits_eqm thm
R45586:45598 Integers Make same_bits_eqm thm
R45607:45625 Integers Make eqm_signed_unsigned thm
R45607:45625 Integers Make eqm_signed_unsigned thm
R45647:45652 Integers Make signed def
R45663:45682 Integers Make sign_bit_of_unsigned thm
R45663:45682 Integers Make sign_bit_of_unsigned thm
R45695:45697 Coqlib <> zlt def
R45712:45723 Integers Make half_modulus def
R45700:45707 Integers Make unsigned def
R45695:45697 Coqlib <> zlt def
R45712:45723 Integers Make half_modulus def
R45700:45707 Integers Make unsigned def
R45759:45766 Integers Make wordsize def
R45739:45752 Integers Make Ztestbit_above thm
R45759:45766 Integers Make wordsize def
R45739:45752 Integers Make Ztestbit_above thm
R45775:45788 Integers Make unsigned_range thm
R45775:45788 Integers Make unsigned_range thm
R45833:45840 Integers Make wordsize def
R45809:45826 Integers Make Ztestbit_above_neg thm
R45833:45840 Integers Make wordsize def
R45809:45826 Integers Make Ztestbit_above_neg thm
R45854:45860 Integers Make modulus def
R45854:45860 Integers Make modulus def
R45875:45888 Integers Make unsigned_range thm
R45875:45888 Integers Make unsigned_range thm
prf 45919:45925 Make bits_le
R46034:46037 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R46024:46031 Integers Make unsigned def
R46033:46033 Integers <> x var
R46038:46045 Integers Make unsigned def
R46047:46047 Integers <> y var
R46010:46012 Coq.Init.Logic <> :type_scope:x_'='_x not
R45999:46005 Integers Make testbit def
R46009:46009 Integers <> i var
R46007:46007 Integers <> y var
R46013:46016 Coq.Init.Datatypes <> true constr
R45988:45990 Coq.Init.Logic <> :type_scope:x_'='_x not
R45977:45983 Integers Make testbit def
R45987:45987 Integers <> i var
R45985:45985 Integers <> x var
R45991:45994 Coq.Init.Datatypes <> true constr
R45956:45959 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R45961:45963 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R45960:45960 Integers <> i var
R45960:45960 Integers <> i var
R45964:45972 Integers Make zwordsize def
R46073:46083 Integers Make Ztestbit_le thm
R46073:46083 Integers Make Ztestbit_le thm
R46098:46111 Integers Make unsigned_range thm
R46098:46111 Integers Make unsigned_range thm
R46141:46147 Integers Make testbit def
R46141:46147 Integers Make testbit def
R46165:46167 Coqlib <> zlt def
R46171:46179 Integers Make zwordsize def
R46165:46167 Coqlib <> zlt def
R46171:46179 Integers Make zwordsize def
R46217:46223 Integers Make testbit def
R46217:46223 Integers Make testbit def
R46245:46254 Integers Make bits_above thm
R46245:46254 Integers Make bits_above thm
prf 46340:46347 Make bits_and
R46409:46411 Coq.Init.Logic <> :type_scope:x_'='_x not
R46390:46396 Integers Make testbit def
R46408:46408 Integers <> i var
R46399:46401 Integers Make and def
R46405:46405 Integers <> y var
R46403:46403 Integers <> x var
R46423:46426 Coq.Init.Datatypes <> :bool_scope:x_'&&'_x not
R46412:46418 Integers Make testbit def
R46422:46422 Integers <> i var
R46420:46420 Integers <> x var
R46427:46433 Integers Make testbit def
R46437:46437 Integers <> i var
R46435:46435 Integers <> y var
R46367:46370 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R46372:46374 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R46371:46371 Integers <> i var
R46371:46371 Integers <> i var
R46375:46383 Integers Make zwordsize def
R46464:46466 Integers Make and def
R46477:46488 Integers Make testbit_repr thm
R46477:46488 Integers Make testbit_repr thm
R46505:46515 Coq.ZArith.BinInt Z land_spec thm
R46505:46515 Coq.ZArith.BinInt Z land_spec thm
R0:-1 Integers <> y var
prf 46541:46547 Make bits_or
R46608:46610 Coq.Init.Logic <> :type_scope:x_'='_x not
R46590:46596 Integers Make testbit def
R46607:46607 Integers <> i var
R46599:46600 Integers Make or def
R46604:46604 Integers <> y var
R46602:46602 Integers <> x var
R46622:46625 Coq.Init.Datatypes <> :bool_scope:x_'||'_x not
R46611:46617 Integers Make testbit def
R46621:46621 Integers <> i var
R46619:46619 Integers <> x var
R46626:46632 Integers Make testbit def
R46636:46636 Integers <> i var
R46634:46634 Integers <> y var
R46567:46570 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R46572:46574 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R46571:46571 Integers <> i var
R46571:46571 Integers <> i var
R46575:46583 Integers Make zwordsize def
R46663:46664 Integers Make or def
R46675:46686 Integers Make testbit_repr thm
R46675:46686 Integers Make testbit_repr thm
R46703:46712 Coq.ZArith.BinInt Z lor_spec thm
R46703:46712 Coq.ZArith.BinInt Z lor_spec thm
R0:-1 Integers <> y var
prf 46738:46745 Make bits_xor
R46807:46809 Coq.Init.Logic <> :type_scope:x_'='_x not
R46788:46794 Integers Make testbit def
R46806:46806 Integers <> i var
R46797:46799 Integers Make xor def
R46803:46803 Integers <> y var
R46801:46801 Integers <> x var
R46810:46813 Coq.Init.Datatypes <> xorb def
R46830:46836 Integers Make testbit def
R46840:46840 Integers <> i var
R46838:46838 Integers <> y var
R46816:46822 Integers Make testbit def
R46826:46826 Integers <> i var
R46824:46824 Integers <> x var
R46765:46768 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R46770:46772 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R46769:46769 Integers <> i var
R46769:46769 Integers <> i var
R46773:46781 Integers Make zwordsize def
R46868:46870 Integers Make xor def
R46881:46892 Integers Make testbit_repr thm
R46881:46892 Integers Make testbit_repr thm
R46909:46919 Coq.ZArith.BinInt Z lxor_spec thm
R46909:46919 Coq.ZArith.BinInt Z lxor_spec thm
R0:-1 Integers <> y var
prf 46945:46952 Make bits_not
R47010:47012 Coq.Init.Logic <> :type_scope:x_'='_x not
R46993:46999 Integers Make testbit def
R47009:47009 Integers <> i var
R47002:47004 Integers Make not def
R47006:47006 Integers <> x var
R47013:47016 Coq.Init.Datatypes <> negb def
R47019:47025 Integers Make testbit def
R47029:47029 Integers <> i var
R47027:47027 Integers <> x var
R46970:46973 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R46975:46977 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R46974:46974 Integers <> i var
R46974:46974 Integers <> i var
R46978:46986 Integers Make zwordsize def
R47057:47059 Integers Make not def
R47070:47077 Integers Make bits_xor thm
R47070:47077 Integers Make bits_xor thm
R47094:47102 Integers Make bits_mone thm
R47094:47102 Integers Make bits_mone thm
R47130:47137 Integers Make bits_and thm
R47139:47145 Integers Make bits_or thm
R47147:47154 Integers Make bits_xor thm
R47156:47163 Integers Make bits_not thm
prf 47181:47190 Make and_commut
R47212:47214 Coq.Init.Logic <> :type_scope:x_'='_x not
R47205:47207 Integers Make and def
R47211:47211 Integers <> y var
R47209:47209 Integers <> x var
R47215:47217 Integers Make and def
R47221:47221 Integers <> x var
R47219:47219 Integers <> y var
prf 47258:47266 Make and_assoc
R47298:47300 Coq.Init.Logic <> :type_scope:x_'='_x not
R47283:47285 Integers Make and def
R47297:47297 Integers <> z var
R47288:47290 Integers Make and def
R47294:47294 Integers <> y var
R47292:47292 Integers <> x var
R47301:47303 Integers Make and def
R47308:47310 Integers Make and def
R47314:47314 Integers <> z var
R47312:47312 Integers <> y var
R47305:47305 Integers <> x var
prf 47352:47359 Make and_zero
R47382:47384 Coq.Init.Logic <> :type_scope:x_'='_x not
R47372:47374 Integers Make and def
R47378:47381 Integers Make zero def
R47376:47376 Integers <> x var
R47385:47388 Integers Make zero def
R47417:47428 Coq.Bool.Bool <> andb_b_false syndef
R47417:47428 Coq.Bool.Bool <> andb_b_false syndef
prf 47447:47456 Make and_zero_l
R47479:47481 Coq.Init.Logic <> :type_scope:x_'='_x not
R47469:47471 Integers Make and def
R47478:47478 Integers <> x var
R47473:47476 Integers Make zero def
R47482:47485 Integers Make zero def
R47513:47522 Integers Make and_commut thm
R47513:47522 Integers Make and_commut thm
R47531:47538 Integers Make and_zero thm
R47531:47538 Integers Make and_zero thm
prf 47555:47562 Make and_mone
R47585:47587 Coq.Init.Logic <> :type_scope:x_'='_x not
R47575:47577 Integers Make and def
R47581:47584 Integers Make mone def
R47579:47579 Integers <> x var
R47588:47588 Integers <> x var
R47617:47627 Coq.Bool.Bool <> andb_b_true syndef
R47617:47627 Coq.Bool.Bool <> andb_b_true syndef
prf 47646:47655 Make and_mone_l
R47678:47680 Coq.Init.Logic <> :type_scope:x_'='_x not
R47668:47670 Integers Make and def
R47677:47677 Integers <> x var
R47672:47675 Integers Make mone def
R47681:47681 Integers <> x var
R47709:47718 Integers Make and_commut thm
R47709:47718 Integers Make and_commut thm
R47727:47734 Integers Make and_mone thm
R47727:47734 Integers Make and_mone thm
prf 47751:47758 Make and_idem
R47778:47780 Coq.Init.Logic <> :type_scope:x_'='_x not
R47771:47773 Integers Make and def
R47777:47777 Integers <> x var
R47775:47775 Integers <> x var
R47781:47781 Integers <> x var
R47814:47820 Integers Make testbit def
R47814:47820 Integers Make testbit def
prf 47848:47856 Make or_commut
R47877:47879 Coq.Init.Logic <> :type_scope:x_'='_x not
R47871:47872 Integers Make or def
R47876:47876 Integers <> y var
R47874:47874 Integers <> x var
R47880:47881 Integers Make or def
R47885:47885 Integers <> x var
R47883:47883 Integers <> y var
prf 47922:47929 Make or_assoc
R47959:47961 Coq.Init.Logic <> :type_scope:x_'='_x not
R47946:47947 Integers Make or def
R47958:47958 Integers <> z var
R47950:47951 Integers Make or def
R47955:47955 Integers <> y var
R47953:47953 Integers <> x var
R47962:47963 Integers Make or def
R47968:47969 Integers Make or def
R47973:47973 Integers <> z var
R47971:47971 Integers <> y var
R47965:47965 Integers <> x var
prf 48011:48017 Make or_zero
R48039:48041 Coq.Init.Logic <> :type_scope:x_'='_x not
R48030:48031 Integers Make or def
R48035:48038 Integers Make zero def
R48033:48033 Integers <> x var
R48042:48042 Integers <> x var
prf 48082:48090 Make or_zero_l
R48112:48114 Coq.Init.Logic <> :type_scope:x_'='_x not
R48103:48104 Integers Make or def
R48111:48111 Integers <> x var
R48106:48109 Integers Make zero def
R48115:48115 Integers <> x var
R48143:48151 Integers Make or_commut thm
R48143:48151 Integers Make or_commut thm
R48160:48166 Integers Make or_zero thm
R48160:48166 Integers Make or_zero thm
prf 48183:48189 Make or_mone
R48211:48213 Coq.Init.Logic <> :type_scope:x_'='_x not
R48202:48203 Integers Make or def
R48207:48210 Integers Make mone def
R48205:48205 Integers <> x var
R48214:48217 Integers Make mone def
prf 48255:48261 Make or_idem
R48280:48282 Coq.Init.Logic <> :type_scope:x_'='_x not
R48274:48275 Integers Make or def
R48279:48279 Integers <> x var
R48277:48277 Integers <> x var
R48283:48283 Integers <> x var
R48316:48322 Integers Make testbit def
R48316:48322 Integers Make testbit def
prf 48350:48363 Make and_or_distrib
R48398:48400 Coq.Init.Logic <> :type_scope:x_'='_x not
R48384:48386 Integers Make and def
R48391:48392 Integers Make or def
R48396:48396 Integers <> z var
R48394:48394 Integers <> y var
R48388:48388 Integers <> x var
R48401:48402 Integers Make or def
R48415:48417 Integers Make and def
R48421:48421 Integers <> z var
R48419:48419 Integers <> x var
R48405:48407 Integers Make and def
R48411:48411 Integers <> y var
R48409:48409 Integers <> x var
R48451:48459 Coq.Bool.Bool <> demorgan1 syndef
R48451:48459 Coq.Bool.Bool <> demorgan1 syndef
prf 48480:48495 Make and_or_distrib_l
R48530:48532 Coq.Init.Logic <> :type_scope:x_'='_x not
R48516:48518 Integers Make and def
R48529:48529 Integers <> z var
R48521:48522 Integers Make or def
R48526:48526 Integers <> y var
R48524:48524 Integers <> x var
R48533:48534 Integers Make or def
R48547:48549 Integers Make and def
R48553:48553 Integers <> z var
R48551:48551 Integers <> y var
R48537:48539 Integers Make and def
R48543:48543 Integers <> z var
R48541:48541 Integers <> x var
R48583:48592 Integers Make and_commut thm
R48595:48596 Integers Make or def
R48583:48592 Integers Make and_commut thm
R48595:48596 Integers Make or def
R48613:48626 Integers Make and_or_distrib thm
R48613:48626 Integers Make and_or_distrib thm
R48644:48653 Integers Make and_commut thm
R48644:48653 Integers Make and_commut thm
R48644:48653 Integers Make and_commut thm
prf 48670:48683 Make or_and_distrib
R48718:48720 Coq.Init.Logic <> :type_scope:x_'='_x not
R48704:48705 Integers Make or def
R48710:48712 Integers Make and def
R48716:48716 Integers <> z var
R48714:48714 Integers <> y var
R48707:48707 Integers <> x var
R48721:48723 Integers Make and def
R48735:48736 Integers Make or def
R48740:48740 Integers <> z var
R48738:48738 Integers <> x var
R48726:48727 Integers Make or def
R48731:48731 Integers <> y var
R48729:48729 Integers <> x var
R48770:48787 Coq.Bool.Bool <> orb_andb_distrib_r thm
R48770:48787 Coq.Bool.Bool <> orb_andb_distrib_r thm
prf 48809:48824 Make or_and_distrib_l
R48859:48861 Coq.Init.Logic <> :type_scope:x_'='_x not
R48845:48846 Integers Make or def
R48858:48858 Integers <> z var
R48849:48851 Integers Make and def
R48855:48855 Integers <> y var
R48853:48853 Integers <> x var
R48862:48864 Integers Make and def
R48876:48877 Integers Make or def
R48881:48881 Integers <> z var
R48879:48879 Integers <> y var
R48867:48868 Integers Make or def
R48872:48872 Integers <> z var
R48870:48870 Integers <> x var
R48911:48919 Integers Make or_commut thm
R48922:48924 Integers Make and def
R48911:48919 Integers Make or_commut thm
R48922:48924 Integers Make and def
R48941:48954 Integers Make or_and_distrib thm
R48941:48954 Integers Make or_and_distrib thm
R48972:48980 Integers Make or_commut thm
R48972:48980 Integers Make or_commut thm
R48972:48980 Integers Make or_commut thm
prf 48997:49009 Make and_or_absorb
R49038:49040 Coq.Init.Logic <> :type_scope:x_'='_x not
R49024:49026 Integers Make and def
R49031:49032 Integers Make or def
R49036:49036 Integers <> y var
R49034:49034 Integers <> x var
R49028:49028 Integers <> x var
R49041:49041 Integers <> x var
R49100:49102 Coq.Init.Logic <> :type_scope:x_'='_x not
R49088:49092 Coq.Init.Datatypes <> :bool_scope:x_'&&'_x not
R49099:49099 Coq.Init.Datatypes <> :bool_scope:x_'&&'_x not
R49087:49087 Integers <> a var
R49094:49097 Coq.Init.Datatypes <> :bool_scope:x_'||'_x not
R49093:49093 Integers <> a var
R49098:49098 Integers <> b var
R49103:49103 Integers <> a var
R49100:49102 Coq.Init.Logic <> :type_scope:x_'='_x not
R49088:49092 Coq.Init.Datatypes <> :bool_scope:x_'&&'_x not
R49099:49099 Coq.Init.Datatypes <> :bool_scope:x_'&&'_x not
R49087:49087 Integers <> a var
R49094:49097 Coq.Init.Datatypes <> :bool_scope:x_'||'_x not
R49093:49093 Integers <> a var
R49098:49098 Integers <> b var
R49103:49103 Integers <> a var
prf 49143:49155 Make or_and_absorb
R49184:49186 Coq.Init.Logic <> :type_scope:x_'='_x not
R49170:49171 Integers Make or def
R49176:49178 Integers Make and def
R49182:49182 Integers <> y var
R49180:49180 Integers <> x var
R49173:49173 Integers <> x var
R49187:49187 Integers <> x var
R49245:49247 Coq.Init.Logic <> :type_scope:x_'='_x not
R49233:49237 Coq.Init.Datatypes <> :bool_scope:x_'||'_x not
R49244:49244 Coq.Init.Datatypes <> :bool_scope:x_'||'_x not
R49232:49232 Integers <> a var
R49239:49242 Coq.Init.Datatypes <> :bool_scope:x_'&&'_x not
R49238:49238 Integers <> a var
R49243:49243 Integers <> b var
R49248:49248 Integers <> a var
R49245:49247 Coq.Init.Logic <> :type_scope:x_'='_x not
R49233:49237 Coq.Init.Datatypes <> :bool_scope:x_'||'_x not
R49244:49244 Coq.Init.Datatypes <> :bool_scope:x_'||'_x not
R49232:49232 Integers <> a var
R49239:49242 Coq.Init.Datatypes <> :bool_scope:x_'&&'_x not
R49238:49238 Integers <> a var
R49243:49243 Integers <> b var
R49248:49248 Integers <> a var
prf 49288:49297 Make xor_commut
R49319:49321 Coq.Init.Logic <> :type_scope:x_'='_x not
R49312:49314 Integers Make xor def
R49318:49318 Integers <> y var
R49316:49316 Integers <> x var
R49322:49324 Integers Make xor def
R49328:49328 Integers <> x var
R49326:49326 Integers <> y var
R49357:49365 Coq.Bool.Bool <> xorb_comm thm
R49357:49365 Coq.Bool.Bool <> xorb_comm thm
prf 49383:49391 Make xor_assoc
R49423:49425 Coq.Init.Logic <> :type_scope:x_'='_x not
R49408:49410 Integers Make xor def
R49422:49422 Integers <> z var
R49413:49415 Integers Make xor def
R49419:49419 Integers <> y var
R49417:49417 Integers <> x var
R49426:49428 Integers Make xor def
R49433:49435 Integers Make xor def
R49439:49439 Integers <> z var
R49437:49437 Integers <> y var
R49430:49430 Integers <> x var
R49469:49478 Coq.Bool.Bool <> xorb_assoc syndef
R49469:49478 Coq.Bool.Bool <> xorb_assoc syndef
prf 49495:49502 Make xor_zero
R49525:49527 Coq.Init.Logic <> :type_scope:x_'='_x not
R49515:49517 Integers Make xor def
R49521:49524 Integers Make zero def
R49519:49519 Integers <> x var
R49528:49528 Integers <> x var
R49557:49566 Coq.Bool.Bool <> xorb_false syndef
R49557:49566 Coq.Bool.Bool <> xorb_false syndef
prf 49586:49595 Make xor_zero_l
R49618:49620 Coq.Init.Logic <> :type_scope:x_'='_x not
R49608:49610 Integers Make xor def
R49617:49617 Integers <> x var
R49612:49615 Integers Make zero def
R49621:49621 Integers <> x var
R49649:49658 Integers Make xor_commut thm
R49649:49658 Integers Make xor_commut thm
R49667:49674 Integers Make xor_zero thm
R49667:49674 Integers Make xor_zero thm
prf 49691:49698 Make xor_idem
R49718:49720 Coq.Init.Logic <> :type_scope:x_'='_x not
R49711:49713 Integers Make xor def
R49717:49717 Integers <> x var
R49715:49715 Integers <> x var
R49721:49724 Integers Make zero def
R49753:49766 Coq.Bool.Bool <> xorb_nilpotent thm
R49753:49766 Coq.Bool.Bool <> xorb_nilpotent thm
prf 49784:49795 Make xor_zero_one
R49810:49812 Coq.Init.Logic <> :type_scope:x_'='_x not
R49798:49800 Integers Make xor def
R49807:49809 Integers Make one def
R49802:49805 Integers Make zero def
R49813:49815 Integers Make one def
R49833:49842 Integers Make xor_commut thm
R49833:49842 Integers Make xor_commut thm
R49851:49858 Integers Make xor_zero thm
R49851:49858 Integers Make xor_zero thm
prf 49875:49885 Make xor_one_one
R49899:49901 Coq.Init.Logic <> :type_scope:x_'='_x not
R49888:49890 Integers Make xor def
R49896:49898 Integers Make one def
R49892:49894 Integers Make one def
R49902:49905 Integers Make zero def
R49921:49928 Integers Make xor_idem thm
R49921:49928 Integers Make xor_idem thm
prf 49945:49958 Make xor_zero_equal
R49992:49994 Coq.Init.Logic <> :type_scope:x_'='_x not
R49991:49991 Integers <> x var
R49995:49995 Integers <> y var
R49980:49982 Coq.Init.Logic <> :type_scope:x_'='_x not
R49973:49975 Integers Make xor def
R49979:49979 Integers <> y var
R49977:49977 Integers <> x var
R49983:49986 Integers Make zero def
R50021:50032 Integers Make same_bits_eq thm
R50021:50032 Integers Make same_bits_eq thm
R50086:50088 Coq.Init.Logic <> :type_scope:x_'='_x not
R50054:50057 Coq.Init.Datatypes <> xorb def
R50074:50080 Integers Make testbit def
R50060:50066 Integers Make testbit def
R50089:50093 Coq.Init.Datatypes <> false constr
R50086:50088 Coq.Init.Logic <> :type_scope:x_'='_x not
R50054:50057 Coq.Init.Datatypes <> xorb def
R50074:50080 Integers Make testbit def
R50060:50066 Integers Make testbit def
R50089:50093 Coq.Init.Datatypes <> false constr
R50112:50119 Integers Make bits_xor thm
R50112:50119 Integers Make bits_xor thm
R50145:50153 Integers Make bits_zero thm
R50145:50153 Integers Make bits_zero thm
R50168:50174 Integers Make testbit def
R50192:50198 Integers Make testbit def
R50168:50174 Integers Make testbit def
R50192:50198 Integers Make testbit def
R50192:50198 Integers Make testbit def
prf 50249:50263 Make and_xor_distrib
R50299:50301 Coq.Init.Logic <> :type_scope:x_'='_x not
R50284:50286 Integers Make and def
R50291:50293 Integers Make xor def
R50297:50297 Integers <> z var
R50295:50295 Integers <> y var
R50288:50288 Integers <> x var
R50302:50304 Integers Make xor def
R50317:50319 Integers Make and def
R50323:50323 Integers <> z var
R50321:50321 Integers <> x var
R50307:50309 Integers Make and def
R50313:50313 Integers <> y var
R50311:50311 Integers <> x var
R50387:50389 Coq.Init.Logic <> :type_scope:x_'='_x not
R50373:50377 Coq.Init.Datatypes <> :bool_scope:x_'&&'_x not
R50386:50386 Coq.Init.Datatypes <> :bool_scope:x_'&&'_x not
R50372:50372 Integers <> a var
R50378:50381 Coq.Init.Datatypes <> xorb def
R50385:50385 Integers <> c var
R50383:50383 Integers <> b var
R50390:50393 Coq.Init.Datatypes <> xorb def
R50406:50409 Coq.Init.Datatypes <> :bool_scope:x_'&&'_x not
R50405:50405 Integers <> a var
R50410:50410 Integers <> c var
R50397:50400 Coq.Init.Datatypes <> :bool_scope:x_'&&'_x not
R50396:50396 Integers <> a var
R50401:50401 Integers <> b var
R50387:50389 Coq.Init.Logic <> :type_scope:x_'='_x not
R50373:50377 Coq.Init.Datatypes <> :bool_scope:x_'&&'_x not
R50386:50386 Coq.Init.Datatypes <> :bool_scope:x_'&&'_x not
R50372:50372 Integers <> a var
R50378:50381 Coq.Init.Datatypes <> xorb def
R50385:50385 Integers <> c var
R50383:50383 Integers <> b var
R50390:50393 Coq.Init.Datatypes <> xorb def
R50406:50409 Coq.Init.Datatypes <> :bool_scope:x_'&&'_x not
R50405:50405 Integers <> a var
R50410:50410 Integers <> c var
R50397:50400 Coq.Init.Datatypes <> :bool_scope:x_'&&'_x not
R50396:50396 Integers <> a var
R50401:50401 Integers <> b var
prf 50453:50458 Make and_le
R50493:50496 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R50475:50482 Integers Make unsigned def
R50485:50487 Integers Make and def
R50491:50491 Integers <> y var
R50489:50489 Integers <> x var
R50497:50504 Integers Make unsigned def
R50506:50506 Integers <> x var
R50532:50538 Integers Make bits_le thm
R50532:50538 Integers Make bits_le thm
R50560:50567 Integers Make bits_and thm
R50560:50567 Integers Make bits_and thm
R50590:50602 Coq.Bool.Bool <> andb_true_iff thm
R50590:50602 Coq.Bool.Bool <> andb_true_iff thm
R0:-1 Integers <> y var
prf 50632:50636 Make or_le
R50663:50666 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R50653:50660 Integers Make unsigned def
R50662:50662 Integers <> x var
R50667:50674 Integers Make unsigned def
R50677:50678 Integers Make or def
R50682:50682 Integers <> y var
R50680:50680 Integers <> x var
R50709:50715 Integers Make bits_le thm
R50709:50715 Integers Make bits_le thm
R50737:50743 Integers Make bits_or thm
R50737:50743 Integers Make bits_or thm
prf 50826:50839 Make not_involutive
R50855:50857 Integers Make int rec
R50872:50874 Coq.Init.Logic <> :type_scope:x_'='_x not
R50861:50863 Integers Make not def
R50866:50868 Integers Make not def
R50870:50870 Integers <> x var
R50875:50875 Integers <> x var
R50902:50904 Integers Make not def
R50915:50923 Integers Make xor_assoc thm
R50915:50923 Integers Make xor_assoc thm
R50934:50941 Integers Make xor_idem thm
R50934:50941 Integers Make xor_idem thm
R50950:50957 Integers Make xor_zero thm
R50950:50957 Integers Make xor_zero thm
prf 50975:50982 Make not_zero
R50995:50997 Coq.Init.Logic <> :type_scope:x_'='_x not
R50987:50989 Integers Make not def
R50991:50994 Integers Make zero def
R50998:51001 Integers Make mone def
R51020:51022 Integers Make not def
R51033:51042 Integers Make xor_commut thm
R51033:51042 Integers Make xor_commut thm
R51051:51058 Integers Make xor_zero thm
R51051:51058 Integers Make xor_zero thm
prf 51075:51082 Make not_mone
R51095:51097 Coq.Init.Logic <> :type_scope:x_'='_x not
R51087:51089 Integers Make not def
R51091:51094 Integers Make mone def
R51098:51101 Integers Make zero def
R51125:51138 Integers Make not_involutive thm
R51140:51143 Integers Make zero def
R51125:51138 Integers Make not_involutive thm
R51140:51143 Integers Make zero def
R51170:51177 Integers Make not_zero thm
R51170:51177 Integers Make not_zero thm
prf 51194:51207 Make not_or_and_not
R51236:51238 Coq.Init.Logic <> :type_scope:x_'='_x not
R51224:51226 Integers Make not def
R51229:51230 Integers Make or def
R51234:51234 Integers <> y var
R51232:51232 Integers <> x var
R51239:51241 Integers Make and def
R51252:51254 Integers Make not def
R51256:51256 Integers <> y var
R51244:51246 Integers Make not def
R51248:51248 Integers <> x var
R51286:51293 Coq.Bool.Bool <> negb_orb thm
R51286:51293 Coq.Bool.Bool <> negb_orb thm
prf 51311:51324 Make not_and_or_not
R51354:51356 Coq.Init.Logic <> :type_scope:x_'='_x not
R51341:51343 Integers Make not def
R51346:51348 Integers Make and def
R51352:51352 Integers <> y var
R51350:51350 Integers <> x var
R51357:51358 Integers Make or def
R51369:51371 Integers Make not def
R51373:51373 Integers <> y var
R51361:51363 Integers Make not def
R51365:51365 Integers <> x var
R51403:51411 Coq.Bool.Bool <> negb_andb thm
R51403:51411 Coq.Bool.Bool <> negb_andb thm
prf 51429:51440 Make and_not_self
R51468:51470 Coq.Init.Logic <> :type_scope:x_'='_x not
R51455:51457 Integers Make and def
R51462:51464 Integers Make not def
R51466:51466 Integers <> x var
R51459:51459 Integers <> x var
R51471:51474 Integers Make zero def
prf 51512:51522 Make or_not_self
R51549:51551 Coq.Init.Logic <> :type_scope:x_'='_x not
R51537:51538 Integers Make or def
R51543:51545 Integers Make not def
R51547:51547 Integers <> x var
R51540:51540 Integers <> x var
R51552:51555 Integers Make mone def
prf 51593:51604 Make xor_not_self
R51632:51634 Coq.Init.Logic <> :type_scope:x_'='_x not
R51619:51621 Integers Make xor def
R51626:51628 Integers Make not def
R51630:51630 Integers <> x var
R51623:51623 Integers <> x var
R51635:51638 Integers Make mone def
R51671:51677 Integers Make testbit def
R51671:51677 Integers Make testbit def
prf 51704:51715 Make unsigned_not
R51746:51748 Coq.Init.Logic <> :type_scope:x_'='_x not
R51730:51737 Integers Make unsigned def
R51740:51742 Integers Make not def
R51744:51744 Integers <> x var
R51761:51763 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R51749:51760 Integers Make max_unsigned def
R51764:51771 Integers Make unsigned def
R51773:51773 Integers <> x var
R51807:51814 Integers Make unsigned def
R51817:51820 Integers Make repr def
R51833:51835 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R51822:51822 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R51823:51830 Integers Make unsigned def
R51807:51814 Integers Make unsigned def
R51817:51820 Integers Make repr def
R51833:51835 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R51822:51822 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R51823:51830 Integers Make unsigned def
R51872:51883 Integers Make testbit_repr thm
R51872:51883 Integers Make testbit_repr thm
R51908:51923 Integers Make Z_one_complement thm
R51908:51923 Integers Make Z_one_complement thm
R51943:51958 Integers Make unsigned_repr_eq thm
R51943:51958 Integers Make unsigned_repr_eq thm
R51967:51977 Coqlib <> Zmod_unique thm
R51967:51977 Coqlib <> Zmod_unique thm
R51999:52010 Integers Make max_unsigned def
R52035:52048 Integers Make unsigned_range thm
R52035:52048 Integers Make unsigned_range thm
R52061:52072 Integers Make max_unsigned def
prf 52096:52102 Make not_neg
R52122:52124 Coq.Init.Logic <> :type_scope:x_'='_x not
R52117:52119 Integers Make not def
R52121:52121 Integers <> x var
R52125:52127 Integers Make add def
R52137:52140 Integers Make mone def
R52130:52132 Integers Make neg def
R52134:52134 Integers <> x var
R52177:52189 Integers Make repr_unsigned thm
R52177:52189 Integers Make repr_unsigned thm
R52207:52209 Integers Make add def
R52224:52235 Integers Make testbit_repr thm
R52224:52235 Integers Make testbit_repr thm
R52224:52235 Integers Make testbit_repr thm
R52224:52235 Integers Make testbit_repr thm
R52260:52268 Coq.ZArith.BinInt Z testbit def
R52282:52284 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R52271:52271 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R52272:52279 Integers Make unsigned def
R52260:52268 Coq.ZArith.BinInt Z testbit def
R52282:52284 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R52271:52271 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R52272:52279 Integers Make unsigned def
R52310:52325 Integers Make Z_one_complement thm
R52310:52325 Integers Make Z_one_complement thm
R52343:52355 Integers Make same_bits_eqm thm
R52343:52355 Integers Make same_bits_eqm thm
R52386:52388 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R52375:52375 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R52376:52383 Integers Make unsigned def
R52409:52412 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R52415:52415 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R52398:52398 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R52399:52406 Integers Make unsigned def
R52409:52412 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R52415:52415 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R52398:52398 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R52399:52406 Integers Make unsigned def
R52386:52388 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R52375:52375 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R52376:52383 Integers Make unsigned def
R52436:52442 Integers Make eqm_add thm
R52436:52442 Integers Make eqm_add thm
R52455:52457 Integers Make neg def
R52466:52482 Integers Make eqm_unsigned_repr thm
R52466:52482 Integers Make eqm_unsigned_repr thm
R52496:52508 Integers Make unsigned_mone thm
R52496:52508 Integers Make unsigned_mone thm
prf 52545:52551 Make neg_not
R52571:52573 Coq.Init.Logic <> :type_scope:x_'='_x not
R52566:52568 Integers Make neg def
R52570:52570 Integers <> x var
R52574:52576 Integers Make add def
R52586:52588 Integers Make one def
R52579:52581 Integers Make not def
R52583:52583 Integers <> x var
R52616:52622 Integers Make not_neg thm
R52616:52622 Integers Make not_neg thm
R52633:52641 Integers Make add_assoc thm
R52633:52641 Integers Make add_assoc thm
R52656:52658 Integers Make add def
R52665:52667 Integers Make one def
R52660:52663 Integers Make mone def
R52675:52678 Integers Make zero def
R52675:52678 Integers Make zero def
R52656:52658 Integers Make add def
R52665:52667 Integers Make one def
R52660:52663 Integers Make mone def
R52689:52696 Integers Make add_zero thm
R52689:52696 Integers Make add_zero thm
R52714:52725 Integers Make eqm_samerepr thm
R52714:52725 Integers Make eqm_samerepr thm
R52736:52748 Integers Make unsigned_mone thm
R52736:52748 Integers Make unsigned_mone thm
R52759:52770 Integers Make unsigned_one thm
R52759:52770 Integers Make unsigned_one thm
prf 52810:52820 Make sub_add_not
R52844:52846 Coq.Init.Logic <> :type_scope:x_'='_x not
R52837:52839 Integers Make sub def
R52843:52843 Integers <> y var
R52841:52841 Integers <> x var
R52847:52849 Integers Make add def
R52867:52869 Integers Make one def
R52852:52854 Integers Make add def
R52859:52861 Integers Make not def
R52863:52863 Integers <> y var
R52856:52856 Integers <> x var
R52897:52907 Integers Make sub_add_opp thm
R52897:52907 Integers Make sub_add_opp thm
R52918:52924 Integers Make neg_not thm
R52918:52924 Integers Make neg_not thm
R52940:52948 Integers Make add_assoc thm
R52940:52948 Integers Make add_assoc thm
R52940:52948 Integers Make add_assoc thm
prf 52971:52983 Make sub_add_not_3
R53044:53046 Coq.Init.Logic <> :type_scope:x_'='_x not
R53029:53031 Integers Make sub def
R53043:53043 Integers <> b var
R53034:53036 Integers Make sub def
R53040:53040 Integers <> y var
R53038:53038 Integers <> x var
R53047:53049 Integers Make add def
R53068:53070 Integers Make xor def
R53074:53076 Integers Make one def
R53072:53072 Integers <> b var
R53052:53054 Integers Make add def
R53059:53061 Integers Make not def
R53063:53063 Integers <> y var
R53056:53056 Integers <> x var
R53012:53015 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R53005:53007 Coq.Init.Logic <> :type_scope:x_'='_x not
R53004:53004 Integers <> b var
R53008:53011 Integers Make zero def
R53017:53019 Coq.Init.Logic <> :type_scope:x_'='_x not
R53016:53016 Integers <> b var
R53020:53022 Integers Make one def
R53107:53117 Integers Make sub_add_not thm
R53107:53117 Integers Make sub_add_not thm
R53107:53117 Integers Make sub_add_not thm
R53107:53117 Integers Make sub_add_not thm
R53130:53138 Integers Make add_assoc thm
R53130:53138 Integers Make add_assoc thm
R53130:53138 Integers Make add_assoc thm
R53130:53138 Integers Make add_assoc thm
R53130:53138 Integers Make add_assoc thm
R53130:53138 Integers Make add_assoc thm
R53172:53178 Integers Make neg_not thm
R53172:53178 Integers Make neg_not thm
R53192:53202 Integers Make sub_add_opp thm
R53192:53202 Integers Make sub_add_opp thm
R53236:53245 Integers Make xor_zero_l thm
R53236:53245 Integers Make xor_zero_l thm
R53256:53265 Integers Make sub_zero_l thm
R53256:53265 Integers Make sub_zero_l thm
R53284:53291 Integers Make xor_idem thm
R53284:53291 Integers Make xor_idem thm
R53302:53309 Integers Make sub_idem thm
R53302:53309 Integers Make sub_idem thm
prf 53332:53351 Make sub_borrow_add_carry
R53413:53415 Coq.Init.Logic <> :type_scope:x_'='_x not
R53397:53406 Integers Make sub_borrow def
R53412:53412 Integers <> b var
R53410:53410 Integers <> y var
R53408:53408 Integers <> x var
R53416:53418 Integers Make xor def
R53454:53456 Integers Make one def
R53421:53429 Integers Make add_carry def
R53442:53444 Integers Make xor def
R53448:53450 Integers Make one def
R53446:53446 Integers <> b var
R53434:53436 Integers Make not def
R53438:53438 Integers <> y var
R53431:53431 Integers <> x var
R53380:53383 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R53373:53375 Coq.Init.Logic <> :type_scope:x_'='_x not
R53372:53372 Integers <> b var
R53376:53379 Integers Make zero def
R53385:53387 Coq.Init.Logic <> :type_scope:x_'='_x not
R53384:53384 Integers <> b var
R53388:53390 Integers Make one def
R53483:53492 Integers Make sub_borrow def
R53495:53503 Integers Make add_carry def
R53514:53525 Integers Make unsigned_not thm
R53514:53525 Integers Make unsigned_not thm
R53540:53547 Integers Make unsigned def
R53550:53552 Integers Make xor def
R53556:53558 Integers Make one def
R53569:53571 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R53572:53579 Integers Make unsigned def
R53569:53571 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R53572:53579 Integers Make unsigned def
R53540:53547 Integers Make unsigned def
R53550:53552 Integers Make xor def
R53556:53558 Integers Make one def
R53597:53599 Coqlib <> zlt def
R53625:53627 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R53612:53614 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R53602:53609 Integers Make unsigned def
R53615:53622 Integers Make unsigned def
R53628:53635 Integers Make unsigned def
R53597:53599 Coqlib <> zlt def
R53625:53627 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R53612:53614 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R53602:53609 Integers Make unsigned def
R53615:53622 Integers Make unsigned def
R53628:53635 Integers Make unsigned def
R53652:53659 Coqlib <> zlt_true thm
R53652:53659 Coqlib <> zlt_true thm
R53670:53679 Integers Make xor_zero_l thm
R53670:53679 Integers Make xor_zero_l thm
R53697:53708 Integers Make max_unsigned def
R53728:53736 Coqlib <> zlt_false thm
R53728:53736 Coqlib <> zlt_false thm
R53747:53754 Integers Make xor_idem thm
R53747:53754 Integers Make xor_idem thm
R53772:53783 Integers Make max_unsigned def
R53827:53836 Integers Make xor_zero_l thm
R53827:53836 Integers Make xor_zero_l thm
R53847:53858 Integers Make unsigned_one thm
R53861:53873 Integers Make unsigned_zero thm
R53847:53858 Integers Make unsigned_one thm
R53861:53873 Integers Make unsigned_zero thm
R53892:53899 Integers Make xor_idem thm
R53892:53899 Integers Make xor_idem thm
R53910:53921 Integers Make unsigned_one thm
R53924:53936 Integers Make unsigned_zero thm
R53910:53921 Integers Make unsigned_one thm
R53924:53936 Integers Make unsigned_zero thm
prf 54023:54033 Make Z_add_is_or
R54164:54166 Coq.Init.Logic <> :type_scope:x_'='_x not
R54145:54153 Coq.ZArith.BinInt Z testbit def
R54163:54163 Integers <> i var
R54157:54159 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R54156:54156 Integers <> x var
R54160:54160 Integers <> y var
R54180:54183 Coq.Init.Datatypes <> :bool_scope:x_'||'_x not
R54167:54175 Coq.ZArith.BinInt Z testbit def
R54179:54179 Integers <> i var
R54177:54177 Integers <> x var
R54184:54192 Coq.ZArith.BinInt Z testbit def
R54196:54196 Integers <> i var
R54194:54194 Integers <> y var
R54130:54132 Coq.Init.Logic <> :type_scope:x_'='_x not
R54113:54116 Coq.Init.Datatypes <> :bool_scope:x_'&&'_x not
R54100:54108 Coq.ZArith.BinInt Z testbit def
R54112:54112 Integers <> j var
R54110:54110 Integers <> x var
R54117:54125 Coq.ZArith.BinInt Z testbit def
R54129:54129 Integers <> j var
R54127:54127 Integers <> y var
R54133:54137 Coq.Init.Datatypes <> false constr
R54086:54089 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<='_x not
R54091:54094 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<='_x not
R54090:54090 Integers <> j var
R54090:54090 Integers <> j var
R54095:54095 Integers <> i var
R54049:54052 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R54053:54053 Integers <> i var
R54242:54250 Coq.ZArith.Wf_Z <> Zlt_0_ind thm
R54242:54250 Coq.ZArith.Wf_Z <> Zlt_0_ind thm
R54299:54305 Integers Make Zdecomp thm
R54299:54305 Integers Make Zdecomp thm
R54325:54331 Integers Make Zdecomp thm
R54325:54331 Integers Make Zdecomp thm
R54358:54366 Coq.ZArith.BinInt Z testbit def
R54369:54376 Integers Make Zshiftin def
R54408:54410 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R54400:54405 Coq.ZArith.BinInt Z div2 def
R54411:54416 Coq.ZArith.BinInt Z div2 def
R54386:54389 Coq.Init.Datatypes <> :bool_scope:x_'||'_x not
R54379:54383 Coq.ZArith.BinInt Z odd def
R54390:54394 Coq.ZArith.BinInt Z odd def
R54358:54366 Coq.ZArith.BinInt Z testbit def
R54369:54376 Integers Make Zshiftin def
R54408:54410 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R54400:54405 Coq.ZArith.BinInt Z div2 def
R54411:54416 Coq.ZArith.BinInt Z div2 def
R54386:54389 Coq.Init.Datatypes <> :bool_scope:x_'||'_x not
R54379:54383 Coq.ZArith.BinInt Z odd def
R54390:54394 Coq.ZArith.BinInt Z odd def
R54448:54460 Integers Make Zshiftin_spec thm
R54448:54460 Integers Make Zshiftin_spec thm
R54448:54460 Integers Make Zshiftin_spec thm
R54448:54460 Integers Make Zshiftin_spec thm
R54448:54460 Integers Make Zshiftin_spec thm
R54501:54521 Integers Make Ztestbit_shiftin_base thm
R54501:54521 Integers Make Ztestbit_shiftin_base thm
R54501:54521 Integers Make Ztestbit_shiftin_base thm
R54501:54521 Integers Make Ztestbit_shiftin_base thm
R54540:54544 Coq.ZArith.BinInt Z mul def
R54561:54565 Coq.ZArith.BinInt Z odd def
R54581:54585 Coq.ZArith.BinInt Z odd def
R54561:54565 Coq.ZArith.BinInt Z odd def
R54581:54585 Coq.ZArith.BinInt Z odd def
R54581:54585 Coq.ZArith.BinInt Z odd def
R54638:54653 Integers Make Ztestbit_shiftin thm
R54638:54653 Integers Make Ztestbit_shiftin thm
R54638:54653 Integers Make Ztestbit_shiftin thm
R54638:54653 Integers Make Ztestbit_shiftin thm
R54638:54653 Integers Make Ztestbit_shiftin thm
R54676:54678 Coqlib <> zeq def
R54676:54678 Coqlib <> zeq def
R54752:54757 Coq.ZArith.BinInt Z succ def
R54752:54757 Coq.ZArith.BinInt Z succ def
R54787:54807 Integers Make Ztestbit_shiftin_succ thm
R54787:54807 Integers Make Ztestbit_shiftin_succ thm
R54787:54807 Integers Make Ztestbit_shiftin_succ thm
R54787:54807 Integers Make Ztestbit_shiftin_succ thm
prf 54850:54858 Make add_is_or
R54904:54906 Coq.Init.Logic <> :type_scope:x_'='_x not
R54897:54899 Integers Make add def
R54903:54903 Integers <> y var
R54901:54901 Integers <> x var
R54907:54908 Integers Make or def
R54912:54912 Integers <> y var
R54910:54910 Integers <> x var
R54884:54886 Coq.Init.Logic <> :type_scope:x_'='_x not
R54877:54879 Integers Make and def
R54883:54883 Integers <> y var
R54881:54881 Integers <> x var
R54887:54890 Integers Make zero def
R54942:54944 Integers Make add def
R54955:54966 Integers Make testbit_repr thm
R54955:54966 Integers Make testbit_repr thm
R54983:54993 Integers Make Z_add_is_or thm
R54983:54993 Integers Make Z_add_is_or thm
R55044:55046 Coq.Init.Logic <> :type_scope:x_'='_x not
R55025:55031 Integers Make testbit def
R55034:55036 Integers Make and def
R55047:55053 Integers Make testbit def
R55055:55058 Integers Make zero def
R55044:55046 Coq.Init.Logic <> :type_scope:x_'='_x not
R55025:55031 Integers Make testbit def
R55034:55036 Integers Make and def
R55047:55053 Integers Make testbit def
R55055:55058 Integers Make zero def
prf 55142:55150 Make xor_is_or
R55192:55194 Coq.Init.Logic <> :type_scope:x_'='_x not
R55185:55187 Integers Make xor def
R55191:55191 Integers <> y var
R55189:55189 Integers <> x var
R55195:55196 Integers Make or def
R55200:55200 Integers <> y var
R55198:55198 Integers <> x var
R55174:55176 Coq.Init.Logic <> :type_scope:x_'='_x not
R55167:55169 Integers Make and def
R55173:55173 Integers <> y var
R55171:55171 Integers <> x var
R55177:55180 Integers Make zero def
R55253:55255 Coq.Init.Logic <> :type_scope:x_'='_x not
R55234:55240 Integers Make testbit def
R55243:55245 Integers Make and def
R55256:55262 Integers Make testbit def
R55264:55267 Integers Make zero def
R55253:55255 Coq.Init.Logic <> :type_scope:x_'='_x not
R55234:55240 Integers Make testbit def
R55243:55245 Integers Make and def
R55256:55262 Integers Make testbit def
R55264:55267 Integers Make zero def
R55337:55343 Integers Make testbit def
R55361:55367 Integers Make testbit def
R55337:55343 Integers Make testbit def
R55361:55367 Integers Make testbit def
R55361:55367 Integers Make testbit def
prf 55413:55422 Make add_is_xor
R55468:55470 Coq.Init.Logic <> :type_scope:x_'='_x not
R55461:55463 Integers Make add def
R55467:55467 Integers <> y var
R55465:55465 Integers <> x var
R55471:55473 Integers Make xor def
R55477:55477 Integers <> y var
R55475:55475 Integers <> x var
R55448:55450 Coq.Init.Logic <> :type_scope:x_'='_x not
R55441:55443 Integers Make and def
R55447:55447 Integers <> y var
R55445:55445 Integers <> x var
R55451:55454 Integers Make zero def
R55505:55513 Integers Make xor_is_or thm
R55505:55513 Integers Make xor_is_or thm
R55528:55536 Integers Make add_is_or thm
R55528:55536 Integers Make add_is_or thm
prf 55559:55565 Make add_and
R55629:55631 Coq.Init.Logic <> :type_scope:x_'='_x not
R55606:55608 Integers Make add def
R55621:55623 Integers Make and def
R55627:55627 Integers <> z var
R55625:55625 Integers <> x var
R55611:55613 Integers Make and def
R55617:55617 Integers <> y var
R55615:55615 Integers <> x var
R55632:55634 Integers Make and def
R55639:55640 Integers Make or def
R55644:55644 Integers <> z var
R55642:55642 Integers <> y var
R55636:55636 Integers <> x var
R55593:55595 Coq.Init.Logic <> :type_scope:x_'='_x not
R55586:55588 Integers Make and def
R55592:55592 Integers <> z var
R55590:55590 Integers <> y var
R55596:55599 Integers Make zero def
R55673:55681 Integers Make add_is_or thm
R55673:55681 Integers Make add_is_or thm
R55694:55707 Integers Make and_or_distrib thm
R55694:55707 Integers Make and_or_distrib thm
R55727:55736 Integers Make and_commut thm
R55727:55736 Integers Make and_commut thm
R55754:55762 Integers Make and_assoc thm
R55754:55762 Integers Make and_assoc thm
R55787:55795 Integers Make and_assoc thm
R55787:55795 Integers Make and_assoc thm
R55787:55795 Integers Make and_assoc thm
R55813:55822 Integers Make and_commut thm
R55825:55827 Integers Make and def
R55813:55822 Integers Make and_commut thm
R55825:55827 Integers Make and def
R55849:55857 Integers Make and_assoc thm
R55849:55857 Integers Make and_assoc thm
R55881:55890 Integers Make and_commut thm
R55881:55890 Integers Make and_commut thm
R55899:55906 Integers Make and_zero thm
R55899:55906 Integers Make and_zero thm
prf 55953:55960 Make bits_shl
R56024:56028 Coq.Init.Logic <> :type_scope:x_'='_x not
R56005:56011 Integers Make testbit def
R56023:56023 Integers <> i var
R56014:56016 Integers Make shl def
R56020:56020 Integers <> y var
R56018:56018 Integers <> x var
R56032:56034 Coqlib <> zlt def
R56039:56046 Integers Make unsigned def
R56048:56048 Integers <> y var
R56036:56036 Integers <> i var
R56067:56073 Integers Make testbit def
R56079:56081 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R56078:56078 Integers <> i var
R56082:56089 Integers Make unsigned def
R56091:56091 Integers <> y var
R56075:56075 Integers <> x var
R56056:56060 Coq.Init.Datatypes <> false constr
R55982:55985 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R55987:55989 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R55986:55986 Integers <> i var
R55986:55986 Integers <> i var
R55990:55998 Integers Make zwordsize def
R56119:56121 Integers Make shl def
R56132:56143 Integers Make testbit_repr thm
R56132:56143 Integers Make testbit_repr thm
R56165:56167 Coqlib <> zlt def
R56172:56179 Integers Make unsigned def
R56165:56167 Coqlib <> zlt def
R56172:56179 Integers Make unsigned def
R56195:56211 Coq.ZArith.BinInt Z shiftl_spec_low thm
R56195:56211 Coq.ZArith.BinInt Z shiftl_spec_low thm
R56228:56245 Coq.ZArith.BinInt Z shiftl_spec_high thm
R56228:56245 Coq.ZArith.BinInt Z shiftl_spec_high thm
prf 56274:56282 Make bits_shru
R56347:56351 Coq.Init.Logic <> :type_scope:x_'='_x not
R56327:56333 Integers Make testbit def
R56346:56346 Integers <> i var
R56336:56339 Integers Make shru def
R56343:56343 Integers <> y var
R56341:56341 Integers <> x var
R56355:56357 Coqlib <> zlt def
R56376:56384 Integers Make zwordsize def
R56361:56363 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R56360:56360 Integers <> i var
R56364:56371 Integers Make unsigned def
R56373:56373 Integers <> y var
R56423:56427 Coq.Init.Datatypes <> false constr
R56391:56397 Integers Make testbit def
R56403:56405 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R56402:56402 Integers <> i var
R56406:56413 Integers Make unsigned def
R56415:56415 Integers <> y var
R56399:56399 Integers <> x var
R56304:56307 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R56309:56311 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R56308:56308 Integers <> i var
R56308:56308 Integers <> i var
R56312:56320 Integers Make zwordsize def
R56454:56457 Integers Make shru def
R56468:56479 Integers Make testbit_repr thm
R56468:56479 Integers Make testbit_repr thm
R56499:56511 Coq.ZArith.BinInt Z shiftr_spec thm
R56499:56511 Coq.ZArith.BinInt Z shiftr_spec thm
R56520:56526 Integers Make testbit def
R56532:56534 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R56535:56542 Integers Make unsigned def
R56520:56526 Integers Make testbit def
R56532:56534 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R56535:56542 Integers Make unsigned def
R56561:56563 Coqlib <> zlt def
R56582:56590 Integers Make zwordsize def
R56567:56569 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R56570:56577 Integers Make unsigned def
R56561:56563 Coqlib <> zlt def
R56582:56590 Integers Make zwordsize def
R56567:56569 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R56570:56577 Integers Make unsigned def
R56610:56619 Integers Make bits_above thm
R56610:56619 Integers Make bits_above thm
prf 56650:56657 Make bits_shr
R56721:56725 Coq.Init.Logic <> :type_scope:x_'='_x not
R56702:56708 Integers Make testbit def
R56720:56720 Integers <> i var
R56711:56713 Integers Make shr def
R56717:56717 Integers <> y var
R56715:56715 Integers <> x var
R56726:56732 Integers Make testbit def
R56740:56742 Coqlib <> zlt def
R56761:56769 Integers Make zwordsize def
R56746:56748 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R56745:56745 Integers <> i var
R56749:56756 Integers Make unsigned def
R56758:56758 Integers <> y var
R56805:56807 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R56796:56804 Integers Make zwordsize def
R56777:56779 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R56776:56776 Integers <> i var
R56780:56787 Integers Make unsigned def
R56789:56789 Integers <> y var
R56734:56734 Integers <> x var
R56679:56682 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R56684:56686 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R56683:56683 Integers <> i var
R56683:56683 Integers <> i var
R56687:56695 Integers Make zwordsize def
R56836:56838 Integers Make shr def
R56849:56860 Integers Make testbit_repr thm
R56849:56860 Integers Make testbit_repr thm
R56880:56892 Coq.ZArith.BinInt Z shiftr_spec thm
R56880:56892 Coq.ZArith.BinInt Z shiftr_spec thm
R56901:56911 Integers Make bits_signed thm
R56901:56911 Integers Make bits_signed thm
R56929:56942 Integers Make unsigned_range thm
R56929:56942 Integers Make unsigned_range thm
R56983:56990 Integers Make bits_shl thm
R56992:57000 Integers Make bits_shru thm
R57002:57009 Integers Make bits_shr thm
prf 57027:57034 Make shl_zero
R57057:57059 Coq.Init.Logic <> :type_scope:x_'='_x not
R57047:57049 Integers Make shl def
R57053:57056 Integers Make zero def
R57051:57051 Integers <> x var
R57060:57060 Integers <> x var
R57091:57103 Integers Make unsigned_zero thm
R57091:57103 Integers Make unsigned_zero thm
R57114:57122 Coqlib <> zlt_false thm
R57114:57122 Coqlib <> zlt_false thm
prf 57160:57176 Make bitwise_binop_shl
R57345:57347 Coq.Init.Logic <> :type_scope:x_'='_x not
R57324:57324 Integers <> f var
R57337:57339 Integers Make shl def
R57343:57343 Integers <> n var
R57341:57341 Integers <> y var
R57327:57329 Integers Make shl def
R57333:57333 Integers <> n var
R57331:57331 Integers <> x var
R57348:57350 Integers Make shl def
R57360:57360 Integers <> n var
R57353:57353 Integers <> f var
R57357:57357 Integers <> y var
R57355:57355 Integers <> x var
R57310:57312 Coq.Init.Logic <> :type_scope:x_'='_x not
R57296:57297 Integers <> f' var
R57305:57309 Coq.Init.Datatypes <> false constr
R57299:57303 Coq.Init.Datatypes <> false constr
R57313:57317 Coq.Init.Datatypes <> false constr
R57256:57258 Coq.Init.Logic <> :type_scope:x_'='_x not
R57239:57245 Integers Make testbit def
R57255:57255 Integers <> i var
R57248:57248 Integers <> f var
R57252:57252 Integers <> y var
R57250:57250 Integers <> x var
R57259:57260 Integers <> f' var
R57277:57283 Integers Make testbit def
R57287:57287 Integers <> i var
R57285:57285 Integers <> y var
R57263:57269 Integers Make testbit def
R57273:57273 Integers <> i var
R57271:57271 Integers <> x var
R57218:57221 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R57223:57225 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R57222:57222 Integers <> i var
R57222:57222 Integers <> i var
R57226:57234 Integers Make zwordsize def
R57386:57397 Integers Make same_bits_eq thm
R57386:57397 Integers Make same_bits_eq thm
R57437:57444 Integers Make bits_shl thm
R57437:57444 Integers Make bits_shl thm
R57437:57444 Integers Make bits_shl thm
R57437:57444 Integers Make bits_shl thm
R57437:57444 Integers Make bits_shl thm
R57465:57467 Coqlib <> zlt def
R57472:57479 Integers Make unsigned def
R57465:57467 Coqlib <> zlt def
R57472:57479 Integers Make unsigned def
R57523:57536 Integers Make unsigned_range thm
R57523:57536 Integers Make unsigned_range thm
prf 57564:57570 Make and_shl
R57614:57616 Coq.Init.Logic <> :type_scope:x_'='_x not
R57591:57593 Integers Make and def
R57606:57608 Integers Make shl def
R57612:57612 Integers <> n var
R57610:57610 Integers <> y var
R57596:57598 Integers Make shl def
R57602:57602 Integers <> n var
R57600:57600 Integers <> x var
R57617:57619 Integers Make shl def
R57631:57631 Integers <> n var
R57622:57624 Integers Make and def
R57628:57628 Integers <> y var
R57626:57626 Integers <> x var
R57680:57683 Coq.Init.Datatypes <> andb def
R57657:57673 Integers Make bitwise_binop_shl thm
R57680:57683 Coq.Init.Datatypes <> andb def
R57657:57673 Integers Make bitwise_binop_shl thm
R57692:57699 Integers Make bits_and thm
R57692:57699 Integers Make bits_and thm
prf 57722:57727 Make or_shl
R57770:57772 Coq.Init.Logic <> :type_scope:x_'='_x not
R57748:57749 Integers Make or def
R57762:57764 Integers Make shl def
R57768:57768 Integers <> n var
R57766:57766 Integers <> y var
R57752:57754 Integers Make shl def
R57758:57758 Integers <> n var
R57756:57756 Integers <> x var
R57773:57775 Integers Make shl def
R57786:57786 Integers <> n var
R57778:57779 Integers Make or def
R57783:57783 Integers <> y var
R57781:57781 Integers <> x var
R57835:57837 Coq.Init.Datatypes <> orb def
R57812:57828 Integers Make bitwise_binop_shl thm
R57835:57837 Coq.Init.Datatypes <> orb def
R57812:57828 Integers Make bitwise_binop_shl thm
R57846:57852 Integers Make bits_or thm
R57846:57852 Integers Make bits_or thm
prf 57875:57881 Make xor_shl
R57925:57927 Coq.Init.Logic <> :type_scope:x_'='_x not
R57902:57904 Integers Make xor def
R57917:57919 Integers Make shl def
R57923:57923 Integers <> n var
R57921:57921 Integers <> y var
R57907:57909 Integers Make shl def
R57913:57913 Integers <> n var
R57911:57911 Integers <> x var
R57928:57930 Integers Make shl def
R57942:57942 Integers <> n var
R57933:57935 Integers Make xor def
R57939:57939 Integers <> y var
R57937:57937 Integers <> x var
R57991:57994 Coq.Init.Datatypes <> xorb def
R57968:57984 Integers Make bitwise_binop_shl thm
R57991:57994 Coq.Init.Datatypes <> xorb def
R57968:57984 Integers Make bitwise_binop_shl thm
R58003:58010 Integers Make bits_xor thm
R58003:58010 Integers Make bits_xor thm
prf 58031:58037 Make ltu_inv
R58073:58076 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R58087:58089 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R58077:58084 Integers Make unsigned def
R58086:58086 Integers <> x var
R58077:58084 Integers Make unsigned def
R58086:58086 Integers <> x var
R58090:58097 Integers Make unsigned def
R58099:58099 Integers <> y var
R58061:58063 Coq.Init.Logic <> :type_scope:x_'='_x not
R58054:58056 Integers Make ltu def
R58060:58060 Integers <> y var
R58058:58058 Integers <> x var
R58064:58067 Coq.Init.Datatypes <> true constr
R58118:58120 Integers Make ltu def
R58141:58143 Coqlib <> zlt def
R58159:58166 Integers Make unsigned def
R58146:58153 Integers Make unsigned def
R58141:58143 Coqlib <> zlt def
R58159:58166 Integers Make unsigned def
R58146:58153 Integers Make unsigned def
R58200:58213 Integers Make unsigned_range thm
R58200:58213 Integers Make unsigned_range thm
prf 58254:58270 Make ltu_iwordsize_inv
R58312:58315 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R58326:58328 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R58316:58323 Integers Make unsigned def
R58325:58325 Integers <> x var
R58316:58323 Integers Make unsigned def
R58325:58325 Integers <> x var
R58329:58337 Integers Make zwordsize def
R58300:58302 Coq.Init.Logic <> :type_scope:x_'='_x not
R58285:58287 Integers Make ltu def
R58291:58299 Integers Make iwordsize def
R58289:58289 Integers <> x var
R58303:58306 Coq.Init.Datatypes <> true constr
R58369:58375 Integers Make ltu_inv thm
R58369:58375 Integers Make ltu_inv thm
R58393:58414 Integers Make unsigned_repr_wordsize thm
R58393:58414 Integers Make unsigned_repr_wordsize thm
prf 58437:58443 Make shl_shl
R58572:58574 Coq.Init.Logic <> :type_scope:x_'='_x not
R58557:58559 Integers Make shl def
R58571:58571 Integers <> z var
R58562:58564 Integers Make shl def
R58568:58568 Integers <> y var
R58566:58566 Integers <> x var
R58575:58577 Integers Make shl def
R58582:58584 Integers Make add def
R58588:58588 Integers <> z var
R58586:58586 Integers <> y var
R58579:58579 Integers <> x var
R58544:58546 Coq.Init.Logic <> :type_scope:x_'='_x not
R58521:58523 Integers Make ltu def
R58535:58543 Integers Make iwordsize def
R58526:58528 Integers Make add def
R58532:58532 Integers <> z var
R58530:58530 Integers <> y var
R58547:58550 Coq.Init.Datatypes <> true constr
R58508:58510 Coq.Init.Logic <> :type_scope:x_'='_x not
R58493:58495 Integers Make ltu def
R58499:58507 Integers Make iwordsize def
R58497:58497 Integers <> z var
R58511:58514 Coq.Init.Datatypes <> true constr
R58479:58481 Coq.Init.Logic <> :type_scope:x_'='_x not
R58464:58466 Integers Make ltu def
R58470:58478 Integers Make iwordsize def
R58468:58468 Integers <> y var
R58482:58485 Coq.Init.Datatypes <> true constr
R58624:58640 Integers Make ltu_iwordsize_inv thm
R58648:58664 Integers Make ltu_iwordsize_inv thm
R58624:58640 Integers Make ltu_iwordsize_inv thm
R58648:58664 Integers Make ltu_iwordsize_inv thm
R58709:58711 Coq.Init.Logic <> :type_scope:x_'='_x not
R58691:58698 Integers Make unsigned def
R58701:58703 Integers Make add def
R58722:58724 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R58712:58719 Integers Make unsigned def
R58725:58732 Integers Make unsigned def
R58709:58711 Coq.Init.Logic <> :type_scope:x_'='_x not
R58691:58698 Integers Make unsigned def
R58701:58703 Integers Make add def
R58722:58724 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R58712:58719 Integers Make unsigned def
R58725:58732 Integers Make unsigned def
R58749:58751 Integers Make add def
R58760:58772 Integers Make unsigned_repr thm
R58760:58772 Integers Make unsigned_repr thm
R58791:58815 Integers Make two_wordsize_max_unsigned thm
R58791:58815 Integers Make two_wordsize_max_unsigned thm
R58833:58844 Integers Make same_bits_eq thm
R58833:58844 Integers Make same_bits_eq thm
R58866:58873 Integers Make bits_shl thm
R58866:58873 Integers Make bits_shl thm
R58894:58896 Coqlib <> zlt def
R58901:58908 Integers Make unsigned def
R58894:58896 Coqlib <> zlt def
R58901:58908 Integers Make unsigned def
R58927:58934 Integers Make bits_shl thm
R58927:58934 Integers Make bits_shl thm
R58951:58958 Coqlib <> zlt_true thm
R58951:58958 Coqlib <> zlt_true thm
R58986:58993 Integers Make bits_shl thm
R58986:58993 Integers Make bits_shl thm
R59006:59008 Coqlib <> zlt def
R59028:59035 Integers Make unsigned def
R59012:59014 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R59015:59022 Integers Make unsigned def
R59006:59008 Coqlib <> zlt def
R59028:59035 Integers Make unsigned def
R59012:59014 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R59015:59022 Integers Make unsigned def
R59056:59063 Integers Make bits_shl thm
R59056:59063 Integers Make bits_shl thm
R59080:59087 Coqlib <> zlt_true thm
R59080:59087 Coqlib <> zlt_true thm
R59118:59125 Integers Make bits_shl thm
R59118:59125 Integers Make bits_shl thm
R59142:59150 Coqlib <> zlt_false thm
R59142:59150 Coqlib <> zlt_false thm
prf 59203:59211 Make shru_zero
R59235:59237 Coq.Init.Logic <> :type_scope:x_'='_x not
R59224:59227 Integers Make shru def
R59231:59234 Integers Make zero def
R59229:59229 Integers <> x var
R59238:59238 Integers <> x var
R59269:59281 Integers Make unsigned_zero thm
R59269:59281 Integers Make unsigned_zero thm
R59292:59299 Coqlib <> zlt_true thm
R59292:59299 Coqlib <> zlt_true thm
prf 59337:59354 Make bitwise_binop_shru
R59525:59527 Coq.Init.Logic <> :type_scope:x_'='_x not
R59502:59502 Integers <> f var
R59516:59519 Integers Make shru def
R59523:59523 Integers <> n var
R59521:59521 Integers <> y var
R59505:59508 Integers Make shru def
R59512:59512 Integers <> n var
R59510:59510 Integers <> x var
R59528:59531 Integers Make shru def
R59541:59541 Integers <> n var
R59534:59534 Integers <> f var
R59538:59538 Integers <> y var
R59536:59536 Integers <> x var
R59488:59490 Coq.Init.Logic <> :type_scope:x_'='_x not
R59474:59475 Integers <> f' var
R59483:59487 Coq.Init.Datatypes <> false constr
R59477:59481 Coq.Init.Datatypes <> false constr
R59491:59495 Coq.Init.Datatypes <> false constr
R59434:59436 Coq.Init.Logic <> :type_scope:x_'='_x not
R59417:59423 Integers Make testbit def
R59433:59433 Integers <> i var
R59426:59426 Integers <> f var
R59430:59430 Integers <> y var
R59428:59428 Integers <> x var
R59437:59438 Integers <> f' var
R59455:59461 Integers Make testbit def
R59465:59465 Integers <> i var
R59463:59463 Integers <> y var
R59441:59447 Integers Make testbit def
R59451:59451 Integers <> i var
R59449:59449 Integers <> x var
R59396:59399 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R59401:59403 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R59400:59400 Integers <> i var
R59400:59400 Integers <> i var
R59404:59412 Integers Make zwordsize def
R59567:59578 Integers Make same_bits_eq thm
R59567:59578 Integers Make same_bits_eq thm
R59618:59626 Integers Make bits_shru thm
R59618:59626 Integers Make bits_shru thm
R59618:59626 Integers Make bits_shru thm
R59618:59626 Integers Make bits_shru thm
R59618:59626 Integers Make bits_shru thm
R59647:59649 Coqlib <> zlt def
R59668:59676 Integers Make zwordsize def
R59653:59655 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R59656:59663 Integers Make unsigned def
R59647:59649 Coqlib <> zlt def
R59668:59676 Integers Make zwordsize def
R59653:59655 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R59656:59663 Integers Make unsigned def
R59717:59730 Integers Make unsigned_range thm
R59717:59730 Integers Make unsigned_range thm
prf 59758:59765 Make and_shru
R59811:59813 Coq.Init.Logic <> :type_scope:x_'='_x not
R59786:59788 Integers Make and def
R59802:59805 Integers Make shru def
R59809:59809 Integers <> n var
R59807:59807 Integers <> y var
R59791:59794 Integers Make shru def
R59798:59798 Integers <> n var
R59796:59796 Integers <> x var
R59814:59817 Integers Make shru def
R59829:59829 Integers <> n var
R59820:59822 Integers Make and def
R59826:59826 Integers <> y var
R59824:59824 Integers <> x var
R59879:59882 Coq.Init.Datatypes <> andb def
R59855:59872 Integers Make bitwise_binop_shru thm
R59879:59882 Coq.Init.Datatypes <> andb def
R59855:59872 Integers Make bitwise_binop_shru thm
R59897:59904 Integers Make bits_and thm
R59897:59904 Integers Make bits_and thm
prf 59921:59927 Make or_shru
R59972:59974 Coq.Init.Logic <> :type_scope:x_'='_x not
R59948:59949 Integers Make or def
R59963:59966 Integers Make shru def
R59970:59970 Integers <> n var
R59968:59968 Integers <> y var
R59952:59955 Integers Make shru def
R59959:59959 Integers <> n var
R59957:59957 Integers <> x var
R59975:59978 Integers Make shru def
R59989:59989 Integers <> n var
R59981:59982 Integers Make or def
R59986:59986 Integers <> y var
R59984:59984 Integers <> x var
R60039:60041 Coq.Init.Datatypes <> orb def
R60015:60032 Integers Make bitwise_binop_shru thm
R60039:60041 Coq.Init.Datatypes <> orb def
R60015:60032 Integers Make bitwise_binop_shru thm
R60056:60062 Integers Make bits_or thm
R60056:60062 Integers Make bits_or thm
prf 60079:60086 Make xor_shru
R60132:60134 Coq.Init.Logic <> :type_scope:x_'='_x not
R60107:60109 Integers Make xor def
R60123:60126 Integers Make shru def
R60130:60130 Integers <> n var
R60128:60128 Integers <> y var
R60112:60115 Integers Make shru def
R60119:60119 Integers <> n var
R60117:60117 Integers <> x var
R60135:60138 Integers Make shru def
R60150:60150 Integers <> n var
R60141:60143 Integers Make xor def
R60147:60147 Integers <> y var
R60145:60145 Integers <> x var
R60200:60203 Coq.Init.Datatypes <> xorb def
R60176:60193 Integers Make bitwise_binop_shru thm
R60200:60203 Coq.Init.Datatypes <> xorb def
R60176:60193 Integers Make bitwise_binop_shru thm
R60218:60225 Integers Make bits_xor thm
R60218:60225 Integers Make bits_xor thm
prf 60242:60250 Make shru_shru
R60381:60383 Coq.Init.Logic <> :type_scope:x_'='_x not
R60364:60367 Integers Make shru def
R60380:60380 Integers <> z var
R60370:60373 Integers Make shru def
R60377:60377 Integers <> y var
R60375:60375 Integers <> x var
R60384:60387 Integers Make shru def
R60392:60394 Integers Make add def
R60398:60398 Integers <> z var
R60396:60396 Integers <> y var
R60389:60389 Integers <> x var
R60351:60353 Coq.Init.Logic <> :type_scope:x_'='_x not
R60328:60330 Integers Make ltu def
R60342:60350 Integers Make iwordsize def
R60333:60335 Integers Make add def
R60339:60339 Integers <> z var
R60337:60337 Integers <> y var
R60354:60357 Coq.Init.Datatypes <> true constr
R60315:60317 Coq.Init.Logic <> :type_scope:x_'='_x not
R60300:60302 Integers Make ltu def
R60306:60314 Integers Make iwordsize def
R60304:60304 Integers <> z var
R60318:60321 Coq.Init.Datatypes <> true constr
R60286:60288 Coq.Init.Logic <> :type_scope:x_'='_x not
R60271:60273 Integers Make ltu def
R60277:60285 Integers Make iwordsize def
R60275:60275 Integers <> y var
R60289:60292 Coq.Init.Datatypes <> true constr
R60433:60449 Integers Make ltu_iwordsize_inv thm
R60457:60473 Integers Make ltu_iwordsize_inv thm
R60433:60449 Integers Make ltu_iwordsize_inv thm
R60457:60473 Integers Make ltu_iwordsize_inv thm
R60518:60520 Coq.Init.Logic <> :type_scope:x_'='_x not
R60500:60507 Integers Make unsigned def
R60510:60512 Integers Make add def
R60531:60533 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R60521:60528 Integers Make unsigned def
R60534:60541 Integers Make unsigned def
R60518:60520 Coq.Init.Logic <> :type_scope:x_'='_x not
R60500:60507 Integers Make unsigned def
R60510:60512 Integers Make add def
R60531:60533 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R60521:60528 Integers Make unsigned def
R60534:60541 Integers Make unsigned def
R60558:60560 Integers Make add def
R60569:60581 Integers Make unsigned_repr thm
R60569:60581 Integers Make unsigned_repr thm
R60600:60624 Integers Make two_wordsize_max_unsigned thm
R60600:60624 Integers Make two_wordsize_max_unsigned thm
R60642:60653 Integers Make same_bits_eq thm
R60642:60653 Integers Make same_bits_eq thm
R60675:60683 Integers Make bits_shru thm
R60675:60683 Integers Make bits_shru thm
R60704:60706 Coqlib <> zlt def
R60725:60733 Integers Make zwordsize def
R60710:60712 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R60713:60720 Integers Make unsigned def
R60704:60706 Coqlib <> zlt def
R60725:60733 Integers Make zwordsize def
R60710:60712 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R60713:60720 Integers Make unsigned def
R60749:60757 Integers Make bits_shru thm
R60749:60757 Integers Make bits_shru thm
R60770:60772 Coqlib <> zlt def
R60804:60812 Integers Make zwordsize def
R60789:60791 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R60776:60778 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R60779:60786 Integers Make unsigned def
R60792:60799 Integers Make unsigned def
R60770:60772 Coqlib <> zlt def
R60804:60812 Integers Make zwordsize def
R60789:60791 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R60776:60778 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R60779:60786 Integers Make unsigned def
R60792:60799 Integers Make unsigned def
R60830:60838 Integers Make bits_shru thm
R60830:60838 Integers Make bits_shru thm
R60855:60862 Coqlib <> zlt_true thm
R60855:60862 Coqlib <> zlt_true thm
R60904:60912 Integers Make bits_shru thm
R60904:60912 Integers Make bits_shru thm
R60929:60937 Coqlib <> zlt_false thm
R60929:60937 Coqlib <> zlt_false thm
R60979:60987 Integers Make bits_shru thm
R60979:60987 Integers Make bits_shru thm
R61004:61012 Coqlib <> zlt_false thm
R61004:61012 Coqlib <> zlt_false thm
prf 61042:61049 Make shr_zero
R61072:61074 Coq.Init.Logic <> :type_scope:x_'='_x not
R61062:61064 Integers Make shr def
R61068:61071 Integers Make zero def
R61066:61066 Integers <> x var
R61075:61075 Integers <> x var
R61106:61118 Integers Make unsigned_zero thm
R61106:61118 Integers Make unsigned_zero thm
R61129:61136 Coqlib <> zlt_true thm
R61129:61136 Coqlib <> zlt_true thm
prf 61174:61190 Make bitwise_binop_shr
R61331:61333 Coq.Init.Logic <> :type_scope:x_'='_x not
R61310:61310 Integers <> f var
R61323:61325 Integers Make shr def
R61329:61329 Integers <> n var
R61327:61327 Integers <> y var
R61313:61315 Integers Make shr def
R61319:61319 Integers <> n var
R61317:61317 Integers <> x var
R61334:61336 Integers Make shr def
R61346:61346 Integers <> n var
R61339:61339 Integers <> f var
R61343:61343 Integers <> y var
R61341:61341 Integers <> x var
R61270:61272 Coq.Init.Logic <> :type_scope:x_'='_x not
R61253:61259 Integers Make testbit def
R61269:61269 Integers <> i var
R61262:61262 Integers <> f var
R61266:61266 Integers <> y var
R61264:61264 Integers <> x var
R61273:61274 Integers <> f' var
R61291:61297 Integers Make testbit def
R61301:61301 Integers <> i var
R61299:61299 Integers <> y var
R61277:61283 Integers Make testbit def
R61287:61287 Integers <> i var
R61285:61285 Integers <> x var
R61232:61235 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R61237:61239 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R61236:61236 Integers <> i var
R61236:61236 Integers <> i var
R61240:61248 Integers Make zwordsize def
R61372:61383 Integers Make same_bits_eq thm
R61372:61383 Integers Make same_bits_eq thm
R61423:61430 Integers Make bits_shr thm
R61423:61430 Integers Make bits_shr thm
R61423:61430 Integers Make bits_shr thm
R61423:61430 Integers Make bits_shr thm
R61423:61430 Integers Make bits_shr thm
R61471:61473 Coqlib <> zlt def
R61492:61500 Integers Make zwordsize def
R61477:61479 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R61480:61487 Integers Make unsigned def
R61471:61473 Coqlib <> zlt def
R61492:61500 Integers Make zwordsize def
R61477:61479 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R61480:61487 Integers Make unsigned def
R61519:61532 Integers Make unsigned_range thm
R61519:61532 Integers Make unsigned_range thm
prf 61568:61574 Make and_shr
R61618:61620 Coq.Init.Logic <> :type_scope:x_'='_x not
R61595:61597 Integers Make and def
R61610:61612 Integers Make shr def
R61616:61616 Integers <> n var
R61614:61614 Integers <> y var
R61600:61602 Integers Make shr def
R61606:61606 Integers <> n var
R61604:61604 Integers <> x var
R61621:61623 Integers Make shr def
R61635:61635 Integers <> n var
R61626:61628 Integers Make and def
R61632:61632 Integers <> y var
R61630:61630 Integers <> x var
R61684:61687 Coq.Init.Datatypes <> andb def
R61661:61677 Integers Make bitwise_binop_shr thm
R61684:61687 Coq.Init.Datatypes <> andb def
R61661:61677 Integers Make bitwise_binop_shr thm
R61696:61703 Integers Make bits_and thm
R61696:61703 Integers Make bits_and thm
prf 61720:61725 Make or_shr
R61768:61770 Coq.Init.Logic <> :type_scope:x_'='_x not
R61746:61747 Integers Make or def
R61760:61762 Integers Make shr def
R61766:61766 Integers <> n var
R61764:61764 Integers <> y var
R61750:61752 Integers Make shr def
R61756:61756 Integers <> n var
R61754:61754 Integers <> x var
R61771:61773 Integers Make shr def
R61784:61784 Integers <> n var
R61776:61777 Integers Make or def
R61781:61781 Integers <> y var
R61779:61779 Integers <> x var
R61833:61835 Coq.Init.Datatypes <> orb def
R61810:61826 Integers Make bitwise_binop_shr thm
R61833:61835 Coq.Init.Datatypes <> orb def
R61810:61826 Integers Make bitwise_binop_shr thm
R61844:61850 Integers Make bits_or thm
R61844:61850 Integers Make bits_or thm
prf 61867:61873 Make xor_shr
R61917:61919 Coq.Init.Logic <> :type_scope:x_'='_x not
R61894:61896 Integers Make xor def
R61909:61911 Integers Make shr def
R61915:61915 Integers <> n var
R61913:61913 Integers <> y var
R61899:61901 Integers Make shr def
R61905:61905 Integers <> n var
R61903:61903 Integers <> x var
R61920:61922 Integers Make shr def
R61934:61934 Integers <> n var
R61925:61927 Integers Make xor def
R61931:61931 Integers <> y var
R61929:61929 Integers <> x var
R61983:61986 Coq.Init.Datatypes <> xorb def
R61960:61976 Integers Make bitwise_binop_shr thm
R61983:61986 Coq.Init.Datatypes <> xorb def
R61960:61976 Integers Make bitwise_binop_shr thm
R61995:62002 Integers Make bits_xor thm
R61995:62002 Integers Make bits_xor thm
prf 62019:62025 Make shr_shr
R62154:62156 Coq.Init.Logic <> :type_scope:x_'='_x not
R62139:62141 Integers Make shr def
R62153:62153 Integers <> z var
R62144:62146 Integers Make shr def
R62150:62150 Integers <> y var
R62148:62148 Integers <> x var
R62157:62159 Integers Make shr def
R62164:62166 Integers Make add def
R62170:62170 Integers <> z var
R62168:62168 Integers <> y var
R62161:62161 Integers <> x var
R62126:62128 Coq.Init.Logic <> :type_scope:x_'='_x not
R62103:62105 Integers Make ltu def
R62117:62125 Integers Make iwordsize def
R62108:62110 Integers Make add def
R62114:62114 Integers <> z var
R62112:62112 Integers <> y var
R62129:62132 Coq.Init.Datatypes <> true constr
R62090:62092 Coq.Init.Logic <> :type_scope:x_'='_x not
R62075:62077 Integers Make ltu def
R62081:62089 Integers Make iwordsize def
R62079:62079 Integers <> z var
R62093:62096 Coq.Init.Datatypes <> true constr
R62061:62063 Coq.Init.Logic <> :type_scope:x_'='_x not
R62046:62048 Integers Make ltu def
R62052:62060 Integers Make iwordsize def
R62050:62050 Integers <> y var
R62064:62067 Coq.Init.Datatypes <> true constr
R62205:62221 Integers Make ltu_iwordsize_inv thm
R62229:62245 Integers Make ltu_iwordsize_inv thm
R62205:62221 Integers Make ltu_iwordsize_inv thm
R62229:62245 Integers Make ltu_iwordsize_inv thm
R62290:62292 Coq.Init.Logic <> :type_scope:x_'='_x not
R62272:62279 Integers Make unsigned def
R62282:62284 Integers Make add def
R62303:62305 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R62293:62300 Integers Make unsigned def
R62306:62313 Integers Make unsigned def
R62290:62292 Coq.Init.Logic <> :type_scope:x_'='_x not
R62272:62279 Integers Make unsigned def
R62282:62284 Integers Make add def
R62303:62305 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R62293:62300 Integers Make unsigned def
R62306:62313 Integers Make unsigned def
R62330:62332 Integers Make add def
R62341:62353 Integers Make unsigned_repr thm
R62341:62353 Integers Make unsigned_repr thm
R62372:62396 Integers Make two_wordsize_max_unsigned thm
R62372:62396 Integers Make two_wordsize_max_unsigned thm
R62414:62425 Integers Make same_bits_eq thm
R62414:62425 Integers Make same_bits_eq thm
R62448:62455 Integers Make bits_shr thm
R62448:62455 Integers Make bits_shr thm
R62448:62455 Integers Make bits_shr thm
R62448:62455 Integers Make bits_shr thm
R62448:62455 Integers Make bits_shr thm
R62485:62487 Coqlib <> zlt def
R62506:62514 Integers Make zwordsize def
R62491:62493 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R62494:62501 Integers Make unsigned def
R62485:62487 Coqlib <> zlt def
R62506:62514 Integers Make zwordsize def
R62491:62493 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R62494:62501 Integers Make unsigned def
R62542:62545 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R62569:62569 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R62556:62558 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R62546:62553 Integers Make unsigned def
R62559:62566 Integers Make unsigned def
R62592:62594 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R62579:62581 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R62582:62589 Integers Make unsigned def
R62595:62602 Integers Make unsigned def
R62592:62594 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R62579:62581 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R62582:62589 Integers Make unsigned def
R62595:62602 Integers Make unsigned def
R62542:62545 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R62569:62569 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R62556:62558 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R62546:62553 Integers Make unsigned def
R62559:62566 Integers Make unsigned def
R62635:62643 Coqlib <> zlt_false thm
R62649:62651 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R62652:62659 Integers Make unsigned def
R62662:62664 Integers Make add def
R62635:62643 Coqlib <> zlt_false thm
R62649:62651 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R62652:62659 Integers Make unsigned def
R62662:62664 Integers Make add def
R62686:62688 Coqlib <> zlt def
R62719:62727 Integers Make zwordsize def
R62704:62706 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R62700:62702 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R62691:62699 Integers Make zwordsize def
R62707:62714 Integers Make unsigned def
R62686:62688 Coqlib <> zlt def
R62719:62727 Integers Make zwordsize def
R62704:62706 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R62700:62702 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R62691:62699 Integers Make zwordsize def
R62707:62714 Integers Make unsigned def
R62760:62762 Coqlib <> zlt def
R62781:62789 Integers Make zwordsize def
R62766:62768 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R62769:62776 Integers Make unsigned def
R62760:62762 Coqlib <> zlt def
R62781:62789 Integers Make zwordsize def
R62766:62768 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R62769:62776 Integers Make unsigned def
prf 62814:62825 Make and_shr_shru
R62870:62872 Coq.Init.Logic <> :type_scope:x_'='_x not
R62846:62848 Integers Make and def
R62861:62864 Integers Make shru def
R62868:62868 Integers <> z var
R62866:62866 Integers <> y var
R62851:62853 Integers Make shr def
R62857:62857 Integers <> z var
R62855:62855 Integers <> x var
R62873:62876 Integers Make shru def
R62888:62888 Integers <> z var
R62879:62881 Integers Make and def
R62885:62885 Integers <> y var
R62883:62883 Integers <> x var
R62914:62925 Integers Make same_bits_eq thm
R62914:62925 Integers Make same_bits_eq thm
R62946:62953 Integers Make bits_and thm
R62946:62953 Integers Make bits_and thm
R62970:62977 Integers Make bits_shr thm
R62970:62977 Integers Make bits_shr thm
R62995:63003 Integers Make bits_shru thm
R62995:63003 Integers Make bits_shru thm
R62995:63003 Integers Make bits_shru thm
R62995:63003 Integers Make bits_shru thm
R63024:63026 Coqlib <> zlt def
R63045:63053 Integers Make zwordsize def
R63030:63032 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R63033:63040 Integers Make unsigned def
R63024:63026 Coqlib <> zlt def
R63045:63053 Integers Make zwordsize def
R63030:63032 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R63033:63040 Integers Make unsigned def
R63069:63076 Integers Make bits_and thm
R63069:63076 Integers Make bits_and thm
R63097:63110 Integers Make unsigned_range thm
R63097:63110 Integers Make unsigned_range thm
R63133:63144 Coq.Bool.Bool <> andb_false_r thm
R63133:63144 Coq.Bool.Bool <> andb_false_r thm
prf 63161:63176 Make shr_and_shru_and
R63238:63240 Coq.Init.Logic <> :type_scope:x_'='_x not
R63223:63225 Integers Make and def
R63237:63237 Integers <> z var
R63228:63230 Integers Make shr def
R63234:63234 Integers <> y var
R63232:63232 Integers <> x var
R63241:63243 Integers Make and def
R63256:63256 Integers <> z var
R63246:63249 Integers Make shru def
R63253:63253 Integers <> y var
R63251:63251 Integers <> x var
R63213:63215 Coq.Init.Logic <> :type_scope:x_'='_x not
R63197:63200 Integers Make shru def
R63212:63212 Integers <> y var
R63203:63205 Integers Make shl def
R63209:63209 Integers <> y var
R63207:63207 Integers <> z var
R63216:63216 Integers <> z var
R63304:63311 Integers Make and_shru thm
R63304:63311 Integers Make and_shru thm
R63322:63333 Integers Make and_shr_shru thm
R63322:63333 Integers Make and_shr_shru thm
prf 63356:63367 Make shru_lt_zero
R63413:63415 Coq.Init.Logic <> :type_scope:x_'='_x not
R63384:63387 Integers Make shru def
R63392:63395 Integers Make repr def
R63407:63409 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R63398:63406 Integers Make zwordsize def
R63389:63389 Integers <> x var
R63419:63420 Integers Make lt def
R63424:63427 Integers Make zero def
R63422:63422 Integers <> x var
R63443:63446 Integers Make zero def
R63434:63436 Integers Make one def
R63472:63483 Integers Make same_bits_eq thm
R63472:63483 Integers Make same_bits_eq thm
R63504:63512 Integers Make bits_shru thm
R63504:63512 Integers Make bits_shru thm
R63531:63543 Integers Make unsigned_repr thm
R63531:63543 Integers Make unsigned_repr thm
R63559:63561 Coqlib <> zeq def
R63559:63561 Coqlib <> zeq def
R63588:63596 Coq.ZArith.BinInt <> Zplus_0_l syndef
R63588:63596 Coq.ZArith.BinInt <> Zplus_0_l syndef
R63607:63614 Coqlib <> zlt_true thm
R63607:63614 Coqlib <> zlt_true thm
R63627:63646 Integers Make sign_bit_of_unsigned thm
R63627:63646 Integers Make sign_bit_of_unsigned thm
R63658:63659 Integers Make lt def
R63670:63680 Integers Make signed_zero thm
R63670:63680 Integers Make signed_zero thm
R63690:63695 Integers Make signed def
R63711:63713 Coqlib <> zlt def
R63728:63739 Integers Make half_modulus def
R63716:63723 Integers Make unsigned def
R63711:63713 Coqlib <> zlt def
R63728:63739 Integers Make half_modulus def
R63716:63723 Integers Make unsigned def
R63753:63761 Coqlib <> zlt_false thm
R63753:63761 Coqlib <> zlt_false thm
R63782:63795 Integers Make unsigned_range thm
R63782:63795 Integers Make unsigned_range thm
R63819:63826 Coqlib <> zlt_true thm
R63819:63826 Coqlib <> zlt_true thm
R63836:63838 Integers Make one def
R63849:63860 Integers Make testbit_repr thm
R63849:63860 Integers Make testbit_repr thm
R63884:63897 Integers Make unsigned_range thm
R63884:63897 Integers Make unsigned_range thm
R63930:63938 Coqlib <> zlt_false thm
R63930:63938 Coqlib <> zlt_false thm
R63950:63956 Integers Make testbit def
R63967:63977 Integers Make Ztestbit_eq thm
R63967:63977 Integers Make Ztestbit_eq thm
R63988:63996 Coqlib <> zeq_false thm
R63988:63996 Coqlib <> zeq_false thm
R64012:64013 Integers Make lt def
R64017:64020 Integers Make zero def
R64012:64013 Integers Make lt def
R64017:64020 Integers Make zero def
R64035:64046 Integers Make unsigned_one thm
R64035:64046 Integers Make unsigned_one thm
R64055:64060 Coq.ZArith.BinInt Z div2 def
R64055:64060 Coq.ZArith.BinInt Z div2 def
R64071:64083 Coq.ZArith.BinInt Z testbit_0_l thm
R64071:64083 Coq.ZArith.BinInt Z testbit_0_l thm
R64102:64114 Integers Make unsigned_zero thm
R64102:64114 Integers Make unsigned_zero thm
R64123:64128 Coq.ZArith.BinInt Z div2 def
R64123:64128 Coq.ZArith.BinInt Z div2 def
R64139:64151 Coq.ZArith.BinInt Z testbit_0_l thm
R64139:64151 Coq.ZArith.BinInt Z testbit_0_l thm
R64195:64215 Integers Make wordsize_max_unsigned thm
R64195:64215 Integers Make wordsize_max_unsigned thm
prf 64239:64249 Make shr_lt_zero
R64294:64296 Coq.Init.Logic <> :type_scope:x_'='_x not
R64266:64268 Integers Make shr def
R64273:64276 Integers Make repr def
R64288:64290 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R64279:64287 Integers Make zwordsize def
R64270:64270 Integers <> x var
R64300:64301 Integers Make lt def
R64305:64308 Integers Make zero def
R64303:64303 Integers <> x var
R64325:64328 Integers Make zero def
R64315:64318 Integers Make mone def
R64354:64365 Integers Make same_bits_eq thm
R64354:64365 Integers Make same_bits_eq thm
R64386:64393 Integers Make bits_shr thm
R64386:64393 Integers Make bits_shr thm
R64412:64424 Integers Make unsigned_repr thm
R64412:64424 Integers Make unsigned_repr thm
R64443:64449 Integers Make testbit def
R64463:64465 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R64454:64462 Integers Make zwordsize def
R64443:64449 Integers Make testbit def
R64463:64465 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R64454:64462 Integers Make zwordsize def
R64492:64494 Coqlib <> zlt def
R64518:64526 Integers Make zwordsize def
R64498:64501 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R64515:64515 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R64511:64513 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R64502:64510 Integers Make zwordsize def
R64492:64494 Coqlib <> zlt def
R64518:64526 Integers Make zwordsize def
R64498:64501 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R64515:64515 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R64511:64513 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R64502:64510 Integers Make zwordsize def
R64547:64566 Integers Make sign_bit_of_unsigned thm
R64547:64566 Integers Make sign_bit_of_unsigned thm
R64579:64580 Integers Make lt def
R64591:64601 Integers Make signed_zero thm
R64591:64601 Integers Make signed_zero thm
R64611:64616 Integers Make signed def
R64632:64634 Coqlib <> zlt def
R64649:64660 Integers Make half_modulus def
R64637:64644 Integers Make unsigned def
R64632:64634 Coqlib <> zlt def
R64649:64660 Integers Make half_modulus def
R64637:64644 Integers Make unsigned def
R64674:64682 Coqlib <> zlt_false thm
R64674:64682 Coqlib <> zlt_false thm
R64693:64701 Integers Make bits_zero thm
R64693:64701 Integers Make bits_zero thm
R64722:64735 Integers Make unsigned_range thm
R64722:64735 Integers Make unsigned_range thm
R64759:64766 Coqlib <> zlt_true thm
R64759:64766 Coqlib <> zlt_true thm
R64777:64785 Integers Make bits_mone thm
R64777:64785 Integers Make bits_mone thm
R64806:64819 Integers Make unsigned_range thm
R64806:64819 Integers Make unsigned_range thm
R64845:64865 Integers Make wordsize_max_unsigned thm
R64845:64865 Integers Make wordsize_max_unsigned thm
prf 64922:64929 Make bits_rol
R64994:64996 Coq.Init.Logic <> :type_scope:x_'='_x not
R64975:64981 Integers Make testbit def
R64993:64993 Integers <> i var
R64984:64986 Integers Make rol def
R64990:64990 Integers <> y var
R64988:64988 Integers <> x var
R64997:65003 Integers Make testbit def
R65008:65008 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R65023:65028 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R65010:65012 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R65009:65009 Integers <> i var
R65013:65020 Integers Make unsigned def
R65022:65022 Integers <> y var
R65029:65037 Integers Make zwordsize def
R65005:65005 Integers <> x var
R64952:64955 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R64957:64959 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R64956:64956 Integers <> i var
R64956:64956 Integers <> i var
R64960:64968 Integers Make zwordsize def
R65065:65067 Integers Make rol def
R65081:65092 Coq.ZArith.Zdiv <> Z_div_mod_eq thm
R65107:65115 Integers Make zwordsize def
R65095:65102 Integers Make unsigned def
R65081:65092 Coq.ZArith.Zdiv <> Z_div_mod_eq thm
R65107:65115 Integers Make zwordsize def
R65095:65102 Integers Make unsigned def
R65125:65136 Integers Make wordsize_pos thm
R65125:65136 Integers Make wordsize_pos thm
R65162:65166 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R65152:65159 Integers Make unsigned def
R65167:65175 Integers Make zwordsize def
R65162:65166 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R65152:65159 Integers Make unsigned def
R65167:65175 Integers Make zwordsize def
R65199:65201 Coq.ZArith.BinInt <> :Z_scope:x_'/'_x not
R65189:65196 Integers Make unsigned def
R65202:65210 Integers Make zwordsize def
R65199:65201 Coq.ZArith.BinInt <> :Z_scope:x_'/'_x not
R65189:65196 Integers Make unsigned def
R65202:65210 Integers Make zwordsize def
R65239:65246 Coq.ZArith.Zdiv <> Z_mod_lt thm
R65261:65269 Integers Make zwordsize def
R65249:65256 Integers Make unsigned def
R65239:65246 Coq.ZArith.Zdiv <> Z_mod_lt thm
R65261:65269 Integers Make zwordsize def
R65249:65256 Integers Make unsigned def
R65279:65290 Integers Make wordsize_pos thm
R65279:65290 Integers Make wordsize_pos thm
R65328:65339 Integers Make testbit_repr thm
R65328:65339 Integers Make testbit_repr thm
R65358:65367 Coq.ZArith.BinInt Z lor_spec thm
R65358:65367 Coq.ZArith.BinInt Z lor_spec thm
R65378:65390 Coq.ZArith.BinInt Z shiftr_spec thm
R65378:65390 Coq.ZArith.BinInt Z shiftr_spec thm
R65416:65418 Coqlib <> zlt def
R65416:65418 Coqlib <> zlt def
R65438:65454 Coq.ZArith.BinInt Z shiftl_spec_low thm
R65438:65454 Coq.ZArith.BinInt Z shiftl_spec_low thm
R65481:65487 Integers Make testbit def
R65539:65541 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R65537:65537 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R65519:65529 Coqlib <> Zmod_unique thm
R65539:65541 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R65537:65537 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R65519:65529 Coqlib <> Zmod_unique thm
R65591:65608 Coq.ZArith.BinInt Z shiftl_spec_high thm
R65591:65608 Coq.ZArith.BinInt Z shiftl_spec_high thm
R65621:65627 Integers Make testbit def
R65633:65636 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R65650:65650 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R65646:65648 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R65637:65645 Integers Make zwordsize def
R65621:65627 Integers Make testbit def
R65633:65636 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R65650:65650 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R65646:65648 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R65637:65645 Integers Make zwordsize def
R65667:65676 Integers Make bits_above thm
R65667:65676 Integers Make bits_above thm
R65687:65697 Coq.Bool.Bool <> orb_false_r thm
R65687:65697 Coq.Bool.Bool <> orb_false_r thm
R65710:65716 Integers Make testbit def
R65722:65724 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R65710:65716 Integers Make testbit def
R65722:65724 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R65777:65777 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R65759:65769 Coqlib <> Zmod_unique thm
R65777:65777 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R65759:65769 Coqlib <> Zmod_unique thm
prf 65850:65857 Make bits_ror
R65921:65923 Coq.Init.Logic <> :type_scope:x_'='_x not
R65902:65908 Integers Make testbit def
R65920:65920 Integers <> i var
R65911:65913 Integers Make ror def
R65917:65917 Integers <> y var
R65915:65915 Integers <> x var
R65924:65930 Integers Make testbit def
R65935:65935 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R65950:65955 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R65937:65939 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R65936:65936 Integers <> i var
R65940:65947 Integers Make unsigned def
R65949:65949 Integers <> y var
R65956:65964 Integers Make zwordsize def
R65932:65932 Integers <> x var
R65879:65882 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R65884:65886 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R65883:65883 Integers <> i var
R65883:65883 Integers <> i var
R65887:65895 Integers Make zwordsize def
R65992:65994 Integers Make ror def
R66008:66019 Coq.ZArith.Zdiv <> Z_div_mod_eq thm
R66034:66042 Integers Make zwordsize def
R66022:66029 Integers Make unsigned def
R66008:66019 Coq.ZArith.Zdiv <> Z_div_mod_eq thm
R66034:66042 Integers Make zwordsize def
R66022:66029 Integers Make unsigned def
R66052:66063 Integers Make wordsize_pos thm
R66052:66063 Integers Make wordsize_pos thm
R66089:66093 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R66079:66086 Integers Make unsigned def
R66094:66102 Integers Make zwordsize def
R66089:66093 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R66079:66086 Integers Make unsigned def
R66094:66102 Integers Make zwordsize def
R66126:66128 Coq.ZArith.BinInt <> :Z_scope:x_'/'_x not
R66116:66123 Integers Make unsigned def
R66129:66137 Integers Make zwordsize def
R66126:66128 Coq.ZArith.BinInt <> :Z_scope:x_'/'_x not
R66116:66123 Integers Make unsigned def
R66129:66137 Integers Make zwordsize def
R66166:66173 Coq.ZArith.Zdiv <> Z_mod_lt thm
R66188:66196 Integers Make zwordsize def
R66176:66183 Integers Make unsigned def
R66166:66173 Coq.ZArith.Zdiv <> Z_mod_lt thm
R66188:66196 Integers Make zwordsize def
R66176:66183 Integers Make unsigned def
R66206:66217 Integers Make wordsize_pos thm
R66206:66217 Integers Make wordsize_pos thm
R66255:66266 Integers Make testbit_repr thm
R66255:66266 Integers Make testbit_repr thm
R66285:66294 Coq.ZArith.BinInt Z lor_spec thm
R66285:66294 Coq.ZArith.BinInt Z lor_spec thm
R66305:66317 Coq.ZArith.BinInt Z shiftr_spec thm
R66305:66317 Coq.ZArith.BinInt Z shiftr_spec thm
R66343:66345 Coqlib <> zlt def
R66355:66363 Integers Make zwordsize def
R66349:66351 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R66343:66345 Coqlib <> zlt def
R66355:66363 Integers Make zwordsize def
R66349:66351 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R66379:66395 Coq.ZArith.BinInt Z shiftl_spec_low thm
R66379:66395 Coq.ZArith.BinInt Z shiftl_spec_low thm
R66412:66422 Coq.Bool.Bool <> orb_false_r thm
R66412:66422 Coq.Bool.Bool <> orb_false_r thm
R66437:66443 Integers Make testbit def
R66475:66485 Coqlib <> Zmod_unique thm
R66475:66485 Coqlib <> Zmod_unique thm
R66547:66564 Coq.ZArith.BinInt Z shiftl_spec_high thm
R66547:66564 Coq.ZArith.BinInt Z shiftl_spec_high thm
R66577:66583 Integers Make testbit def
R66589:66591 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R66577:66583 Integers Make testbit def
R66589:66591 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R66610:66619 Integers Make bits_above thm
R66610:66619 Integers Make bits_above thm
R66641:66647 Integers Make testbit def
R66699:66701 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R66680:66690 Coqlib <> Zmod_unique thm
R66699:66701 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R66680:66690 Coqlib <> Zmod_unique thm
R66781:66788 Integers Make bits_rol thm
R66790:66797 Integers Make bits_ror thm
prf 66815:66822 Make shl_rolm
R66876:66878 Coq.Init.Logic <> :type_scope:x_'='_x not
R66869:66871 Integers Make shl def
R66875:66875 Integers <> n var
R66873:66873 Integers <> x var
R66879:66882 Integers Make rolm def
R66889:66891 Integers Make shl def
R66898:66898 Integers <> n var
R66893:66896 Integers Make mone def
R66886:66886 Integers <> n var
R66884:66884 Integers <> x var
R66856:66858 Coq.Init.Logic <> :type_scope:x_'='_x not
R66841:66843 Integers Make ltu def
R66847:66855 Integers Make iwordsize def
R66845:66845 Integers <> n var
R66859:66862 Coq.Init.Datatypes <> true constr
R66931:66937 Integers Make ltu_inv thm
R66931:66937 Integers Make ltu_inv thm
R66955:66976 Integers Make unsigned_repr_wordsize thm
R66955:66976 Integers Make unsigned_repr_wordsize thm
R66996:66999 Integers Make rolm def
R67008:67019 Integers Make same_bits_eq thm
R67008:67019 Integers Make same_bits_eq thm
R67041:67048 Integers Make bits_and thm
R67041:67048 Integers Make bits_and thm
R67066:67073 Integers Make bits_shl thm
R67066:67073 Integers Make bits_shl thm
R67066:67073 Integers Make bits_shl thm
R67066:67073 Integers Make bits_shl thm
R67090:67097 Integers Make bits_rol thm
R67090:67097 Integers Make bits_rol thm
R67119:67121 Coqlib <> zlt def
R67126:67133 Integers Make unsigned def
R67119:67121 Coqlib <> zlt def
R67126:67133 Integers Make unsigned def
R67152:67163 Coq.Bool.Bool <> andb_false_r thm
R67152:67163 Coq.Bool.Bool <> andb_false_r thm
R67188:67201 Integers Make unsigned_range thm
R67188:67201 Integers Make unsigned_range thm
R67228:67236 Integers Make bits_mone thm
R67228:67236 Integers Make bits_mone thm
R67247:67257 Coq.Bool.Bool <> andb_true_r thm
R67247:67257 Coq.Bool.Bool <> andb_true_r thm
R67290:67299 Coqlib <> Zmod_small thm
R67290:67299 Coqlib <> Zmod_small thm
prf 67335:67343 Make shru_rolm
R67398:67400 Coq.Init.Logic <> :type_scope:x_'='_x not
R67390:67393 Integers Make shru def
R67397:67397 Integers <> n var
R67395:67395 Integers <> x var
R67401:67404 Integers Make rolm def
R67427:67430 Integers Make shru def
R67437:67437 Integers <> n var
R67432:67435 Integers Make mone def
R67409:67411 Integers Make sub def
R67423:67423 Integers <> n var
R67413:67421 Integers Make iwordsize def
R67406:67406 Integers <> x var
R67377:67379 Coq.Init.Logic <> :type_scope:x_'='_x not
R67362:67364 Integers Make ltu def
R67368:67376 Integers Make iwordsize def
R67366:67366 Integers <> n var
R67380:67383 Coq.Init.Datatypes <> true constr
R67470:67476 Integers Make ltu_inv thm
R67470:67476 Integers Make ltu_inv thm
R67494:67515 Integers Make unsigned_repr_wordsize thm
R67494:67515 Integers Make unsigned_repr_wordsize thm
R67535:67538 Integers Make rolm def
R67547:67558 Integers Make same_bits_eq thm
R67547:67558 Integers Make same_bits_eq thm
R67580:67587 Integers Make bits_and thm
R67580:67587 Integers Make bits_and thm
R67605:67613 Integers Make bits_shru thm
R67605:67613 Integers Make bits_shru thm
R67605:67613 Integers Make bits_shru thm
R67605:67613 Integers Make bits_shru thm
R67630:67637 Integers Make bits_rol thm
R67630:67637 Integers Make bits_rol thm
R67659:67661 Coqlib <> zlt def
R67680:67688 Integers Make zwordsize def
R67665:67667 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R67668:67675 Integers Make unsigned def
R67659:67661 Coqlib <> zlt def
R67680:67688 Integers Make zwordsize def
R67665:67667 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R67668:67675 Integers Make unsigned def
R67708:67721 Integers Make unsigned_range thm
R67708:67721 Integers Make unsigned_range thm
R67748:67756 Integers Make bits_mone thm
R67748:67756 Integers Make bits_mone thm
R67767:67777 Coq.Bool.Bool <> andb_true_r thm
R67767:67777 Coq.Bool.Bool <> andb_true_r thm
R67800:67802 Integers Make sub def
R67813:67825 Integers Make unsigned_repr thm
R67813:67825 Integers Make unsigned_repr thm
R67836:67857 Integers Make unsigned_repr_wordsize thm
R67836:67857 Integers Make unsigned_repr_wordsize thm
R67880:67890 Coqlib <> Zmod_unique thm
R67880:67890 Coqlib <> Zmod_unique thm
R67929:67950 Integers Make unsigned_repr_wordsize thm
R67929:67950 Integers Make unsigned_repr_wordsize thm
R67964:67984 Integers Make wordsize_max_unsigned thm
R67964:67984 Integers Make wordsize_max_unsigned thm
R68018:68029 Coq.Bool.Bool <> andb_false_r thm
R68018:68029 Coq.Bool.Bool <> andb_false_r thm
prf 68052:68059 Make rol_zero
R68086:68088 Coq.Init.Logic <> :type_scope:x_'='_x not
R68076:68078 Integers Make rol def
R68082:68085 Integers Make zero def
R68080:68080 Integers <> x var
R68089:68089 Integers <> x var
R68129:68141 Integers Make unsigned_zero thm
R68129:68141 Integers Make unsigned_zero thm
R68152:68161 Coq.ZArith.BinInt <> Zminus_0_r syndef
R68152:68161 Coq.ZArith.BinInt <> Zminus_0_r syndef
R68173:68182 Coqlib <> Zmod_small thm
R68173:68182 Coqlib <> Zmod_small thm
prf 68204:68220 Make bitwise_binop_rol
R68353:68355 Coq.Init.Logic <> :type_scope:x_'='_x not
R68340:68342 Integers Make rol def
R68352:68352 Integers <> n var
R68345:68345 Integers <> f var
R68349:68349 Integers <> y var
R68347:68347 Integers <> x var
R68356:68356 Integers <> f var
R68369:68371 Integers Make rol def
R68375:68375 Integers <> n var
R68373:68373 Integers <> y var
R68359:68361 Integers Make rol def
R68365:68365 Integers <> n var
R68363:68363 Integers <> x var
R68300:68302 Coq.Init.Logic <> :type_scope:x_'='_x not
R68283:68289 Integers Make testbit def
R68299:68299 Integers <> i var
R68292:68292 Integers <> f var
R68296:68296 Integers <> y var
R68294:68294 Integers <> x var
R68303:68304 Integers <> f' var
R68321:68327 Integers Make testbit def
R68331:68331 Integers <> i var
R68329:68329 Integers <> y var
R68307:68313 Integers Make testbit def
R68317:68317 Integers <> i var
R68315:68315 Integers <> x var
R68262:68265 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R68267:68269 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R68266:68266 Integers <> i var
R68266:68266 Integers <> i var
R68270:68278 Integers Make zwordsize def
R68402:68413 Integers Make same_bits_eq thm
R68402:68413 Integers Make same_bits_eq thm
R68453:68460 Integers Make bits_rol thm
R68453:68460 Integers Make bits_rol thm
R68453:68460 Integers Make bits_rol thm
R68453:68460 Integers Make bits_rol thm
R68453:68460 Integers Make bits_rol thm
R68495:68502 Coq.ZArith.Zdiv <> Z_mod_lt thm
R68495:68502 Coq.ZArith.Zdiv <> Z_mod_lt thm
R68511:68522 Integers Make wordsize_pos thm
R68511:68522 Integers Make wordsize_pos thm
prf 68539:68545 Make rol_and
R68581:68583 Coq.Init.Logic <> :type_scope:x_'='_x not
R68566:68568 Integers Make rol def
R68580:68580 Integers <> n var
R68571:68573 Integers Make and def
R68577:68577 Integers <> y var
R68575:68575 Integers <> x var
R68584:68586 Integers Make and def
R68599:68601 Integers Make rol def
R68605:68605 Integers <> n var
R68603:68603 Integers <> y var
R68589:68591 Integers Make rol def
R68595:68595 Integers <> n var
R68593:68593 Integers <> x var
R68655:68658 Coq.Init.Datatypes <> andb def
R68632:68648 Integers Make bitwise_binop_rol thm
R68655:68658 Coq.Init.Datatypes <> andb def
R68632:68648 Integers Make bitwise_binop_rol thm
R68667:68674 Integers Make bits_and thm
R68667:68674 Integers Make bits_and thm
prf 68691:68696 Make rol_or
R68731:68733 Coq.Init.Logic <> :type_scope:x_'='_x not
R68717:68719 Integers Make rol def
R68730:68730 Integers <> n var
R68722:68723 Integers Make or def
R68727:68727 Integers <> y var
R68725:68725 Integers <> x var
R68734:68735 Integers Make or def
R68748:68750 Integers Make rol def
R68754:68754 Integers <> n var
R68752:68752 Integers <> y var
R68738:68740 Integers Make rol def
R68744:68744 Integers <> n var
R68742:68742 Integers <> x var
R68804:68806 Coq.Init.Datatypes <> orb def
R68781:68797 Integers Make bitwise_binop_rol thm
R68804:68806 Coq.Init.Datatypes <> orb def
R68781:68797 Integers Make bitwise_binop_rol thm
R68815:68821 Integers Make bits_or thm
R68815:68821 Integers Make bits_or thm
prf 68838:68844 Make rol_xor
R68880:68882 Coq.Init.Logic <> :type_scope:x_'='_x not
R68865:68867 Integers Make rol def
R68879:68879 Integers <> n var
R68870:68872 Integers Make xor def
R68876:68876 Integers <> y var
R68874:68874 Integers <> x var
R68883:68885 Integers Make xor def
R68898:68900 Integers Make rol def
R68904:68904 Integers <> n var
R68902:68902 Integers <> y var
R68888:68890 Integers Make rol def
R68894:68894 Integers <> n var
R68892:68892 Integers <> x var
R68954:68957 Coq.Init.Datatypes <> xorb def
R68931:68947 Integers Make bitwise_binop_rol thm
R68954:68957 Coq.Init.Datatypes <> xorb def
R68931:68947 Integers Make bitwise_binop_rol thm
R68966:68973 Integers Make bits_xor thm
R68966:68973 Integers Make bits_xor thm
prf 68990:68996 Make rol_rol
R69063:69065 Coq.Init.Logic <> :type_scope:x_'='_x not
R69048:69050 Integers Make rol def
R69062:69062 Integers <> m var
R69053:69055 Integers Make rol def
R69059:69059 Integers <> n var
R69057:69057 Integers <> x var
R69066:69068 Integers Make rol def
R69073:69076 Integers Make modu def
R69088:69096 Integers Make iwordsize def
R69079:69081 Integers Make add def
R69085:69085 Integers <> m var
R69083:69083 Integers <> n var
R69070:69070 Integers <> x var
R69017:69023 Coq.ZArith.Znumtheory <> Zdivide syndef
R69035:69041 Integers Make modulus def
R69025:69033 Integers Make zwordsize def
R69135:69146 Integers Make eqmod_mod_eq thm
R69135:69146 Integers Make eqmod_mod_eq thm
R69155:69166 Integers Make wordsize_pos thm
R69155:69166 Integers Make wordsize_pos thm
R69182:69189 Integers Make unsigned def
R69205:69212 Integers Make unsigned def
R69182:69189 Integers Make unsigned def
R69205:69212 Integers Make unsigned def
R69249:69251 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R69245:69247 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R69226:69236 Integers Make eqmod_trans thm
R69249:69251 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R69245:69247 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R69226:69236 Integers Make eqmod_trans thm
R69264:69272 Integers Make eqmod_sub thm
R69264:69272 Integers Make eqmod_sub thm
R69283:69291 Integers Make eqmod_sym thm
R69283:69291 Integers Make eqmod_sym thm
R69300:69308 Integers Make eqmod_mod thm
R69300:69308 Integers Make eqmod_mod thm
R69317:69328 Integers Make wordsize_pos thm
R69317:69328 Integers Make wordsize_pos thm
R69340:69349 Integers Make eqmod_refl thm
R69340:69349 Integers Make eqmod_refl thm
R69368:69370 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R69364:69366 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R69381:69384 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R69390:69390 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R69386:69388 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R69381:69384 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R69390:69390 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R69386:69388 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R69368:69370 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R69364:69366 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R69411:69419 Integers Make eqmod_sub thm
R69411:69419 Integers Make eqmod_sub thm
R69430:69439 Integers Make eqmod_refl thm
R69430:69439 Integers Make eqmod_refl thm
R69468:69471 Coq.ZArith.Zdiv <> Zmod syndef
R69499:69507 Integers Make zwordsize def
R69484:69486 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R69474:69481 Integers Make unsigned def
R69487:69494 Integers Make unsigned def
R69450:69460 Integers Make eqmod_trans thm
R69468:69471 Coq.ZArith.Zdiv <> Zmod syndef
R69499:69507 Integers Make zwordsize def
R69484:69486 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R69474:69481 Integers Make unsigned def
R69487:69494 Integers Make unsigned def
R69450:69460 Integers Make eqmod_trans thm
R69523:69525 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R69536:69538 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R69536:69538 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R69523:69525 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R69558:69566 Integers Make eqmod_mod thm
R69558:69566 Integers Make eqmod_mod thm
R69575:69586 Integers Make wordsize_pos thm
R69575:69586 Integers Make wordsize_pos thm
R69598:69601 Integers Make modu def
R69604:69606 Integers Make add def
R69633:69654 Integers Make unsigned_repr_wordsize thm
R69633:69654 Integers Make unsigned_repr_wordsize thm
R69677:69681 Integers Make eqmod def
R69696:69703 Integers Make unsigned def
R69706:69709 Integers Make repr def
R69711:69711 Integers <> a var
R69693:69693 Integers <> a var
R69683:69691 Integers Make zwordsize def
R69677:69681 Integers Make eqmod def
R69696:69703 Integers Make unsigned def
R69706:69709 Integers Make repr def
R69711:69711 Integers <> a var
R69693:69693 Integers <> a var
R69683:69691 Integers Make zwordsize def
R69736:69748 Integers Make eqmod_divides thm
R69736:69748 Integers Make eqmod_divides thm
R69757:69773 Integers Make eqm_unsigned_repr thm
R69757:69773 Integers Make eqm_unsigned_repr thm
R69797:69807 Integers Make eqmod_trans thm
R69797:69807 Integers Make eqmod_trans thm
R69832:69842 Integers Make eqmod_refl2 thm
R69832:69842 Integers Make eqmod_refl2 thm
R69851:69862 Integers Make eqmod_mod_eq thm
R69851:69862 Integers Make eqmod_mod_eq thm
R69871:69882 Integers Make wordsize_pos thm
R69871:69882 Integers Make wordsize_pos thm
R69900:69907 Coq.ZArith.Zdiv <> Z_mod_lt thm
R69900:69907 Coq.ZArith.Zdiv <> Z_mod_lt thm
R69916:69927 Integers Make wordsize_pos thm
R69916:69927 Integers Make wordsize_pos thm
prf 69944:69952 Make rolm_zero
R69984:69986 Coq.Init.Logic <> :type_scope:x_'='_x not
R69971:69974 Integers Make rolm def
R69983:69983 Integers <> m var
R69978:69981 Integers Make zero def
R69976:69976 Integers <> x var
R69987:69989 Integers Make and def
R69993:69993 Integers <> m var
R69991:69991 Integers <> x var
R70020:70023 Integers Make rolm def
R70034:70041 Integers Make rol_zero thm
R70034:70041 Integers Make rol_zero thm
prf 70064:70072 Make rolm_rolm
R70157:70163 Coq.Init.Logic <> :type_scope:x_'='_x not
R70132:70135 Integers Make rolm def
R70155:70156 Integers <> m2 var
R70152:70153 Integers <> n2 var
R70138:70141 Integers Make rolm def
R70148:70149 Integers <> m1 var
R70145:70146 Integers <> n1 var
R70143:70143 Integers <> x var
R70164:70167 Integers Make rolm def
R70212:70214 Integers Make and def
R70228:70229 Integers <> m2 var
R70217:70219 Integers Make rol def
R70224:70225 Integers <> n2 var
R70221:70222 Integers <> m1 var
R70172:70175 Integers Make modu def
R70189:70197 Integers Make iwordsize def
R70178:70180 Integers Make add def
R70185:70186 Integers <> n2 var
R70182:70183 Integers <> n1 var
R70169:70169 Integers <> x var
R70101:70107 Coq.ZArith.Znumtheory <> Zdivide syndef
R70119:70125 Integers Make modulus def
R70109:70117 Integers Make zwordsize def
R70259:70262 Integers Make rolm def
R70273:70279 Integers Make rol_and thm
R70273:70279 Integers Make rol_and thm
R70290:70298 Integers Make and_assoc thm
R70290:70298 Integers Make and_assoc thm
R70312:70318 Integers Make rol_rol thm
R70312:70318 Integers Make rol_rol thm
prf 70354:70360 Make or_rolm
R70415:70417 Coq.Init.Logic <> :type_scope:x_'='_x not
R70385:70386 Integers Make or def
R70403:70406 Integers Make rolm def
R70412:70413 Integers <> m2 var
R70410:70410 Integers <> n var
R70408:70408 Integers <> x var
R70389:70392 Integers Make rolm def
R70398:70399 Integers <> m1 var
R70396:70396 Integers <> n var
R70394:70394 Integers <> x var
R70418:70421 Integers Make rolm def
R70428:70429 Integers Make or def
R70434:70435 Integers <> m2 var
R70431:70432 Integers <> m1 var
R70425:70425 Integers <> n var
R70423:70423 Integers <> x var
R70463:70466 Integers Make rolm def
R70485:70498 Integers Make and_or_distrib thm
R70485:70498 Integers Make and_or_distrib thm
prf 70516:70522 Make ror_rol
R70576:70578 Coq.Init.Logic <> :type_scope:x_'='_x not
R70569:70571 Integers Make ror def
R70575:70575 Integers <> y var
R70573:70573 Integers <> x var
R70579:70581 Integers Make rol def
R70586:70588 Integers Make sub def
R70600:70600 Integers <> y var
R70590:70598 Integers Make iwordsize def
R70583:70583 Integers <> x var
R70556:70558 Coq.Init.Logic <> :type_scope:x_'='_x not
R70541:70543 Integers Make ltu def
R70547:70555 Integers Make iwordsize def
R70545:70545 Integers <> y var
R70559:70562 Coq.Init.Datatypes <> true constr
R70635:70651 Integers Make ltu_iwordsize_inv thm
R70635:70651 Integers Make ltu_iwordsize_inv thm
R70675:70686 Integers Make same_bits_eq thm
R70675:70686 Integers Make same_bits_eq thm
R70707:70714 Integers Make bits_ror thm
R70707:70714 Integers Make bits_ror thm
R70731:70738 Integers Make bits_rol thm
R70731:70738 Integers Make bits_rol thm
R70766:70768 Integers Make sub def
R70779:70791 Integers Make unsigned_repr thm
R70779:70791 Integers Make unsigned_repr thm
R70802:70823 Integers Make unsigned_repr_wordsize thm
R70802:70823 Integers Make unsigned_repr_wordsize thm
R70834:70845 Integers Make eqmod_mod_eq thm
R70834:70845 Integers Make eqmod_mod_eq thm
R70854:70865 Integers Make wordsize_pos thm
R70854:70865 Integers Make wordsize_pos thm
R70895:70916 Integers Make unsigned_repr_wordsize thm
R70895:70916 Integers Make unsigned_repr_wordsize thm
R70933:70944 Integers Make wordsize_pos thm
R70958:70978 Integers Make wordsize_max_unsigned thm
R70933:70944 Integers Make wordsize_pos thm
R70958:70978 Integers Make wordsize_max_unsigned thm
prf 71003:71013 Make ror_rol_neg
R71062:71064 Coq.Init.Logic <> :type_scope:x_'='_x not
R71055:71057 Integers Make ror def
R71061:71061 Integers <> y var
R71059:71059 Integers <> x var
R71065:71067 Integers Make rol def
R71072:71074 Integers Make neg def
R71076:71076 Integers <> y var
R71069:71069 Integers <> x var
R71030:71030 Coq.ZArith.BinInt <> :Z_scope:'('_x_'|'_x_')' not
R71040:71042 Coq.ZArith.BinInt <> :Z_scope:'('_x_'|'_x_')' not
R71050:71050 Coq.ZArith.BinInt <> :Z_scope:'('_x_'|'_x_')' not
R71031:71039 Integers Make zwordsize def
R71043:71049 Integers Make modulus def
R71103:71114 Integers Make same_bits_eq thm
R71103:71114 Integers Make same_bits_eq thm
R71135:71142 Integers Make bits_ror thm
R71135:71142 Integers Make bits_ror thm
R71161:71168 Integers Make bits_rol thm
R71161:71168 Integers Make bits_rol thm
R71197:71208 Integers Make eqmod_mod_eq thm
R71197:71208 Integers Make eqmod_mod_eq thm
R71246:71249 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R71262:71262 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R71250:71251 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R71252:71259 Integers Make unsigned def
R71227:71237 Integers Make eqmod_trans thm
R71246:71249 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R71262:71262 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R71250:71251 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R71252:71259 Integers Make unsigned def
R71227:71237 Integers Make eqmod_trans thm
R71275:71285 Integers Make eqmod_refl2 thm
R71275:71285 Integers Make eqmod_refl2 thm
R71304:71312 Integers Make eqmod_sub thm
R71304:71312 Integers Make eqmod_sub thm
R71321:71330 Integers Make eqmod_refl thm
R71321:71330 Integers Make eqmod_refl thm
R71360:71366 Integers Make modulus def
R71341:71353 Integers Make eqmod_divides thm
R71360:71366 Integers Make modulus def
R71341:71353 Integers Make eqmod_divides thm
R71378:71394 Integers Make eqm_unsigned_repr thm
R71378:71394 Integers Make eqm_unsigned_repr thm
prf 71417:71422 Make or_ror
R71531:71533 Coq.Init.Logic <> :type_scope:x_'='_x not
R71524:71526 Integers Make ror def
R71530:71530 Integers <> z var
R71528:71528 Integers <> x var
R71534:71535 Integers Make or def
R71548:71551 Integers Make shru def
R71555:71555 Integers <> z var
R71553:71553 Integers <> x var
R71538:71540 Integers Make shl def
R71544:71544 Integers <> y var
R71542:71542 Integers <> x var
R71506:71508 Coq.Init.Logic <> :type_scope:x_'='_x not
R71499:71501 Integers Make add def
R71505:71505 Integers <> z var
R71503:71503 Integers <> y var
R71509:71517 Integers Make iwordsize def
R71486:71488 Coq.Init.Logic <> :type_scope:x_'='_x not
R71471:71473 Integers Make ltu def
R71477:71485 Integers Make iwordsize def
R71475:71475 Integers <> z var
R71489:71492 Coq.Init.Datatypes <> true constr
R71458:71460 Coq.Init.Logic <> :type_scope:x_'='_x not
R71443:71445 Integers Make ltu def
R71449:71457 Integers Make iwordsize def
R71447:71447 Integers <> y var
R71461:71464 Coq.Init.Datatypes <> true constr
R71590:71606 Integers Make ltu_iwordsize_inv thm
R71614:71630 Integers Make ltu_iwordsize_inv thm
R71590:71606 Integers Make ltu_iwordsize_inv thm
R71614:71630 Integers Make ltu_iwordsize_inv thm
R71656:71658 Integers Make ror def
R71661:71662 Integers Make or def
R71665:71667 Integers Make shl def
R71670:71673 Integers Make shru def
R71682:71693 Integers Make same_bits_eq thm
R71682:71693 Integers Make same_bits_eq thm
R71716:71727 Integers Make testbit_repr thm
R71716:71727 Integers Make testbit_repr thm
R71716:71727 Integers Make testbit_repr thm
R71716:71727 Integers Make testbit_repr thm
R71748:71757 Coq.ZArith.BinInt Z lor_spec thm
R71748:71757 Coq.ZArith.BinInt Z lor_spec thm
R71748:71757 Coq.ZArith.BinInt Z lor_spec thm
R71748:71757 Coq.ZArith.BinInt Z lor_spec thm
R71768:71775 Coq.Bool.Bool <> orb_comm thm
R71768:71775 Coq.Bool.Bool <> orb_comm thm
R71793:71805 Integers Make same_bits_eqm thm
R71793:71805 Integers Make same_bits_eqm thm
R71793:71805 Integers Make same_bits_eqm thm
R71824:71842 Integers Make eqm_unsigned_repr_r thm
R71824:71842 Integers Make eqm_unsigned_repr_r thm
R71851:71859 Integers Make eqm_refl2 thm
R71851:71859 Integers Make eqm_refl2 thm
R71883:71892 Coqlib <> Zmod_small thm
R71883:71892 Coqlib <> Zmod_small thm
R71932:71934 Coq.Init.Logic <> :type_scope:x_'='_x not
R71914:71921 Integers Make unsigned def
R71924:71926 Integers Make add def
R71935:71943 Integers Make zwordsize def
R71932:71934 Coq.Init.Logic <> :type_scope:x_'='_x not
R71914:71921 Integers Make unsigned def
R71924:71926 Integers Make add def
R71935:71943 Integers Make zwordsize def
R71972:71993 Integers Make unsigned_repr_wordsize thm
R71972:71993 Integers Make unsigned_repr_wordsize thm
R72008:72010 Integers Make add def
R72027:72039 Integers Make unsigned_repr thm
R72027:72039 Integers Make unsigned_repr thm
R72076:72100 Integers Make two_wordsize_max_unsigned thm
R72076:72100 Integers Make two_wordsize_max_unsigned thm
R72121:72139 Integers Make eqm_unsigned_repr_r thm
R72121:72139 Integers Make eqm_unsigned_repr_r thm
R72148:72156 Integers Make eqm_refl2 thm
R72148:72156 Integers Make eqm_refl2 thm
R72179:72188 Coqlib <> Zmod_small thm
R72179:72188 Coqlib <> Zmod_small thm
def 72267:72276 Make powerserie
R72282:72285 Coq.Init.Datatypes <> list ind
R72287:72287 Coq.Numbers.BinNums <> Z ind
R72291:72291 Coq.Numbers.BinNums <> Z ind
R72304:72304 Integers <> l var
R72315:72317 Coq.Init.Datatypes <> nil constr
R72329:72332 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R72346:72348 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R72339:72343 Coq.ZArith.Zpower <> two_p def
R72349:72358 Integers <> powerserie def
prf 72377:72397 Make Z_one_bits_powerserie
R72433:72435 Coq.Init.Logic <> :type_scope:x_'='_x not
R72432:72432 Integers <> x var
R72436:72445 Integers Make powerserie def
R72448:72457 Integers Make Z_one_bits def
R72468:72468 Integers <> x var
R72459:72466 Integers Make wordsize def
R72413:72416 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R72418:72420 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R72417:72417 Integers <> x var
R72417:72417 Integers <> x var
R72421:72427 Integers Make modulus def
R72567:72569 Coq.Init.Logic <> :type_scope:x_'='_x not
R72557:72559 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R72556:72556 Integers <> x var
R72560:72564 Coq.ZArith.Zpower <> two_p def
R72566:72566 Integers <> i var
R72570:72579 Integers Make powerserie def
R72582:72591 Integers Make Z_one_bits def
R72597:72597 Integers <> i var
R72595:72595 Integers <> x var
R72593:72593 Integers <> n var
R72525:72528 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R72530:72532 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R72529:72529 Integers <> x var
R72529:72529 Integers <> x var
R72533:72545 Coq.ZArith.Zpower <> two_power_nat def
R72547:72547 Integers <> n var
R72511:72514 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R72515:72515 Integers <> i var
R72567:72569 Coq.Init.Logic <> :type_scope:x_'='_x not
R72557:72559 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R72556:72556 Integers <> x var
R72560:72564 Coq.ZArith.Zpower <> two_p def
R72566:72566 Integers <> i var
R72570:72579 Integers Make powerserie def
R72582:72591 Integers Make Z_one_bits def
R72597:72597 Integers <> i var
R72595:72595 Integers <> x var
R72593:72593 Integers <> n var
R72525:72528 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R72530:72532 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R72529:72529 Integers <> x var
R72529:72529 Integers <> x var
R72533:72545 Coq.ZArith.Zpower <> two_power_nat def
R72547:72547 Integers <> n var
R72511:72514 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R72515:72515 Integers <> i var
R72646:72660 Coqlib <> two_power_nat_O thm
R72646:72660 Coqlib <> two_power_nat_O thm
R72681:72683 Coq.Init.Logic <> :type_scope:x_'='_x not
R72681:72683 Coq.Init.Logic <> :type_scope:x_'='_x not
R72723:72737 Coq.ZArith.Zpower <> two_power_nat_S thm
R72723:72737 Coq.ZArith.Zpower <> two_power_nat_S thm
R72752:72761 Integers Make Z_one_bits def
R72752:72761 Integers Make Z_one_bits def
R72775:72781 Integers Make Zdecomp thm
R72775:72781 Integers Make Zdecomp thm
R72801:72813 Integers Make Zshiftin_spec thm
R72801:72813 Integers Make Zshiftin_spec thm
R72860:72862 Coq.Init.Logic <> :type_scope:x_'='_x not
R72844:72846 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R72836:72841 Coq.ZArith.BinInt Z div2 def
R72847:72851 Coq.ZArith.Zpower <> two_p def
R72855:72857 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R72863:72872 Integers Make powerserie def
R72875:72884 Integers Make Z_one_bits def
R72901:72903 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R72889:72894 Coq.ZArith.BinInt Z div2 def
R72860:72862 Coq.Init.Logic <> :type_scope:x_'='_x not
R72844:72846 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R72836:72841 Coq.ZArith.BinInt Z div2 def
R72847:72851 Coq.ZArith.Zpower <> two_p def
R72855:72857 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R72863:72872 Integers Make powerserie def
R72875:72884 Integers Make Z_one_bits def
R72901:72903 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R72889:72894 Coq.ZArith.BinInt Z div2 def
R72946:72950 Coq.ZArith.BinInt Z odd def
R72946:72950 Coq.ZArith.BinInt Z odd def
R72974:72985 Coq.ZArith.Zpower <> two_p_is_exp thm
R72974:72985 Coq.ZArith.Zpower <> two_p_is_exp thm
R73002:73006 Coq.ZArith.Zpower <> two_p def
R73002:73006 Coq.ZArith.Zpower <> two_p def
R73036:73042 Integers Make Zdecomp thm
R73036:73042 Integers Make Zdecomp thm
R73061:73073 Integers Make Zshiftin_spec thm
R73061:73073 Integers Make Zshiftin_spec thm
R73089:73093 Coq.ZArith.BinInt Z odd def
R73105:73114 Integers Make powerserie def
R73089:73093 Coq.ZArith.BinInt Z odd def
R73105:73114 Integers Make powerserie def
R73105:73114 Integers Make powerserie def
R73191:73195 Coq.ZArith.Zpower <> two_p def
R73191:73195 Coq.ZArith.Zpower <> two_p def
prf 73246:73261 Make Z_one_bits_range
R73313:73316 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R73318:73320 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R73317:73317 Integers <> i var
R73317:73317 Integers <> i var
R73321:73329 Integers Make zwordsize def
R73278:73279 Coq.Lists.List <> In def
R73284:73293 Integers Make Z_one_bits def
R73304:73304 Integers <> x var
R73295:73302 Integers Make wordsize def
R73281:73281 Integers <> i var
R73397:73400 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R73402:73404 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R73396:73396 Integers <> i var
R73401:73401 Integers <> j var
R73401:73401 Integers <> j var
R73406:73408 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R73405:73405 Integers <> i var
R73409:73416 Coq.ZArith.BinInt <> Z_of_nat syndef
R73418:73418 Integers <> n var
R73369:73370 Coq.Lists.List <> In def
R73375:73384 Integers Make Z_one_bits def
R73390:73390 Integers <> i var
R73388:73388 Integers <> x var
R73386:73386 Integers <> n var
R73372:73372 Integers <> j var
R73397:73400 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R73402:73404 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R73396:73396 Integers <> i var
R73401:73401 Integers <> j var
R73401:73401 Integers <> j var
R73406:73408 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R73405:73405 Integers <> i var
R73409:73416 Coq.ZArith.BinInt <> Z_of_nat syndef
R73418:73418 Integers <> n var
R73369:73370 Coq.Lists.List <> In def
R73375:73384 Integers Make Z_one_bits def
R73390:73390 Integers <> i var
R73388:73388 Integers <> x var
R73386:73386 Integers <> n var
R73372:73372 Integers <> j var
R73447:73448 Coq.Lists.List <> In def
R73447:73448 Coq.Lists.List <> In def
R73447:73448 Coq.Lists.List <> In def
R0:-1 Integers <> y var
R0:-1 Integers <> y var
R0:-1 Integers <> y var
R73484:73488 Coq.ZArith.Znat <> inj_S syndef
R73484:73488 Coq.ZArith.Znat <> inj_S syndef
R73544:73547 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R73549:73551 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R73553:73555 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R73556:73561 Coq.ZArith.BinInt Z succ def
R73564:73571 Coq.ZArith.BinInt Z of_nat def
R73501:73502 Coq.Lists.List <> In def
R73507:73516 Integers Make Z_one_bits def
R73533:73535 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R73521:73526 Coq.ZArith.BinInt Z div2 def
R73544:73547 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R73549:73551 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R73553:73555 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R73556:73561 Coq.ZArith.BinInt Z succ def
R73564:73571 Coq.ZArith.BinInt Z of_nat def
R73501:73502 Coq.Lists.List <> In def
R73507:73516 Integers Make Z_one_bits def
R73533:73535 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R73521:73526 Coq.ZArith.BinInt Z div2 def
R73629:73633 Coq.ZArith.BinInt Z odd def
R73629:73633 Coq.ZArith.BinInt Z odd def
R73721:73728 Integers Make wordsize def
R73721:73728 Integers Make wordsize def
R73746:73754 Integers Make zwordsize def
R73746:73754 Integers Make zwordsize def
prf 73776:73788 Make is_power2_rng
R73840:73843 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R73857:73859 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R73844:73851 Integers Make unsigned def
R73853:73856 Integers <> logn var
R73844:73851 Integers Make unsigned def
R73853:73856 Integers <> logn var
R73860:73868 Integers Make zwordsize def
R73821:73823 Coq.Init.Logic <> :type_scope:x_'='_x not
R73810:73818 Integers Make is_power2 def
R73820:73820 Integers <> n var
R73824:73827 Coq.Init.Datatypes <> Some constr
R73829:73832 Integers <> logn var
R73902:73910 Integers Make is_power2 def
R73927:73942 Integers Make Z_one_bits_range thm
R73945:73952 Integers Make unsigned def
R73927:73942 Integers Make Z_one_bits_range thm
R73945:73952 Integers Make unsigned def
R73971:73980 Integers Make Z_one_bits def
R73992:73999 Integers Make unsigned def
R73982:73989 Integers Make wordsize def
R73971:73980 Integers Make Z_one_bits def
R73992:73999 Integers Make unsigned def
R73982:73989 Integers Make wordsize def
R74110:74113 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R74115:74117 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R74118:74126 Integers Make zwordsize def
R74110:74113 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R74115:74117 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R74118:74126 Integers Make zwordsize def
R74169:74181 Integers Make unsigned_repr thm
R74169:74181 Integers Make unsigned_repr thm
R74201:74221 Integers Make wordsize_max_unsigned thm
R74201:74221 Integers Make wordsize_max_unsigned thm
prf 74269:74283 Make is_power2_range
R74350:74352 Coq.Init.Logic <> :type_scope:x_'='_x not
R74332:74334 Integers Make ltu def
R74341:74349 Integers Make iwordsize def
R74336:74339 Integers <> logn var
R74353:74356 Coq.Init.Datatypes <> true constr
R74316:74318 Coq.Init.Logic <> :type_scope:x_'='_x not
R74305:74313 Integers Make is_power2 def
R74315:74315 Integers <> n var
R74319:74322 Coq.Init.Datatypes <> Some constr
R74324:74327 Integers <> logn var
R74383:74385 Integers Make ltu def
R74396:74417 Integers Make unsigned_repr_wordsize thm
R74396:74417 Integers Make unsigned_repr_wordsize thm
R74428:74435 Coqlib <> zlt_true thm
R74428:74435 Coqlib <> zlt_true thm
R74450:74462 Integers Make is_power2_rng thm
R74450:74462 Integers Make is_power2_rng thm
R0:-1 Integers <> y var
prf 74492:74508 Make is_power2_correct
R74569:74571 Coq.Init.Logic <> :type_scope:x_'='_x not
R74559:74566 Integers Make unsigned def
R74568:74568 Integers <> n var
R74572:74576 Coq.ZArith.Zpower <> two_p def
R74579:74586 Integers Make unsigned def
R74588:74591 Integers <> logn var
R74541:74543 Coq.Init.Logic <> :type_scope:x_'='_x not
R74530:74538 Integers Make is_power2 def
R74540:74540 Integers <> n var
R74544:74547 Coq.Init.Datatypes <> Some constr
R74549:74552 Integers <> logn var
R74626:74634 Integers Make is_power2 def
R74651:74671 Integers Make Z_one_bits_powerserie thm
R74687:74700 Integers Make unsigned_range thm
R74674:74681 Integers Make unsigned def
R74651:74671 Integers Make Z_one_bits_powerserie thm
R74687:74700 Integers Make unsigned_range thm
R74674:74681 Integers Make unsigned def
R74721:74736 Integers Make Z_one_bits_range thm
R74739:74746 Integers Make unsigned def
R74721:74736 Integers Make Z_one_bits_range thm
R74739:74746 Integers Make unsigned def
R74765:74774 Integers Make Z_one_bits def
R74786:74793 Integers Make unsigned def
R74776:74783 Integers Make wordsize def
R74765:74774 Integers Make Z_one_bits def
R74786:74793 Integers Make unsigned def
R74776:74783 Integers Make wordsize def
R74917:74929 Integers Make unsigned_repr thm
R74917:74929 Integers Make unsigned_repr thm
R74941:74945 Coq.ZArith.Zpower <> two_p def
R74963:74965 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R74956:74960 Coq.ZArith.Zpower <> two_p def
R74963:74965 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R74956:74960 Coq.ZArith.Zpower <> two_p def
R74941:74945 Coq.ZArith.Zpower <> two_p def
R75018:75038 Integers Make wordsize_max_unsigned thm
R75018:75038 Integers Make wordsize_max_unsigned thm
prf 75106:75116 Make two_p_range
R75158:75161 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<='_x not
R75169:75172 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<='_x not
R75162:75166 Coq.ZArith.Zpower <> two_p def
R75168:75168 Integers <> n var
R75162:75166 Coq.ZArith.Zpower <> two_p def
R75168:75168 Integers <> n var
R75173:75184 Integers Make max_unsigned def
R75134:75137 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R75139:75141 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R75138:75138 Integers <> n var
R75138:75138 Integers <> n var
R75142:75150 Integers Make zwordsize def
R75228:75230 Coq.ZArith.BinInt <> :Z_scope:x_'>'_x not
R75221:75225 Coq.ZArith.Zpower <> two_p def
R75228:75230 Coq.ZArith.BinInt <> :Z_scope:x_'>'_x not
R75221:75225 Coq.ZArith.Zpower <> two_p def
R75241:75253 Coq.ZArith.Zpower <> two_p_gt_ZERO thm
R75241:75253 Coq.ZArith.Zpower <> two_p_gt_ZERO thm
R75284:75304 Coqlib <> two_p_monotone_strict thm
R75284:75304 Coqlib <> two_p_monotone_strict thm
R75324:75332 Integers Make zwordsize def
R75346:75364 Coqlib <> two_power_nat_two_p thm
R75346:75364 Coqlib <> two_power_nat_two_p thm
R75377:75388 Integers Make max_unsigned def
R75391:75397 Integers Make modulus def
prf 75421:75435 Make Z_one_bits_zero
R75468:75470 Coq.Init.Logic <> :type_scope:x_'='_x not
R75452:75461 Integers Make Z_one_bits def
R75467:75467 Integers <> i var
R75463:75463 Integers <> n var
R75471:75473 Coq.Init.Datatypes <> nil constr
prf 75532:75547 Make Z_one_bits_two_p
R75617:75619 Coq.Init.Logic <> :type_scope:x_'='_x not
R75593:75602 Integers Make Z_one_bits def
R75616:75616 Integers <> i var
R75607:75611 Coq.ZArith.Zpower <> two_p def
R75613:75613 Integers <> x var
R75604:75604 Integers <> n var
R75620:75620 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R75626:75630 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R75622:75624 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R75621:75621 Integers <> i var
R75625:75625 Integers <> x var
R75631:75633 Coq.Init.Datatypes <> nil constr
R75569:75572 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R75574:75576 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R75573:75573 Integers <> x var
R75573:75573 Integers <> x var
R75577:75584 Coq.ZArith.BinInt <> Z_of_nat syndef
R75586:75586 Integers <> n var
R75715:75719 Coq.ZArith.Znat <> inj_S syndef
R75715:75719 Coq.ZArith.Znat <> inj_S syndef
R75743:75746 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R75739:75741 Coq.Init.Logic <> :type_scope:x_'='_x not
R75748:75750 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x not
R75743:75746 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R75739:75741 Coq.Init.Logic <> :type_scope:x_'='_x not
R75748:75750 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x not
R75815:75829 Integers Make Z_one_bits_zero thm
R75815:75829 Integers Make Z_one_bits_zero thm
R75865:75868 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R75857:75859 Coq.Init.Logic <> :type_scope:x_'='_x not
R75842:75846 Coq.ZArith.BinInt Z odd def
R75849:75853 Coq.ZArith.Zpower <> two_p def
R75860:75864 Coq.Init.Datatypes <> false constr
R75885:75887 Coq.Init.Logic <> :type_scope:x_'='_x not
R75869:75874 Coq.ZArith.BinInt Z div2 def
R75877:75881 Coq.ZArith.Zpower <> two_p def
R75888:75892 Coq.ZArith.Zpower <> two_p def
R75896:75896 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R75865:75868 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R75857:75859 Coq.Init.Logic <> :type_scope:x_'='_x not
R75842:75846 Coq.ZArith.BinInt Z odd def
R75849:75853 Coq.ZArith.Zpower <> two_p def
R75860:75864 Coq.Init.Datatypes <> false constr
R75885:75887 Coq.Init.Logic <> :type_scope:x_'='_x not
R75869:75874 Coq.ZArith.BinInt Z div2 def
R75877:75881 Coq.ZArith.Zpower <> two_p def
R75888:75892 Coq.ZArith.Zpower <> two_p def
R75896:75896 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R75912:75923 Integers Make Zshiftin_inj thm
R75912:75923 Integers Make Zshiftin_inj thm
R75937:75943 Integers Make Zdecomp thm
R75937:75943 Integers Make Zdecomp thm
R75955:75967 Integers Make Zshiftin_spec thm
R75955:75967 Integers Make Zshiftin_spec thm
R75955:75967 Integers Make Zshiftin_spec thm
R75985:75991 Coq.ZArith.Zpower <> two_p_S thm
R75985:75991 Coq.ZArith.Zpower <> two_p_S thm
R76002:76010 Coq.ZArith.BinInt <> Zplus_0_r syndef
R76002:76010 Coq.ZArith.BinInt <> Zplus_0_r syndef
prf 76132:76146 Make is_power2_two_p
R76211:76213 Coq.Init.Logic <> :type_scope:x_'='_x not
R76185:76193 Integers Make is_power2 def
R76196:76199 Integers Make repr def
R76202:76206 Coq.ZArith.Zpower <> two_p def
R76208:76208 Integers <> n var
R76214:76217 Coq.Init.Datatypes <> Some constr
R76220:76223 Integers Make repr def
R76225:76225 Integers <> n var
R76162:76165 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R76167:76169 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R76166:76166 Integers <> n var
R76166:76166 Integers <> n var
R76170:76178 Integers Make zwordsize def
R76253:76261 Integers Make is_power2 def
R76272:76284 Integers Make unsigned_repr thm
R76272:76284 Integers Make unsigned_repr thm
R76298:76313 Integers Make Z_one_bits_two_p thm
R76298:76313 Integers Make Z_one_bits_two_p thm
R76336:76346 Integers Make two_p_range thm
R76336:76346 Integers Make two_p_range thm
prf 76517:76533 Make Zshiftl_mul_two_p
R76572:76574 Coq.Init.Logic <> :type_scope:x_'='_x not
R76560:76567 Coq.ZArith.BinInt Z shiftl def
R76571:76571 Integers <> n var
R76569:76569 Integers <> x var
R76576:76578 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R76575:76575 Integers <> x var
R76579:76583 Coq.ZArith.Zpower <> two_p def
R76585:76585 Integers <> n var
R76551:76554 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R76555:76555 Integers <> n var
R76656:76668 Coq.PArith.BinPos Pos peano_ind def
R76656:76668 Coq.PArith.BinPos Pos peano_ind def
R76686:76698 Coq.ZArith.Zpower <> two_power_pos def
R76686:76698 Coq.ZArith.Zpower <> two_power_pos def
R76746:76758 Coq.PArith.BinPos Pos iter_succ thm
R76746:76758 Coq.PArith.BinPos Pos iter_succ thm
R76787:76802 Coq.PArith.BinPos <> Pplus_one_succ_l thm
R76787:76802 Coq.PArith.BinPos <> Pplus_one_succ_l thm
R76813:76832 Coq.ZArith.Zpower <> two_power_pos_is_exp thm
R76813:76832 Coq.ZArith.Zpower <> two_power_pos_is_exp thm
R76849:76861 Coq.ZArith.Zpower <> two_power_pos def
R76849:76861 Coq.ZArith.Zpower <> two_power_pos def
prf 76922:76934 Make shl_mul_two_p
R76960:76962 Coq.Init.Logic <> :type_scope:x_'='_x not
R76953:76955 Integers Make shl def
R76959:76959 Integers <> y var
R76957:76957 Integers <> x var
R76963:76965 Integers Make mul def
R76970:76973 Integers Make repr def
R76976:76980 Coq.ZArith.Zpower <> two_p def
R76983:76990 Integers Make unsigned def
R76992:76992 Integers <> y var
R76967:76967 Integers <> x var
R77022:77024 Integers Make shl def
R77027:77029 Integers Make mul def
R77038:77049 Integers Make eqm_samerepr thm
R77038:77049 Integers Make eqm_samerepr thm
R77062:77078 Integers Make Zshiftl_mul_two_p thm
R77062:77078 Integers Make Zshiftl_mul_two_p thm
R77112:77125 Integers Make unsigned_range thm
R77112:77125 Integers Make unsigned_range thm
prf 77152:77158 Make shl_mul
R77184:77186 Coq.Init.Logic <> :type_scope:x_'='_x not
R77177:77179 Integers Make shl def
R77183:77183 Integers <> y var
R77181:77181 Integers <> x var
R77187:77189 Integers Make mul def
R77194:77196 Integers Make shl def
R77202:77202 Integers <> y var
R77198:77200 Integers Make one def
R77191:77191 Integers <> x var
R77243:77245 Coq.Init.Logic <> :type_scope:x_'='_x not
R77234:77236 Integers Make shl def
R77238:77240 Integers Make one def
R77246:77249 Integers Make repr def
R77252:77256 Coq.ZArith.Zpower <> two_p def
R77259:77266 Integers Make unsigned def
R77243:77245 Coq.Init.Logic <> :type_scope:x_'='_x not
R77234:77236 Integers Make shl def
R77238:77240 Integers Make one def
R77246:77249 Integers Make repr def
R77252:77256 Coq.ZArith.Zpower <> two_p def
R77259:77266 Integers Make unsigned def
R77290:77302 Integers Make shl_mul_two_p thm
R77290:77302 Integers Make shl_mul_two_p thm
R77313:77322 Integers Make mul_commut thm
R77313:77322 Integers Make mul_commut thm
R77333:77339 Integers Make mul_one thm
R77333:77339 Integers Make mul_one thm
R77371:77383 Integers Make shl_mul_two_p thm
R77371:77383 Integers Make shl_mul_two_p thm
prf 77400:77407 Make mul_pow2
R77467:77469 Coq.Init.Logic <> :type_scope:x_'='_x not
R77460:77462 Integers Make mul def
R77466:77466 Integers <> n var
R77464:77464 Integers <> x var
R77470:77472 Integers Make shl def
R77476:77479 Integers <> logn var
R77474:77474 Integers <> x var
R77442:77444 Coq.Init.Logic <> :type_scope:x_'='_x not
R77431:77439 Integers Make is_power2 def
R77441:77441 Integers <> n var
R77445:77448 Coq.Init.Datatypes <> Some constr
R77450:77453 Integers <> logn var
R77511:77527 Integers Make is_power2_correct thm
R77511:77527 Integers Make is_power2_correct thm
R77557:77569 Integers Make shl_mul_two_p thm
R77557:77569 Integers Make shl_mul_two_p thm
R77595:77607 Integers Make repr_unsigned thm
R77595:77607 Integers Make repr_unsigned thm
prf 77632:77648 Make shifted_or_is_add
R77740:77742 Coq.Init.Logic <> :type_scope:x_'='_x not
R77719:77720 Integers Make or def
R77739:77739 Integers <> y var
R77723:77725 Integers Make shl def
R77730:77733 Integers Make repr def
R77735:77735 Integers <> n var
R77727:77727 Integers <> x var
R77743:77746 Integers Make repr def
R77768:77770 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R77758:77760 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R77748:77755 Integers Make unsigned def
R77757:77757 Integers <> x var
R77761:77765 Coq.ZArith.Zpower <> two_p def
R77767:77767 Integers <> n var
R77771:77778 Integers Make unsigned def
R77780:77780 Integers <> y var
R77703:77705 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x not
R77693:77700 Integers Make unsigned def
R77702:77702 Integers <> y var
R77706:77710 Coq.ZArith.Zpower <> two_p def
R77712:77712 Integers <> n var
R77670:77673 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R77675:77677 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R77674:77674 Integers <> n var
R77674:77674 Integers <> n var
R77678:77686 Integers Make zwordsize def
R77812:77820 Integers Make add_is_or thm
R77812:77820 Integers Make add_is_or thm
R77835:77837 Integers Make add def
R77846:77857 Integers Make eqm_samerepr thm
R77846:77857 Integers Make eqm_samerepr thm
R77866:77872 Integers Make eqm_add thm
R77866:77872 Integers Make eqm_add thm
R77904:77916 Integers Make shl_mul_two_p thm
R77904:77916 Integers Make shl_mul_two_p thm
R77926:77928 Integers Make mul def
R77937:77955 Integers Make eqm_unsigned_repr_l thm
R77937:77955 Integers Make eqm_unsigned_repr_l thm
R77968:77975 Integers Make eqm_mult thm
R77968:77975 Integers Make eqm_mult thm
R78000:78018 Integers Make eqm_unsigned_repr_l thm
R78000:78018 Integers Make eqm_unsigned_repr_l thm
R78032:78040 Integers Make eqm_refl2 thm
R78032:78040 Integers Make eqm_refl2 thm
R78051:78063 Integers Make unsigned_repr thm
R78051:78063 Integers Make unsigned_repr thm
R78088:78108 Integers Make wordsize_max_unsigned thm
R78088:78108 Integers Make wordsize_max_unsigned thm
R78145:78157 Integers Make unsigned_repr thm
R78145:78157 Integers Make unsigned_repr thm
R78175:78177 Coqlib <> zlt def
R78175:78177 Coqlib <> zlt def
R78212:78218 Integers Make testbit def
R78230:78234 Coq.Init.Datatypes <> false constr
R78230:78234 Coq.Init.Datatypes <> false constr
R78212:78218 Integers Make testbit def
R78243:78254 Coq.Bool.Bool <> andb_false_r thm
R78243:78254 Coq.Bool.Bool <> andb_false_r thm
R78281:78287 Integers Make testbit def
R78329:78331 Coq.Init.Logic <> :type_scope:x_'='_x not
R78308:78315 Coq.ZArith.BinInt Z of_nat def
R78318:78325 Coq.ZArith.BinInt Z to_nat def
R78345:78352 Coq.ZArith.Znat Z2Nat id thm
R78329:78331 Coq.Init.Logic <> :type_scope:x_'='_x not
R78308:78315 Coq.ZArith.BinInt Z of_nat def
R78318:78325 Coq.ZArith.BinInt Z to_nat def
R78345:78352 Coq.ZArith.Znat Z2Nat id thm
R78396:78403 Coq.ZArith.BinInt Z to_nat def
R78375:78388 Integers Make Ztestbit_above thm
R78396:78403 Coq.ZArith.BinInt Z to_nat def
R78375:78388 Integers Make Ztestbit_above thm
R78447:78465 Coqlib <> two_power_nat_two_p thm
R78447:78465 Coqlib <> two_power_nat_two_p thm
R78493:78506 Integers Make unsigned_range thm
R78493:78506 Integers Make unsigned_range thm
R78560:78580 Integers Make wordsize_max_unsigned thm
R78560:78580 Integers Make wordsize_max_unsigned thm
prf 78671:78687 Make Zshiftr_div_two_p
R78726:78728 Coq.Init.Logic <> :type_scope:x_'='_x not
R78714:78721 Coq.ZArith.BinInt Z shiftr def
R78725:78725 Integers <> n var
R78723:78723 Integers <> x var
R78730:78732 Coq.ZArith.BinInt <> :Z_scope:x_'/'_x not
R78729:78729 Integers <> x var
R78733:78737 Coq.ZArith.Zpower <> two_p def
R78739:78739 Integers <> n var
R78705:78708 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R78709:78709 Integers <> n var
R78778:78785 Coq.ZArith.BinInt Z shiftr def
R78807:78814 Coq.ZArith.Zdiv <> Zdiv_1_r thm
R78807:78814 Coq.ZArith.Zdiv <> Zdiv_1_r thm
R78844:78856 Coq.PArith.BinPos Pos peano_ind def
R78844:78856 Coq.PArith.BinPos Pos peano_ind def
R78874:78886 Coq.ZArith.Zpower <> two_power_pos def
R78874:78886 Coq.ZArith.Zpower <> two_power_pos def
R78912:78920 Coq.ZArith.Zdiv <> Zdiv2_div thm
R78912:78920 Coq.ZArith.Zdiv <> Zdiv2_div thm
R78946:78958 Coq.PArith.BinPos Pos iter_succ thm
R78946:78958 Coq.PArith.BinPos Pos iter_succ thm
R78987:79002 Coq.PArith.BinPos <> Pplus_one_succ_l thm
R78987:79002 Coq.PArith.BinPos <> Pplus_one_succ_l thm
R79013:79032 Coq.ZArith.Zpower <> two_power_pos_is_exp thm
R79013:79032 Coq.ZArith.Zpower <> two_power_pos_is_exp thm
R79049:79061 Coq.ZArith.Zpower <> two_power_pos def
R79049:79061 Coq.ZArith.Zpower <> two_power_pos def
R79088:79096 Coq.ZArith.Zdiv <> Zdiv2_div thm
R79088:79096 Coq.ZArith.Zdiv <> Zdiv2_div thm
R79107:79116 Coq.ZArith.BinInt <> Zmult_comm syndef
R79107:79116 Coq.ZArith.BinInt <> Zmult_comm syndef
R79125:79133 Coqlib <> Zdiv_Zdiv thm
R79125:79133 Coqlib <> Zdiv_Zdiv thm
R79150:79166 Coq.ZArith.Zpower <> two_power_pos_nat thm
R79150:79166 Coq.ZArith.Zpower <> two_power_pos_nat thm
R79175:79191 Coqlib <> two_power_nat_pos thm
R79175:79191 Coqlib <> two_power_nat_pos thm
prf 79243:79256 Make shru_div_two_p
R79283:79285 Coq.Init.Logic <> :type_scope:x_'='_x not
R79275:79278 Integers Make shru def
R79282:79282 Integers <> y var
R79280:79280 Integers <> x var
R79286:79289 Integers Make repr def
R79302:79304 Coq.ZArith.BinInt <> :Z_scope:x_'/'_x not
R79292:79299 Integers Make unsigned def
R79301:79301 Integers <> x var
R79305:79309 Coq.ZArith.Zpower <> two_p def
R79312:79319 Integers Make unsigned def
R79321:79321 Integers <> y var
R79350:79353 Integers Make shru def
R79367:79383 Integers Make Zshiftr_div_two_p thm
R79367:79383 Integers Make Zshiftr_div_two_p thm
R79406:79419 Integers Make unsigned_range thm
R79406:79419 Integers Make unsigned_range thm
prf 79446:79454 Make divu_pow2
R79515:79517 Coq.Init.Logic <> :type_scope:x_'='_x not
R79507:79510 Integers Make divu def
R79514:79514 Integers <> n var
R79512:79512 Integers <> x var
R79518:79521 Integers Make shru def
R79525:79528 Integers <> logn var
R79523:79523 Integers <> x var
R79489:79491 Coq.Init.Logic <> :type_scope:x_'='_x not
R79478:79486 Integers Make is_power2 def
R79488:79488 Integers <> n var
R79492:79495 Coq.Init.Datatypes <> Some constr
R79497:79500 Integers <> logn var
R79560:79576 Integers Make is_power2_correct thm
R79560:79576 Integers Make is_power2_correct thm
R79615:79618 Integers Make divu def
R79639:79652 Integers Make shru_div_two_p thm
R79639:79652 Integers Make shru_div_two_p thm
prf 79732:79744 Make shr_div_two_p
R79770:79772 Coq.Init.Logic <> :type_scope:x_'='_x not
R79763:79765 Integers Make shr def
R79769:79769 Integers <> y var
R79767:79767 Integers <> x var
R79773:79776 Integers Make repr def
R79787:79789 Coq.ZArith.BinInt <> :Z_scope:x_'/'_x not
R79779:79784 Integers Make signed def
R79786:79786 Integers <> x var
R79790:79794 Coq.ZArith.Zpower <> two_p def
R79797:79804 Integers Make unsigned def
R79806:79806 Integers <> y var
R79835:79837 Integers Make shr def
R79850:79866 Integers Make Zshiftr_div_two_p thm
R79850:79866 Integers Make Zshiftr_div_two_p thm
R79889:79902 Integers Make unsigned_range thm
R79889:79902 Integers Make unsigned_range thm
prf 79929:79937 Make divs_pow2
R79998:80000 Coq.Init.Logic <> :type_scope:x_'='_x not
R79990:79993 Integers Make divs def
R79997:79997 Integers <> n var
R79995:79995 Integers <> x var
R80001:80004 Integers Make shrx def
R80008:80011 Integers <> logn var
R80006:80006 Integers <> x var
R79972:79974 Coq.Init.Logic <> :type_scope:x_'='_x not
R79961:79969 Integers Make is_power2 def
R79971:79971 Integers <> n var
R79975:79978 Coq.Init.Datatypes <> Some constr
R79980:79983 Integers <> logn var
R80043:80059 Integers Make is_power2_correct thm
R80043:80059 Integers Make is_power2_correct thm
R80085:80088 Integers Make shrx def
R80099:80111 Integers Make shl_mul_two_p thm
R80099:80111 Integers Make shl_mul_two_p thm
R80124:80133 Integers Make mul_commut thm
R80124:80133 Integers Make mul_commut thm
R80144:80150 Integers Make mul_one thm
R80144:80150 Integers Make mul_one thm
R80178:80190 Integers Make repr_unsigned thm
R80178:80190 Integers Make repr_unsigned thm
prf 80272:80289 Make Ztestbit_mod_two_p
R80361:80363 Coq.Init.Logic <> :type_scope:x_'='_x not
R80332:80340 Coq.ZArith.BinInt Z testbit def
R80360:80360 Integers <> i var
R80344:80349 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R80357:80357 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R80343:80343 Integers <> x var
R80350:80354 Coq.ZArith.Zpower <> two_p def
R80356:80356 Integers <> n var
R80367:80369 Coqlib <> zlt def
R80373:80373 Integers <> n var
R80371:80371 Integers <> i var
R80399:80403 Coq.Init.Datatypes <> false constr
R80380:80388 Coq.ZArith.BinInt Z testbit def
R80392:80392 Integers <> i var
R80390:80390 Integers <> x var
R80321:80324 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R80325:80325 Integers <> i var
R80311:80314 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R80315:80315 Integers <> n var
R80466:80476 Coq.ZArith.Wf_Z <> natlike_ind thm
R80466:80476 Coq.ZArith.Wf_Z <> natlike_ind thm
R80505:80509 Coq.ZArith.Zpower <> two_p def
R80505:80509 Coq.ZArith.Zpower <> two_p def
R80530:80537 Coq.ZArith.Zdiv <> Zmod_1_r thm
R80530:80537 Coq.ZArith.Zdiv <> Zmod_1_r thm
R80548:80560 Coq.ZArith.BinInt Z testbit_0_l thm
R80548:80560 Coq.ZArith.BinInt Z testbit_0_l thm
R80576:80584 Coqlib <> zlt_false thm
R80576:80584 Coqlib <> zlt_false thm
R80620:80626 Coq.ZArith.Zpower <> two_p_S thm
R80620:80626 Coq.ZArith.Zpower <> two_p_S thm
R80651:80656 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R80668:80668 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R80658:80660 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R80661:80665 Coq.ZArith.Zpower <> two_p def
R80685:80692 Integers Make Zshiftin def
R80715:80719 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R80706:80711 Coq.ZArith.BinInt Z div2 def
R80720:80724 Coq.ZArith.Zpower <> two_p def
R80695:80699 Coq.ZArith.BinInt Z odd def
R80685:80692 Integers Make Zshiftin def
R80715:80719 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R80706:80711 Coq.ZArith.BinInt Z div2 def
R80720:80724 Coq.ZArith.Zpower <> two_p def
R80695:80699 Coq.ZArith.BinInt Z odd def
R80651:80656 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R80668:80668 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R80658:80660 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R80661:80665 Coq.ZArith.Zpower <> two_p def
R80743:80758 Integers Make Ztestbit_shiftin thm
R80743:80758 Integers Make Ztestbit_shiftin thm
R80776:80786 Integers Make Ztestbit_eq thm
R80776:80786 Integers Make Ztestbit_eq thm
R80811:80813 Coqlib <> zeq def
R80811:80813 Coqlib <> zeq def
R80836:80843 Coqlib <> zlt_true thm
R80836:80843 Coqlib <> zlt_true thm
R80887:80889 Coqlib <> zlt def
R80892:80897 Coq.ZArith.BinInt Z pred def
R80887:80889 Coqlib <> zlt def
R80892:80897 Coq.ZArith.BinInt Z pred def
R80922:80929 Coqlib <> zlt_true thm
R80922:80929 Coqlib <> zlt_true thm
R80961:80969 Coqlib <> zlt_false thm
R80961:80969 Coqlib <> zlt_false thm
R81015:81021 Integers Make Zdecomp thm
R81015:81021 Integers Make Zdecomp thm
R81044:81049 Coq.ZArith.BinInt Z div2 def
R81044:81049 Coq.ZArith.BinInt Z div2 def
R81098:81100 Coq.ZArith.BinInt <> :Z_scope:x_'/'_x not
R81101:81105 Coq.ZArith.Zpower <> two_p def
R81078:81088 Coqlib <> Zmod_unique thm
R81098:81100 Coq.ZArith.BinInt <> :Z_scope:x_'/'_x not
R81101:81105 Coq.ZArith.Zpower <> two_p def
R81078:81088 Coqlib <> Zmod_unique thm
R81126:81138 Integers Make Zshiftin_spec thm
R81126:81138 Integers Make Zshiftin_spec thm
R81126:81138 Integers Make Zshiftin_spec thm
R81126:81138 Integers Make Zshiftin_spec thm
R81149:81159 Coq.ZArith.BinInt <> Zplus_assoc syndef
R81149:81159 Coq.ZArith.BinInt <> Zplus_assoc syndef
R81192:81195 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R81237:81237 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R81220:81222 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R81203:81206 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R81219:81219 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R81196:81200 Coq.ZArith.Zpower <> two_p def
R81209:81211 Coq.ZArith.BinInt <> :Z_scope:x_'/'_x not
R81212:81216 Coq.ZArith.Zpower <> two_p def
R81225:81229 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R81230:81234 Coq.ZArith.Zpower <> two_p def
R81192:81195 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R81237:81237 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R81220:81222 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R81203:81206 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R81219:81219 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R81196:81200 Coq.ZArith.Zpower <> two_p def
R81209:81211 Coq.ZArith.BinInt <> :Z_scope:x_'/'_x not
R81212:81216 Coq.ZArith.Zpower <> two_p def
R81225:81229 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R81230:81234 Coq.ZArith.Zpower <> two_p def
R81262:81273 Coq.ZArith.Zdiv <> Z_div_mod_eq thm
R81262:81273 Coq.ZArith.Zdiv <> Z_div_mod_eq thm
R81282:81294 Coq.ZArith.Zpower <> two_p_gt_ZERO thm
R81282:81294 Coq.ZArith.Zpower <> two_p_gt_ZERO thm
R81329:81341 Integers Make Zshiftin_spec thm
R81329:81341 Integers Make Zshiftin_spec thm
R81353:81360 Coq.ZArith.Zdiv <> Z_mod_lt thm
R81366:81370 Coq.ZArith.Zpower <> two_p def
R81353:81360 Coq.ZArith.Zdiv <> Z_mod_lt thm
R81366:81370 Coq.ZArith.Zpower <> two_p def
R81383:81395 Coq.ZArith.Zpower <> two_p_gt_ZERO thm
R81383:81395 Coq.ZArith.Zpower <> two_p_gt_ZERO thm
R81420:81424 Coq.ZArith.BinInt Z odd def
R81420:81424 Coq.ZArith.BinInt Z odd def
prf 81454:81470 Make Ztestbit_two_p_m1
R81534:81536 Coq.Init.Logic <> :type_scope:x_'='_x not
R81509:81517 Coq.ZArith.BinInt Z testbit def
R81533:81533 Integers <> i var
R81527:81529 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R81520:81524 Coq.ZArith.Zpower <> two_p def
R81526:81526 Integers <> n var
R81540:81542 Coqlib <> zlt def
R81546:81546 Integers <> n var
R81544:81544 Integers <> i var
R81563:81567 Coq.Init.Datatypes <> false constr
R81553:81556 Coq.Init.Datatypes <> true constr
R81498:81501 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R81502:81502 Integers <> i var
R81488:81491 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R81492:81492 Integers <> n var
R81603:81605 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R81596:81600 Coq.ZArith.Zpower <> two_p def
R81615:81615 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R81618:81624 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R81632:81632 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R81625:81629 Coq.ZArith.Zpower <> two_p def
R81615:81615 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R81618:81624 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R81632:81632 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R81625:81629 Coq.ZArith.Zpower <> two_p def
R81603:81605 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R81596:81600 Coq.ZArith.Zpower <> two_p def
R81647:81664 Integers Make Ztestbit_mod_two_p thm
R81647:81664 Integers Make Ztestbit_mod_two_p thm
R81683:81685 Coqlib <> zlt def
R81683:81685 Coqlib <> zlt def
R81705:81715 Integers Make Ztestbit_m1 thm
R81705:81715 Integers Make Ztestbit_m1 thm
R81732:81742 Coqlib <> Zmod_unique thm
R81732:81742 Coqlib <> Zmod_unique thm
R81773:81785 Coq.ZArith.Zpower <> two_p_gt_ZERO thm
R81773:81785 Coq.ZArith.Zpower <> two_p_gt_ZERO thm
prf 81819:81826 Make modu_and
R81887:81889 Coq.Init.Logic <> :type_scope:x_'='_x not
R81879:81882 Integers Make modu def
R81886:81886 Integers <> n var
R81884:81884 Integers <> x var
R81890:81892 Integers Make and def
R81897:81899 Integers Make sub def
R81903:81905 Integers Make one def
R81901:81901 Integers <> n var
R81894:81894 Integers <> x var
R81861:81863 Coq.Init.Logic <> :type_scope:x_'='_x not
R81850:81858 Integers Make is_power2 def
R81860:81860 Integers <> n var
R81864:81867 Coq.Init.Datatypes <> Some constr
R81869:81872 Integers <> logn var
R81938:81954 Integers Make is_power2_correct thm
R81938:81954 Integers Make is_power2_correct thm
R81985:81997 Integers Make is_power2_rng thm
R81985:81997 Integers Make is_power2_rng thm
R82022:82033 Integers Make same_bits_eq thm
R82022:82033 Integers Make same_bits_eq thm
R82054:82061 Integers Make bits_and thm
R82054:82061 Integers Make bits_and thm
R82080:82082 Integers Make sub def
R82093:82104 Integers Make testbit_repr thm
R82093:82104 Integers Make testbit_repr thm
R82135:82146 Integers Make unsigned_one thm
R82135:82146 Integers Make unsigned_one thm
R82159:82162 Integers Make modu def
R82173:82184 Integers Make testbit_repr thm
R82173:82184 Integers Make testbit_repr thm
R82215:82232 Integers Make Ztestbit_mod_two_p thm
R82215:82232 Integers Make Ztestbit_mod_two_p thm
R82243:82259 Integers Make Ztestbit_two_p_m1 thm
R82243:82259 Integers Make Ztestbit_two_p_m1 thm
R82275:82277 Coqlib <> zlt def
R82282:82289 Integers Make unsigned def
R82275:82277 Coqlib <> zlt def
R82282:82289 Integers Make unsigned def
R82310:82320 Coq.Bool.Bool <> andb_true_r thm
R82310:82320 Coq.Bool.Bool <> andb_true_r thm
R82339:82350 Coq.Bool.Bool <> andb_false_r thm
R82339:82350 Coq.Bool.Bool <> andb_false_r thm
R0:-1 Integers <> y var
R0:-1 Integers <> y var
R0:-1 Integers <> y var
R0:-1 Integers <> y var
prf 82467:82476 Make Zquot_Zdiv
R82516:82518 Coq.Init.Logic <> :type_scope:x_'='_x not
R82506:82511 Coq.ZArith.BinInt Z quot def
R82515:82515 Integers <> y var
R82513:82513 Integers <> x var
R82522:82524 Coqlib <> zlt def
R82526:82526 Integers <> x var
R82557:82559 Coq.ZArith.BinInt <> :Z_scope:x_'/'_x not
R82556:82556 Integers <> x var
R82560:82560 Integers <> y var
R82535:82535 Coq.ZArith.BinInt <> :Z_scope:x_'/'_x not
R82545:82548 Coq.ZArith.BinInt <> :Z_scope:x_'/'_x not
R82541:82543 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R82537:82539 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R82536:82536 Integers <> x var
R82540:82540 Integers <> y var
R82549:82549 Integers <> y var
R82496:82498 Coq.ZArith.BinInt <> :Z_scope:x_'>'_x not
R82495:82495 Integers <> y var
R82590:82592 Coqlib <> zlt def
R82590:82592 Coqlib <> zlt def
R82661:82664 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R82670:82670 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R82644:82644 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R82654:82659 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R82650:82652 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R82646:82648 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R82666:82668 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R82620:82636 Coq.ZArith.Zquot <> Zquot_unique_full thm
R82661:82664 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R82670:82670 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R82644:82644 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R82654:82659 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R82650:82652 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R82646:82648 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R82666:82668 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R82620:82636 Coq.ZArith.Zquot <> Zquot_unique_full thm
R82724:82731 Coq.ZArith.Zdiv <> Z_mod_lt thm
R82739:82741 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R82735:82737 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R82724:82731 Coq.ZArith.Zdiv <> Z_mod_lt thm
R82739:82741 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R82735:82737 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R82771:82778 Coq.ZArith.BinInt Z abs_eq thm
R82771:82778 Coq.ZArith.BinInt Z abs_eq thm
R82816:82816 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R82858:82862 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R82866:82866 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R82838:82840 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R82818:82821 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R82837:82837 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R82822:82822 Coq.ZArith.BinInt <> :Z_scope:x_'/'_x not
R82832:82835 Coq.ZArith.BinInt <> :Z_scope:x_'/'_x not
R82828:82830 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R82824:82826 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R82841:82841 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R82851:82856 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R82847:82849 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R82843:82845 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R82864:82864 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R82816:82816 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R82858:82862 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R82866:82866 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R82838:82840 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R82818:82821 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R82837:82837 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R82822:82822 Coq.ZArith.BinInt <> :Z_scope:x_'/'_x not
R82832:82835 Coq.ZArith.BinInt <> :Z_scope:x_'/'_x not
R82828:82830 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R82824:82826 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R82841:82841 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R82851:82856 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R82847:82849 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R82843:82845 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R82864:82864 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R82888:82899 Coq.ZArith.Zdiv <> Z_div_mod_eq thm
R82888:82899 Coq.ZArith.Zdiv <> Z_div_mod_eq thm
R82931:82944 Coq.ZArith.Zquot <> Zquot_Zdiv_pos thm
R82931:82944 Coq.ZArith.Zquot <> Zquot_Zdiv_pos thm
prf 82968:82975 Make shrx_shr
R83043:83045 Coq.Init.Logic <> :type_scope:x_'='_x not
R83035:83038 Integers Make shrx def
R83042:83042 Integers <> y var
R83040:83040 Integers <> x var
R83046:83048 Integers Make shr def
R83105:83105 Integers <> y var
R83054:83055 Integers Make lt def
R83059:83062 Integers Make zero def
R83057:83057 Integers <> x var
R83102:83102 Integers <> x var
R83069:83071 Integers Make add def
R83076:83078 Integers Make sub def
R83092:83094 Integers Make one def
R83081:83083 Integers Make shl def
R83089:83089 Integers <> y var
R83085:83087 Integers Make one def
R83073:83073 Integers <> x var
R83022:83024 Coq.Init.Logic <> :type_scope:x_'='_x not
R82994:82996 Integers Make ltu def
R83001:83004 Integers Make repr def
R83016:83018 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R83007:83015 Integers Make zwordsize def
R82998:82998 Integers <> y var
R83025:83028 Coq.Init.Datatypes <> true constr
R83138:83145 Integers Make unsigned def
R83138:83145 Integers Make unsigned def
R83162:83165 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R83168:83170 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R83180:83182 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R83171:83179 Integers Make zwordsize def
R83162:83165 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R83168:83170 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R83180:83182 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R83171:83179 Integers Make zwordsize def
R83203:83209 Integers Make ltu_inv thm
R83203:83209 Integers Make ltu_inv thm
R83227:83239 Integers Make unsigned_repr thm
R83227:83239 Integers Make unsigned_repr thm
R83264:83275 Integers Make wordsize_pos thm
R83277:83297 Integers Make wordsize_max_unsigned thm
R83264:83275 Integers Make wordsize_pos thm
R83277:83297 Integers Make wordsize_max_unsigned thm
R83317:83329 Integers Make shr_div_two_p thm
R83317:83329 Integers Make shr_div_two_p thm
R83339:83342 Integers Make shrx def
R83352:83355 Integers Make divs def
R83379:83381 Coq.Init.Logic <> :type_scope:x_'='_x not
R83370:83372 Integers Make shl def
R83374:83376 Integers Make one def
R83382:83385 Integers Make repr def
R83388:83392 Coq.ZArith.Zpower <> two_p def
R83379:83381 Coq.Init.Logic <> :type_scope:x_'='_x not
R83370:83372 Integers Make shl def
R83374:83376 Integers Make one def
R83382:83385 Integers Make repr def
R83388:83392 Coq.ZArith.Zpower <> two_p def
R83418:83420 Integers Make mul def
R83427:83430 Integers Make repr def
R83433:83437 Coq.ZArith.Zpower <> two_p def
R83422:83424 Integers Make one def
R83418:83420 Integers Make mul def
R83427:83430 Integers Make repr def
R83433:83437 Coq.ZArith.Zpower <> two_p def
R83422:83424 Integers Make one def
R83466:83473 Integers Make mul_pow2 thm
R83466:83473 Integers Make mul_pow2 thm
R83492:83495 Integers Make repr def
R83492:83495 Integers Make repr def
R83513:83527 Integers Make is_power2_two_p thm
R83513:83527 Integers Make is_power2_two_p thm
R83543:83555 Integers Make repr_unsigned thm
R83543:83555 Integers Make repr_unsigned thm
R83570:83579 Integers Make mul_commut thm
R83570:83579 Integers Make mul_commut thm
R83588:83594 Integers Make mul_one thm
R83588:83594 Integers Make mul_one thm
R83615:83617 Coq.ZArith.BinInt <> :Z_scope:x_'>'_x not
R83607:83611 Coq.ZArith.Zpower <> two_p def
R83615:83617 Coq.ZArith.BinInt <> :Z_scope:x_'>'_x not
R83607:83611 Coq.ZArith.Zpower <> two_p def
R83628:83640 Coq.ZArith.Zpower <> two_p_gt_ZERO thm
R83628:83640 Coq.ZArith.Zpower <> two_p_gt_ZERO thm
R83668:83670 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x not
R83660:83664 Coq.ZArith.Zpower <> two_p def
R83671:83682 Integers Make half_modulus def
R83668:83670 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x not
R83660:83664 Coq.ZArith.Zpower <> two_p def
R83671:83682 Integers Make half_modulus def
R83699:83716 Integers Make half_modulus_power thm
R83699:83716 Integers Make half_modulus_power thm
R83730:83750 Coqlib <> two_p_monotone_strict thm
R83730:83750 Coqlib <> two_p_monotone_strict thm
R83777:83779 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x not
R83769:83773 Coq.ZArith.Zpower <> two_p def
R83780:83786 Integers Make modulus def
R83777:83779 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x not
R83769:83773 Coq.ZArith.Zpower <> two_p def
R83780:83786 Integers Make modulus def
R83802:83814 Integers Make modulus_power thm
R83802:83814 Integers Make modulus_power thm
R83823:83843 Coqlib <> two_p_monotone_strict thm
R83823:83843 Coqlib <> two_p_monotone_strict thm
R83884:83886 Coq.Init.Logic <> :type_scope:x_'='_x not
R83864:83871 Integers Make unsigned def
R83874:83876 Integers Make shl def
R83878:83880 Integers Make one def
R83887:83891 Coq.ZArith.Zpower <> two_p def
R83884:83886 Coq.Init.Logic <> :type_scope:x_'='_x not
R83864:83871 Integers Make unsigned def
R83874:83876 Integers Make shl def
R83878:83880 Integers Make one def
R83887:83891 Coq.ZArith.Zpower <> two_p def
R83920:83932 Integers Make unsigned_repr thm
R83920:83932 Integers Make unsigned_repr thm
R83942:83953 Integers Make max_unsigned def
R83991:83993 Coq.Init.Logic <> :type_scope:x_'='_x not
R83973:83978 Integers Make signed def
R83981:83983 Integers Make shl def
R83985:83987 Integers Make one def
R83994:83998 Coq.ZArith.Zpower <> two_p def
R83991:83993 Coq.Init.Logic <> :type_scope:x_'='_x not
R83973:83978 Integers Make signed def
R83981:83983 Integers Make shl def
R83985:83987 Integers Make one def
R83994:83998 Coq.ZArith.Zpower <> two_p def
R84027:84037 Integers Make signed_repr thm
R84027:84037 Integers Make signed_repr thm
R84051:84060 Integers Make max_signed def
R84074:84087 Integers Make min_signed_neg thm
R84074:84087 Integers Make min_signed_neg thm
R84121:84130 Integers Make Zquot_Zdiv thm
R84121:84130 Integers Make Zquot_Zdiv thm
R84148:84149 Integers Make lt def
R84160:84170 Integers Make signed_zero thm
R84160:84170 Integers Make signed_zero thm
R84187:84189 Coqlib <> zlt def
R84192:84197 Integers Make signed def
R84187:84189 Coqlib <> zlt def
R84192:84197 Integers Make signed def
R84222:84231 Integers Make add_signed thm
R84222:84231 Integers Make add_signed thm
R84272:84274 Coq.Init.Logic <> :type_scope:x_'='_x not
R84244:84249 Integers Make signed def
R84252:84254 Integers Make sub def
R84268:84270 Integers Make one def
R84257:84259 Integers Make shl def
R84261:84263 Integers Make one def
R84283:84285 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R84275:84279 Coq.ZArith.Zpower <> two_p def
R84272:84274 Coq.Init.Logic <> :type_scope:x_'='_x not
R84244:84249 Integers Make signed def
R84252:84254 Integers Make sub def
R84268:84270 Integers Make one def
R84257:84259 Integers Make shl def
R84261:84263 Integers Make one def
R84283:84285 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R84275:84279 Coq.ZArith.Zpower <> two_p def
R84301:84303 Integers Make sub def
R84326:84337 Integers Make unsigned_one thm
R84326:84337 Integers Make unsigned_one thm
R84352:84362 Integers Make signed_repr thm
R84352:84362 Integers Make signed_repr thm
R84380:84393 Integers Make min_signed_neg thm
R84380:84393 Integers Make min_signed_neg thm
R84403:84412 Integers Make max_signed def
R84445:84455 Integers Make signed_repr thm
R84445:84455 Integers Make signed_repr thm
R84497:84508 Integers Make signed_range thm
R84497:84508 Integers Make signed_range thm
R84546:84549 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R84542:84544 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R84534:84538 Coq.ZArith.Zpower <> two_p def
R84550:84559 Integers Make max_signed def
R84546:84549 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R84542:84544 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R84534:84538 Coq.ZArith.Zpower <> two_p def
R84550:84559 Integers Make max_signed def
R84570:84579 Integers Make max_signed def
prf 84610:84619 Make shrx_shr_2
R84687:84689 Coq.Init.Logic <> :type_scope:x_'='_x not
R84679:84682 Integers Make shrx def
R84686:84686 Integers <> y var
R84684:84684 Integers <> x var
R84690:84692 Integers Make shr def
R84758:84758 Integers <> y var
R84695:84697 Integers Make add def
R84702:84705 Integers Make shru def
R84739:84741 Integers Make sub def
R84753:84753 Integers <> y var
R84743:84751 Integers Make iwordsize def
R84708:84710 Integers Make shr def
R84715:84718 Integers Make repr def
R84730:84732 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R84721:84729 Integers Make zwordsize def
R84712:84712 Integers <> x var
R84699:84699 Integers <> x var
R84666:84668 Coq.Init.Logic <> :type_scope:x_'='_x not
R84638:84640 Integers Make ltu def
R84645:84648 Integers Make repr def
R84660:84662 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R84651:84659 Integers Make zwordsize def
R84642:84642 Integers <> y var
R84669:84672 Coq.Init.Datatypes <> true constr
R84789:84796 Integers Make shrx_shr thm
R84789:84796 Integers Make shrx_shr thm
R84826:84836 Integers Make shr_lt_zero thm
R84826:84836 Integers Make shr_lt_zero thm
R84849:84850 Integers Make lt def
R84854:84857 Integers Make zero def
R84849:84850 Integers Make lt def
R84854:84857 Integers Make zero def
R84874:84881 Integers Make unsigned def
R84874:84881 Integers Make unsigned def
R84901:84914 Integers Make unsigned_range thm
R84901:84914 Integers Make unsigned_range thm
R84948:84951 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R84954:84956 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R84966:84968 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R84957:84965 Integers Make zwordsize def
R84948:84951 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R84954:84956 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R84966:84968 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R84957:84965 Integers Make zwordsize def
R84989:84995 Integers Make ltu_inv thm
R84989:84995 Integers Make ltu_inv thm
R85013:85025 Integers Make unsigned_repr thm
R85013:85025 Integers Make unsigned_repr thm
R85050:85061 Integers Make wordsize_pos thm
R85063:85083 Integers Make wordsize_max_unsigned thm
R85050:85061 Integers Make wordsize_pos thm
R85063:85083 Integers Make wordsize_max_unsigned thm
R85111:85113 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x not
R85103:85107 Coq.ZArith.Zpower <> two_p def
R85114:85120 Integers Make modulus def
R85111:85113 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x not
R85103:85107 Coq.ZArith.Zpower <> two_p def
R85114:85120 Integers Make modulus def
R85136:85148 Integers Make modulus_power thm
R85136:85148 Integers Make modulus_power thm
R85157:85177 Coqlib <> two_p_monotone_strict thm
R85157:85177 Coqlib <> two_p_monotone_strict thm
R85207:85219 Integers Make shl_mul_two_p thm
R85207:85219 Integers Make shl_mul_two_p thm
R85239:85248 Integers Make mul_commut thm
R85239:85248 Integers Make mul_commut thm
R85259:85265 Integers Make mul_one thm
R85259:85265 Integers Make mul_one thm
R85277:85279 Integers Make sub def
R85290:85301 Integers Make unsigned_one thm
R85290:85301 Integers Make unsigned_one thm
R85312:85324 Integers Make unsigned_repr thm
R85312:85324 Integers Make unsigned_repr thm
R85338:85359 Integers Make unsigned_repr_wordsize thm
R85338:85359 Integers Make unsigned_repr_wordsize thm
R85380:85391 Integers Make same_bits_eq thm
R85380:85391 Integers Make same_bits_eq thm
R85410:85418 Integers Make bits_shru thm
R85410:85418 Integers Make bits_shru thm
R85440:85451 Integers Make testbit_repr thm
R85440:85451 Integers Make testbit_repr thm
R85470:85486 Integers Make Ztestbit_two_p_m1 thm
R85470:85486 Integers Make Ztestbit_two_p_m1 thm
R85537:85557 Integers Make wordsize_max_unsigned thm
R85508:85520 Integers Make unsigned_repr thm
R85508:85520 Integers Make unsigned_repr thm
R85537:85557 Integers Make wordsize_max_unsigned thm
R85580:85582 Coqlib <> zlt def
R85580:85582 Coqlib <> zlt def
R85602:85609 Coqlib <> zlt_true thm
R85602:85609 Coqlib <> zlt_true thm
R85629:85637 Integers Make bits_mone thm
R85629:85637 Integers Make bits_mone thm
R85665:85673 Coqlib <> zlt_false thm
R85665:85673 Coqlib <> zlt_false thm
R85709:85711 Coq.ZArith.BinInt <> :Z_scope:x_'>'_x not
R85701:85705 Coq.ZArith.Zpower <> two_p def
R85725:85737 Coq.ZArith.Zpower <> two_p_gt_ZERO thm
R85709:85711 Coq.ZArith.BinInt <> :Z_scope:x_'>'_x not
R85701:85705 Coq.ZArith.Zpower <> two_p def
R85725:85737 Coq.ZArith.Zpower <> two_p_gt_ZERO thm
R85755:85766 Integers Make max_unsigned def
R85787:85790 Integers Make shru def
R85798:85800 Integers Make sub def
R85802:85810 Integers Make iwordsize def
R85792:85795 Integers Make zero def
R85821:85824 Integers Make zero def
R85821:85824 Integers Make zero def
R85787:85790 Integers Make shru def
R85798:85800 Integers Make sub def
R85802:85810 Integers Make iwordsize def
R85792:85795 Integers Make zero def
R85838:85845 Integers Make add_zero thm
R85838:85845 Integers Make add_zero thm
R85877:85879 Coqlib <> zlt def
R85914:85922 Integers Make zwordsize def
R85883:85885 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R85886:85893 Integers Make unsigned def
R85896:85898 Integers Make sub def
R85900:85908 Integers Make iwordsize def
R85877:85879 Coqlib <> zlt def
R85914:85922 Integers Make zwordsize def
R85883:85885 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R85886:85893 Integers Make unsigned def
R85896:85898 Integers Make sub def
R85900:85908 Integers Make iwordsize def
prf 85944:85953 Make Zdiv_shift
R85998:86000 Coq.Init.Logic <> :type_scope:x_'='_x not
R85981:85981 Coq.ZArith.BinInt <> :Z_scope:x_'/'_x not
R85993:85996 Coq.ZArith.BinInt <> :Z_scope:x_'/'_x not
R85983:85986 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R85992:85992 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R85982:85982 Integers <> x var
R85988:85990 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R85987:85987 Integers <> y var
R85997:85997 Integers <> y var
R86006:86008 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R86002:86004 Coq.ZArith.BinInt <> :Z_scope:x_'/'_x not
R86001:86001 Integers <> x var
R86005:86005 Integers <> y var
R86012:86014 Coqlib <> zeq def
R86017:86020 Coq.ZArith.Zdiv <> Zmod syndef
R86024:86024 Integers <> y var
R86022:86022 Integers <> x var
R85971:85973 Coq.ZArith.BinInt <> :Z_scope:x_'>'_x not
R85970:85970 Integers <> y var
R86073:86084 Coq.ZArith.Zdiv <> Z_div_mod_eq thm
R86073:86084 Coq.ZArith.Zdiv <> Z_div_mod_eq thm
R86106:86113 Coq.ZArith.Zdiv <> Z_mod_lt thm
R86106:86113 Coq.ZArith.Zdiv <> Z_mod_lt thm
R86138:86140 Coq.ZArith.BinInt <> :Z_scope:x_'/'_x not
R86138:86140 Coq.ZArith.BinInt <> :Z_scope:x_'/'_x not
R86156:86160 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R86156:86160 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R86185:86187 Coqlib <> zeq def
R86185:86187 Coqlib <> zeq def
R86223:86225 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R86204:86214 Coqlib <> Zdiv_unique thm
R86223:86225 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R86204:86214 Coqlib <> Zdiv_unique thm
R86293:86295 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R86274:86284 Coqlib <> Zdiv_unique thm
R86293:86295 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R86274:86284 Coqlib <> Zdiv_unique thm
prf 86339:86348 Make shrx_carry
R86416:86418 Coq.Init.Logic <> :type_scope:x_'='_x not
R86408:86411 Integers Make shrx def
R86415:86415 Integers <> y var
R86413:86413 Integers <> x var
R86419:86421 Integers Make add def
R86434:86442 Integers Make shr_carry def
R86446:86446 Integers <> y var
R86444:86444 Integers <> x var
R86424:86426 Integers Make shr def
R86430:86430 Integers <> y var
R86428:86428 Integers <> x var
R86395:86397 Coq.Init.Logic <> :type_scope:x_'='_x not
R86367:86369 Integers Make ltu def
R86374:86377 Integers Make repr def
R86389:86391 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R86380:86388 Integers Make zwordsize def
R86371:86371 Integers <> y var
R86398:86401 Coq.Init.Datatypes <> true constr
R86475:86482 Integers Make shrx_shr thm
R86475:86482 Integers Make shrx_shr thm
R86498:86506 Integers Make shr_carry def
R86518:86519 Integers Make lt def
R86533:86538 Integers Make signed def
R86533:86538 Integers Make signed def
R86552:86562 Integers Make signed_zero thm
R86552:86562 Integers Make signed_zero thm
R86578:86580 Coqlib <> zlt def
R86578:86580 Coqlib <> zlt def
R86610:86617 Integers Make add_zero thm
R86610:86617 Integers Make add_zero thm
R86639:86646 Integers Make unsigned def
R86639:86646 Integers Make unsigned def
R86663:86666 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R86669:86671 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R86681:86683 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R86672:86680 Integers Make zwordsize def
R86663:86666 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R86669:86671 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R86681:86683 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R86672:86680 Integers Make zwordsize def
R86704:86710 Integers Make ltu_inv thm
R86704:86710 Integers Make ltu_inv thm
R86728:86740 Integers Make unsigned_repr thm
R86728:86740 Integers Make unsigned_repr thm
R86764:86775 Integers Make wordsize_pos thm
R86777:86797 Integers Make wordsize_max_unsigned thm
R86764:86775 Integers Make wordsize_pos thm
R86777:86797 Integers Make wordsize_max_unsigned thm
R86826:86828 Coq.Init.Logic <> :type_scope:x_'='_x not
R86817:86819 Integers Make shl def
R86821:86823 Integers Make one def
R86829:86832 Integers Make repr def
R86835:86839 Coq.ZArith.Zpower <> two_p def
R86826:86828 Coq.Init.Logic <> :type_scope:x_'='_x not
R86817:86819 Integers Make shl def
R86821:86823 Integers Make one def
R86829:86832 Integers Make repr def
R86835:86839 Coq.ZArith.Zpower <> two_p def
R86859:86871 Integers Make shl_mul_two_p thm
R86859:86871 Integers Make shl_mul_two_p thm
R86882:86891 Integers Make mul_commut thm
R86882:86891 Integers Make mul_commut thm
R86900:86906 Integers Make mul_one thm
R86900:86906 Integers Make mul_one thm
R86946:86948 Coq.Init.Logic <> :type_scope:x_'='_x not
R86919:86921 Integers Make and def
R86926:86928 Integers Make sub def
R86942:86944 Integers Make one def
R86931:86933 Integers Make shl def
R86935:86937 Integers Make one def
R86949:86952 Integers Make modu def
R86957:86960 Integers Make repr def
R86963:86967 Coq.ZArith.Zpower <> two_p def
R86946:86948 Coq.Init.Logic <> :type_scope:x_'='_x not
R86919:86921 Integers Make and def
R86926:86928 Integers Make sub def
R86942:86944 Integers Make one def
R86931:86933 Integers Make shl def
R86935:86937 Integers Make one def
R86949:86952 Integers Make modu def
R86957:86960 Integers Make repr def
R86963:86967 Coq.ZArith.Zpower <> two_p def
R87008:87015 Integers Make modu_and thm
R87008:87015 Integers Make modu_and thm
R87047:87061 Integers Make is_power2_two_p thm
R87047:87061 Integers Make is_power2_two_p thm
R87083:87095 Integers Make repr_unsigned thm
R87083:87095 Integers Make repr_unsigned thm
R87159:87171 Integers Make shr_div_two_p thm
R87159:87171 Integers Make shr_div_two_p thm
R87159:87171 Integers Make shr_div_two_p thm
R87159:87171 Integers Make shr_div_two_p thm
R87210:87212 Coq.ZArith.BinInt <> :Z_scope:x_'>'_x not
R87202:87206 Coq.ZArith.Zpower <> two_p def
R87210:87212 Coq.ZArith.BinInt <> :Z_scope:x_'>'_x not
R87202:87206 Coq.ZArith.Zpower <> two_p def
R87223:87235 Coq.ZArith.Zpower <> two_p_gt_ZERO thm
R87223:87235 Coq.ZArith.Zpower <> two_p_gt_ZERO thm
R87263:87265 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x not
R87255:87259 Coq.ZArith.Zpower <> two_p def
R87266:87272 Integers Make modulus def
R87263:87265 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x not
R87255:87259 Coq.ZArith.Zpower <> two_p def
R87266:87272 Integers Make modulus def
R87288:87300 Integers Make modulus_power thm
R87288:87300 Integers Make modulus_power thm
R87309:87329 Coqlib <> two_p_monotone_strict thm
R87309:87329 Coqlib <> two_p_monotone_strict thm
R87357:87359 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x not
R87349:87353 Coq.ZArith.Zpower <> two_p def
R87360:87371 Integers Make half_modulus def
R87357:87359 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x not
R87349:87353 Coq.ZArith.Zpower <> two_p def
R87360:87371 Integers Make half_modulus def
R87388:87405 Integers Make half_modulus_power thm
R87388:87405 Integers Make half_modulus_power thm
R87419:87439 Coqlib <> two_p_monotone_strict thm
R87419:87439 Coqlib <> two_p_monotone_strict thm
R87466:87468 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x not
R87458:87462 Coq.ZArith.Zpower <> two_p def
R87469:87475 Integers Make modulus def
R87466:87468 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x not
R87458:87462 Coq.ZArith.Zpower <> two_p def
R87469:87475 Integers Make modulus def
R87491:87503 Integers Make modulus_power thm
R87491:87503 Integers Make modulus_power thm
R87512:87532 Coqlib <> two_p_monotone_strict thm
R87512:87532 Coqlib <> two_p_monotone_strict thm
R87577:87579 Coq.Init.Logic <> :type_scope:x_'='_x not
R87552:87554 Integers Make sub def
R87574:87576 Integers Make one def
R87557:87560 Integers Make repr def
R87563:87567 Coq.ZArith.Zpower <> two_p def
R87580:87583 Integers Make repr def
R87594:87596 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R87586:87590 Coq.ZArith.Zpower <> two_p def
R87577:87579 Coq.Init.Logic <> :type_scope:x_'='_x not
R87552:87554 Integers Make sub def
R87574:87576 Integers Make one def
R87557:87560 Integers Make repr def
R87563:87567 Coq.ZArith.Zpower <> two_p def
R87580:87583 Integers Make repr def
R87594:87596 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R87586:87590 Coq.ZArith.Zpower <> two_p def
R87613:87615 Integers Make sub def
R87624:87635 Integers Make eqm_samerepr thm
R87624:87635 Integers Make eqm_samerepr thm
R87644:87650 Integers Make eqm_sub thm
R87644:87650 Integers Make eqm_sub thm
R87659:87665 Integers Make eqm_sym thm
R87674:87690 Integers Make eqm_unsigned_repr thm
R87659:87665 Integers Make eqm_sym thm
R87674:87690 Integers Make eqm_unsigned_repr thm
R87706:87717 Integers Make unsigned_one thm
R87706:87717 Integers Make unsigned_one thm
R87726:87733 Integers Make eqm_refl thm
R87726:87733 Integers Make eqm_refl thm
R87758:87767 Integers Make add_signed thm
R87758:87767 Integers Make add_signed thm
R87790:87800 Integers Make signed_repr thm
R87811:87813 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R87803:87807 Coq.ZArith.Zpower <> two_p def
R87790:87800 Integers Make signed_repr thm
R87811:87813 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R87803:87807 Coq.ZArith.Zpower <> two_p def
R87827:87837 Integers Make signed_repr thm
R87827:87837 Integers Make signed_repr thm
R87850:87853 Integers Make modu def
R87864:87876 Integers Make unsigned_repr thm
R87864:87876 Integers Make unsigned_repr thm
R87889:87890 Integers Make eq def
R87901:87913 Integers Make unsigned_zero thm
R87901:87913 Integers Make unsigned_zero thm
R87924:87936 Integers Make unsigned_repr thm
R87924:87936 Integers Make unsigned_repr thm
R87973:87975 Coq.Init.Logic <> :type_scope:x_'='_x not
R87960:87964 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R87950:87957 Integers Make unsigned def
R87965:87969 Coq.ZArith.Zpower <> two_p def
R87978:87982 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R87983:87987 Coq.ZArith.Zpower <> two_p def
R87973:87975 Coq.Init.Logic <> :type_scope:x_'='_x not
R87960:87964 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R87950:87957 Integers Make unsigned def
R87965:87969 Coq.ZArith.Zpower <> two_p def
R87978:87982 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R87983:87987 Coq.ZArith.Zpower <> two_p def
R88004:88015 Integers Make eqmod_mod_eq thm
R88004:88015 Integers Make eqmod_mod_eq thm
R88049:88055 Integers Make modulus def
R88030:88042 Integers Make eqmod_divides thm
R88049:88055 Integers Make modulus def
R88030:88042 Integers Make eqmod_divides thm
R88068:88070 Integers Make eqm def
R88068:88070 Integers Make eqm def
R88090:88096 Integers Make eqm_sym thm
R88090:88096 Integers Make eqm_sym thm
R88105:88123 Integers Make eqm_signed_unsigned thm
R88105:88123 Integers Make eqm_signed_unsigned thm
R88137:88143 Integers Make modulus def
R88154:88172 Coqlib <> two_power_nat_two_p thm
R88154:88172 Coqlib <> two_power_nat_two_p thm
R88188:88192 Coq.ZArith.Zpower <> two_p def
R88204:88206 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R88195:88203 Integers Make zwordsize def
R88188:88192 Coq.ZArith.Zpower <> two_p def
R88204:88206 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R88195:88203 Integers Make zwordsize def
R88224:88235 Coq.ZArith.Zpower <> two_p_is_exp thm
R88224:88235 Coq.ZArith.Zpower <> two_p_is_exp thm
R88256:88264 Integers Make zwordsize def
R88256:88264 Integers Make zwordsize def
R88310:88319 Integers Make Zdiv_shift thm
R88310:88319 Integers Make Zdiv_shift thm
R88337:88339 Integers Make add def
R88348:88359 Integers Make eqm_samerepr thm
R88348:88359 Integers Make eqm_samerepr thm
R88368:88374 Integers Make eqm_add thm
R88368:88374 Integers Make eqm_add thm
R88386:88402 Integers Make eqm_unsigned_repr thm
R88386:88402 Integers Make eqm_unsigned_repr thm
R88418:88420 Coqlib <> zeq def
R88425:88429 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R88430:88434 Coq.ZArith.Zpower <> two_p def
R88418:88420 Coqlib <> zeq def
R88425:88429 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R88430:88434 Coq.ZArith.Zpower <> two_p def
R88461:88473 Integers Make unsigned_zero thm
R88461:88473 Integers Make unsigned_zero thm
R88482:88489 Integers Make eqm_refl thm
R88482:88489 Integers Make eqm_refl thm
R88502:88513 Integers Make unsigned_one thm
R88502:88513 Integers Make unsigned_one thm
R88522:88529 Integers Make eqm_refl thm
R88522:88529 Integers Make eqm_refl thm
R88546:88553 Coq.ZArith.Zdiv <> Z_mod_lt thm
R88569:88573 Coq.ZArith.Zpower <> two_p def
R88556:88563 Integers Make unsigned def
R88546:88553 Coq.ZArith.Zdiv <> Z_mod_lt thm
R88569:88573 Coq.ZArith.Zpower <> two_p def
R88556:88563 Integers Make unsigned def
R88591:88602 Integers Make max_unsigned def
R88621:88632 Integers Make max_unsigned def
R88656:88667 Integers Make signed_range thm
R88656:88667 Integers Make signed_range thm
R88711:88720 Integers Make max_signed def
R88744:88757 Integers Make min_signed_neg thm
R88744:88757 Integers Make min_signed_neg thm
R88767:88776 Integers Make max_signed def
prf 88845:88861 Make shr_shru_positive
R88907:88909 Coq.Init.Logic <> :type_scope:x_'='_x not
R88900:88902 Integers Make shr def
R88906:88906 Integers <> y var
R88904:88904 Integers <> x var
R88910:88913 Integers Make shru def
R88917:88917 Integers <> y var
R88915:88915 Integers <> x var
R88888:88891 Coq.ZArith.BinInt <> :Z_scope:x_'>='_x not
R88880:88885 Integers Make signed def
R88887:88887 Integers <> x var
R88947:88959 Integers Make shr_div_two_p thm
R88947:88959 Integers Make shr_div_two_p thm
R88970:88983 Integers Make shru_div_two_p thm
R88970:88983 Integers Make shru_div_two_p thm
R88996:89013 Integers Make signed_eq_unsigned thm
R88996:89013 Integers Make signed_eq_unsigned thm
R89028:89042 Integers Make signed_positive thm
R89028:89042 Integers Make signed_positive thm
prf 89063:89074 Make and_positive
R89124:89127 Coq.ZArith.BinInt <> :Z_scope:x_'>='_x not
R89108:89113 Integers Make signed def
R89116:89118 Integers Make and def
R89122:89122 Integers <> y var
R89120:89120 Integers <> x var
R89099:89102 Coq.ZArith.BinInt <> :Z_scope:x_'>='_x not
R89091:89096 Integers Make signed def
R89098:89098 Integers <> y var
R89168:89170 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x not
R89158:89165 Integers Make unsigned def
R89171:89182 Integers Make half_modulus def
R89168:89170 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x not
R89158:89165 Integers Make unsigned def
R89171:89182 Integers Make half_modulus def
R89194:89208 Integers Make signed_positive thm
R89194:89208 Integers Make signed_positive thm
R89223:89232 Integers Make max_signed def
R89261:89280 Integers Make sign_bit_of_unsigned thm
R89261:89280 Integers Make sign_bit_of_unsigned thm
R89294:89301 Coqlib <> zlt_true thm
R89294:89301 Coqlib <> zlt_true thm
R89334:89353 Integers Make sign_bit_of_unsigned thm
R89356:89358 Integers Make and def
R89334:89353 Integers Make sign_bit_of_unsigned thm
R89356:89358 Integers Make and def
R89375:89382 Integers Make bits_and thm
R89375:89382 Integers Make bits_and thm
R89407:89418 Coq.Bool.Bool <> andb_false_r thm
R89407:89418 Coq.Bool.Bool <> andb_false_r thm
R89428:89433 Integers Make signed def
R89448:89450 Coqlib <> zlt def
R89473:89484 Integers Make half_modulus def
R89453:89460 Integers Make unsigned def
R89463:89465 Integers Make and def
R89448:89450 Coqlib <> zlt def
R89473:89484 Integers Make half_modulus def
R89453:89460 Integers Make unsigned def
R89463:89465 Integers Make and def
R89510:89523 Integers Make unsigned_range thm
R89526:89528 Integers Make and def
R89510:89523 Integers Make unsigned_range thm
R89526:89528 Integers Make and def
R89571:89582 Integers Make wordsize_pos thm
R89571:89582 Integers Make wordsize_pos thm
prf 89606:89624 Make shr_and_is_shru_and
R89681:89683 Coq.Init.Logic <> :type_scope:x_'='_x not
R89666:89668 Integers Make shr def
R89680:89680 Integers <> z var
R89671:89673 Integers Make and def
R89677:89677 Integers <> y var
R89675:89675 Integers <> x var
R89684:89687 Integers Make shru def
R89699:89699 Integers <> z var
R89690:89692 Integers Make and def
R89696:89696 Integers <> y var
R89694:89694 Integers <> x var
R89654:89656 Coq.Init.Logic <> :type_scope:x_'='_x not
R89645:89646 Integers Make lt def
R89650:89653 Integers Make zero def
R89648:89648 Integers <> y var
R89657:89661 Coq.Init.Datatypes <> false constr
R89725:89741 Integers Make shr_shru_positive thm
R89725:89741 Integers Make shr_shru_positive thm
R89750:89761 Integers Make and_positive thm
R89750:89761 Integers Make and_positive thm
R89774:89775 Integers Make lt def
R89791:89801 Integers Make signed_zero thm
R89791:89801 Integers Make signed_zero thm
R89819:89821 Coqlib <> zlt def
R89824:89829 Integers Make signed def
R89819:89821 Coqlib <> zlt def
R89824:89829 Integers Make signed def
prf 89936:89945 Make Ziter_base
R89978:89978 Integers <> A var
R89973:89973 Integers <> A var
R90006:90008 Coq.Init.Logic <> :type_scope:x_'='_x not
R89994:89999 Coq.ZArith.BinInt Z iter def
R90005:90005 Integers <> x var
R90003:90003 Integers <> f var
R90001:90001 Integers <> n var
R90009:90009 Integers <> x var
R89985:89988 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R89984:89984 Integers <> n var
R90036:90041 Coq.ZArith.BinInt Z iter def
prf 90103:90112 Make Ziter_succ
R90145:90145 Integers <> A var
R90140:90140 Integers <> A var
R90184:90186 Coq.Init.Logic <> :type_scope:x_'='_x not
R90163:90168 Coq.ZArith.BinInt Z iter def
R90183:90183 Integers <> x var
R90181:90181 Integers <> f var
R90171:90176 Coq.ZArith.BinInt Z succ def
R90178:90178 Integers <> n var
R90187:90187 Integers <> f var
R90190:90195 Coq.ZArith.BinInt Z iter def
R90201:90201 Integers <> x var
R90199:90199 Integers <> f var
R90197:90197 Integers <> n var
R90154:90157 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R90158:90158 Integers <> n var
R90264:90274 Coq.PArith.BinPos Pos add_1_r thm
R90264:90274 Coq.PArith.BinPos Pos add_1_r thm
R90283:90295 Coq.PArith.BinPos Pos iter_succ thm
R90283:90295 Coq.PArith.BinPos Pos iter_succ thm
prf 90342:90353 Make Znatlike_ind
R90369:90369 Coq.Numbers.BinNums <> Z ind
R90471:90471 Integers <> P var
R90473:90473 Integers <> n var
R90442:90442 Integers <> P var
R90445:90450 Coq.ZArith.BinInt Z succ def
R90452:90452 Integers <> n var
R90435:90435 Integers <> P var
R90437:90437 Integers <> n var
R90426:90429 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R90430:90430 Integers <> n var
R90404:90404 Integers <> P var
R90406:90406 Integers <> n var
R90395:90398 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R90394:90394 Integers <> n var
R90503:90505 Coqlib <> zle def
R90503:90505 Coqlib <> zle def
R90521:90531 Coq.ZArith.Wf_Z <> natlike_ind thm
R90521:90531 Coq.ZArith.Wf_Z <> natlike_ind thm
prf 90587:90600 Make Zzero_ext_spec
R90658:90660 Coq.Init.Logic <> :type_scope:x_'='_x not
R90631:90639 Coq.ZArith.BinInt Z testbit def
R90657:90657 Integers <> i var
R90642:90650 Integers Make Zzero_ext def
R90654:90654 Integers <> x var
R90652:90652 Integers <> n var
R90664:90666 Coqlib <> zlt def
R90670:90670 Integers <> n var
R90668:90668 Integers <> i var
R90696:90700 Coq.Init.Datatypes <> false constr
R90677:90685 Coq.ZArith.BinInt Z testbit def
R90689:90689 Integers <> i var
R90687:90687 Integers <> x var
R90620:90623 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R90624:90624 Integers <> i var
R90719:90727 Integers Make Zzero_ext def
R90748:90759 Integers Make Znatlike_ind thm
R90748:90759 Integers Make Znatlike_ind thm
R90783:90792 Integers Make Ziter_base thm
R90783:90792 Integers Make Ziter_base thm
R90813:90821 Coqlib <> zlt_false thm
R90813:90821 Coqlib <> zlt_false thm
R90832:90841 Integers Make Ztestbit_0 thm
R90832:90841 Integers Make Ztestbit_0 thm
R90877:90886 Integers Make Ziter_succ thm
R90877:90886 Integers Make Ziter_succ thm
R90908:90923 Integers Make Ztestbit_shiftin thm
R90908:90923 Integers Make Ztestbit_shiftin thm
R90946:90956 Integers Make Ztestbit_eq thm
R90946:90956 Integers Make Ztestbit_eq thm
R90985:90987 Coqlib <> zeq def
R90985:90987 Coqlib <> zeq def
R91018:91025 Coqlib <> zlt_true thm
R91018:91025 Coqlib <> zlt_true thm
R91070:91072 Coqlib <> zlt def
R91075:91080 Coq.ZArith.BinInt Z pred def
R91070:91072 Coqlib <> zlt def
R91075:91080 Coq.ZArith.BinInt Z pred def
R91103:91110 Coqlib <> zlt_true thm
R91103:91110 Coqlib <> zlt_true thm
R91140:91148 Coqlib <> zlt_false thm
R91140:91148 Coqlib <> zlt_false thm
prf 91189:91201 Make bits_zero_ext
R91257:91259 Coq.Init.Logic <> :type_scope:x_'='_x not
R91233:91239 Integers Make testbit def
R91256:91256 Integers <> i var
R91242:91249 Integers Make zero_ext def
R91253:91253 Integers <> x var
R91251:91251 Integers <> n var
R91263:91265 Coqlib <> zlt def
R91269:91269 Integers <> n var
R91267:91267 Integers <> i var
R91293:91297 Coq.Init.Datatypes <> false constr
R91276:91282 Integers Make testbit def
R91286:91286 Integers <> i var
R91284:91284 Integers <> x var
R91222:91225 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R91226:91226 Integers <> i var
R91324:91331 Integers Make zero_ext def
R91344:91346 Coqlib <> zlt def
R91350:91358 Integers Make zwordsize def
R91344:91346 Coqlib <> zlt def
R91350:91358 Integers Make zwordsize def
R91372:91383 Integers Make testbit_repr thm
R91372:91383 Integers Make testbit_repr thm
R91400:91413 Integers Make Zzero_ext_spec thm
R91400:91413 Integers Make Zzero_ext_spec thm
R91440:91449 Integers Make bits_above thm
R91440:91449 Integers Make bits_above thm
R91440:91449 Integers Make bits_above thm
R91440:91449 Integers Make bits_above thm
R91468:91470 Coqlib <> zlt def
R91468:91470 Coqlib <> zlt def
prf 91496:91509 Make Zsign_ext_spec
R91576:91578 Coq.Init.Logic <> :type_scope:x_'='_x not
R91549:91557 Coq.ZArith.BinInt Z testbit def
R91575:91575 Integers <> i var
R91560:91568 Integers Make Zsign_ext def
R91572:91572 Integers <> x var
R91570:91570 Integers <> n var
R91579:91587 Coq.ZArith.BinInt Z testbit def
R91595:91597 Coqlib <> zlt def
R91601:91601 Integers <> n var
R91599:91599 Integers <> i var
R91616:91618 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R91615:91615 Integers <> n var
R91608:91608 Integers <> i var
R91589:91589 Integers <> x var
R91539:91541 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x not
R91542:91542 Integers <> n var
R91529:91532 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R91533:91533 Integers <> i var
R91689:91707 Coq.ZArith.Wf_Z <> Zlt_lower_bound_ind thm
R91689:91707 Coq.ZArith.Wf_Z <> Zlt_lower_bound_ind thm
R91735:91743 Integers Make Zsign_ext def
R91768:91770 Coqlib <> zeq def
R91768:91770 Coqlib <> zeq def
R91819:91821 Coqlib <> zlt def
R91819:91821 Coqlib <> zlt def
R91864:91876 Integers Make Ztestbit_base thm
R91864:91876 Integers Make Ztestbit_base thm
R91895:91899 Coq.ZArith.BinInt Z odd def
R91895:91899 Coq.ZArith.BinInt Z odd def
R91919:91929 Integers Make Ztestbit_m1 thm
R91919:91929 Integers Make Ztestbit_m1 thm
R91951:91960 Integers Make Ztestbit_0 thm
R91951:91960 Integers Make Ztestbit_0 thm
R91979:91981 Coqlib <> zlt def
R91979:91981 Coqlib <> zlt def
R92013:92018 Coq.ZArith.BinInt Z pred def
R92013:92018 Coq.ZArith.BinInt Z pred def
R92041:92046 Coq.ZArith.BinInt Z succ def
R92049:92054 Coq.ZArith.BinInt Z pred def
R92041:92046 Coq.ZArith.BinInt Z succ def
R92049:92054 Coq.ZArith.BinInt Z pred def
R92076:92085 Integers Make Ziter_succ thm
R92076:92085 Integers Make Ziter_succ thm
R92096:92111 Integers Make Ztestbit_shiftin thm
R92096:92111 Integers Make Ztestbit_shiftin thm
R92131:92133 Coqlib <> zeq def
R92131:92133 Coqlib <> zeq def
R92167:92174 Coqlib <> zlt_true thm
R92167:92174 Coqlib <> zlt_true thm
R92185:92197 Integers Make Ztestbit_base thm
R92185:92197 Integers Make Ztestbit_base thm
R92253:92255 Coqlib <> zlt def
R92269:92274 Coq.ZArith.BinInt Z pred def
R92258:92263 Coq.ZArith.BinInt Z pred def
R92253:92255 Coqlib <> zlt def
R92269:92274 Coq.ZArith.BinInt Z pred def
R92258:92263 Coq.ZArith.BinInt Z pred def
R92297:92304 Coqlib <> zlt_true thm
R92297:92304 Coqlib <> zlt_true thm
R92316:92326 Integers Make Ztestbit_eq thm
R92316:92326 Integers Make Ztestbit_eq thm
R92349:92357 Coqlib <> zeq_false thm
R92349:92357 Coqlib <> zeq_false thm
R92389:92397 Coqlib <> zlt_false thm
R92389:92397 Coqlib <> zlt_false thm
R92409:92419 Integers Make Ztestbit_eq thm
R92423:92425 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R92409:92419 Integers Make Ztestbit_eq thm
R92423:92425 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R92442:92450 Coqlib <> zeq_false thm
R92442:92450 Coqlib <> zeq_false thm
prf 92592:92604 Make bits_sign_ext
R92681:92683 Coq.Init.Logic <> :type_scope:x_'='_x not
R92657:92663 Integers Make testbit def
R92680:92680 Integers <> i var
R92666:92673 Integers Make sign_ext def
R92677:92677 Integers <> x var
R92675:92675 Integers <> n var
R92684:92690 Integers Make testbit def
R92698:92700 Coqlib <> zlt def
R92704:92704 Integers <> n var
R92702:92702 Integers <> i var
R92719:92721 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R92718:92718 Integers <> n var
R92711:92711 Integers <> i var
R92692:92692 Integers <> x var
R92647:92649 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x not
R92650:92650 Integers <> n var
R92625:92628 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R92630:92632 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R92629:92629 Integers <> i var
R92629:92629 Integers <> i var
R92633:92641 Integers Make zwordsize def
R92750:92757 Integers Make sign_ext def
R92770:92781 Integers Make testbit_repr thm
R92770:92781 Integers Make testbit_repr thm
R92798:92811 Integers Make Zsign_ext_spec thm
R92798:92811 Integers Make Zsign_ext_spec thm
R92824:92826 Coqlib <> zlt def
R92824:92826 Coqlib <> zlt def
R92875:92887 Integers Make bits_zero_ext thm
R92889:92901 Integers Make bits_sign_ext thm
prf 92919:92932 Make zero_ext_above
R92979:92981 Coq.Init.Logic <> :type_scope:x_'='_x not
R92967:92974 Integers Make zero_ext def
R92978:92978 Integers <> x var
R92976:92976 Integers <> n var
R92982:92982 Integers <> x var
R92950:92953 Coq.ZArith.BinInt <> :Z_scope:x_'>='_x not
R92949:92949 Integers <> n var
R92954:92962 Integers Make zwordsize def
R93008:93019 Integers Make same_bits_eq thm
R93008:93019 Integers Make same_bits_eq thm
R93040:93052 Integers Make bits_zero_ext thm
R93040:93052 Integers Make bits_zero_ext thm
R93061:93068 Coqlib <> zlt_true thm
R93061:93068 Coqlib <> zlt_true thm
prf 93099:93112 Make sign_ext_above
R93159:93161 Coq.Init.Logic <> :type_scope:x_'='_x not
R93147:93154 Integers Make sign_ext def
R93158:93158 Integers <> x var
R93156:93156 Integers <> n var
R93162:93162 Integers <> x var
R93130:93133 Coq.ZArith.BinInt <> :Z_scope:x_'>='_x not
R93129:93129 Integers <> n var
R93134:93142 Integers Make zwordsize def
R93188:93199 Integers Make same_bits_eq thm
R93188:93199 Integers Make same_bits_eq thm
R93219:93226 Integers Make sign_ext def
R93237:93248 Integers Make testbit_repr thm
R93237:93248 Integers Make testbit_repr thm
R93268:93281 Integers Make Zsign_ext_spec thm
R93268:93281 Integers Make Zsign_ext_spec thm
R93292:93299 Coqlib <> zlt_true thm
R93292:93299 Coqlib <> zlt_true thm
prf 93343:93354 Make zero_ext_and
R93393:93395 Coq.Init.Logic <> :type_scope:x_'='_x not
R93381:93388 Integers Make zero_ext def
R93392:93392 Integers <> x var
R93390:93390 Integers <> n var
R93396:93398 Integers Make and def
R93403:93406 Integers Make repr def
R93416:93418 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R93409:93413 Coq.ZArith.Zpower <> two_p def
R93415:93415 Integers <> n var
R93400:93400 Integers <> x var
R93372:93375 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R93376:93376 Integers <> n var
R93452:93463 Integers Make testbit_repr thm
R93452:93463 Integers Make testbit_repr thm
R93480:93496 Integers Make Ztestbit_two_p_m1 thm
R93480:93496 Integers Make Ztestbit_two_p_m1 thm
R0:-1 Integers <> y var
R0:-1 Integers <> y var
R0:-1 Integers <> y var
R93522:93524 Coqlib <> zlt def
R93522:93524 Coqlib <> zlt def
R93543:93553 Coq.Bool.Bool <> andb_true_r thm
R93543:93553 Coq.Bool.Bool <> andb_true_r thm
R93573:93584 Coq.Bool.Bool <> andb_false_r thm
R93573:93584 Coq.Bool.Bool <> andb_false_r thm
R0:-1 Integers <> y var
prf 93616:93627 Make zero_ext_mod
R93692:93694 Coq.Init.Logic <> :type_scope:x_'='_x not
R93669:93676 Integers Make unsigned def
R93679:93686 Integers Make zero_ext def
R93690:93690 Integers <> x var
R93688:93688 Integers <> n var
R93695:93698 Coq.ZArith.Zdiv <> Zmod syndef
R93714:93718 Coq.ZArith.Zpower <> two_p def
R93720:93720 Integers <> n var
R93701:93708 Integers Make unsigned def
R93710:93710 Integers <> x var
R93645:93648 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R93650:93652 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R93649:93649 Integers <> n var
R93649:93649 Integers <> n var
R93653:93661 Integers Make zwordsize def
R93747:93761 Integers Make equal_same_bits thm
R93747:93761 Integers Make equal_same_bits thm
R93782:93799 Integers Make Ztestbit_mod_two_p thm
R93782:93799 Integers Make Ztestbit_mod_two_p thm
R93816:93822 Integers Make testbit def
R93825:93832 Integers Make zero_ext def
R93816:93822 Integers Make testbit def
R93825:93832 Integers Make zero_ext def
R93856:93858 Coqlib <> zlt def
R93862:93870 Integers Make zwordsize def
R93856:93858 Coqlib <> zlt def
R93862:93870 Integers Make zwordsize def
R93884:93896 Integers Make bits_zero_ext thm
R93884:93896 Integers Make bits_zero_ext thm
R93915:93924 Integers Make bits_above thm
R93915:93924 Integers Make bits_above thm
R93935:93943 Coqlib <> zlt_false thm
R93935:93943 Coqlib <> zlt_false thm
prf 93990:94003 Make zero_ext_widen
R94067:94069 Coq.Init.Logic <> :type_scope:x_'='_x not
R94041:94048 Integers Make zero_ext def
R94054:94061 Integers Make zero_ext def
R94065:94065 Integers <> x var
R94063:94063 Integers <> n var
R94050:94051 Integers <> n' var
R94070:94077 Integers Make zero_ext def
R94081:94081 Integers <> x var
R94079:94079 Integers <> n var
R94024:94027 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<='_x not
R94029:94032 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<='_x not
R94028:94028 Integers <> n var
R94028:94028 Integers <> n var
R94033:94034 Integers <> n' var
R94114:94116 Coqlib <> zlt def
R94114:94116 Coqlib <> zlt def
R94133:94140 Coqlib <> zlt_true thm
R94133:94140 Coqlib <> zlt_true thm
R94163:94165 Coqlib <> zlt def
R94163:94165 Coqlib <> zlt def
R0:-1 Integers <> y var
R0:-1 Integers <> y var
prf 94210:94223 Make sign_ext_widen
R94287:94289 Coq.Init.Logic <> :type_scope:x_'='_x not
R94261:94268 Integers Make sign_ext def
R94274:94281 Integers Make sign_ext def
R94285:94285 Integers <> x var
R94283:94283 Integers <> n var
R94270:94271 Integers <> n' var
R94290:94297 Integers Make sign_ext def
R94301:94301 Integers <> x var
R94299:94299 Integers <> n var
R94244:94246 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x_'<='_x not
R94248:94252 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x_'<='_x not
R94247:94247 Integers <> n var
R94247:94247 Integers <> n var
R94253:94254 Integers <> n' var
R94331:94333 Coqlib <> zlt def
R94338:94346 Integers Make zwordsize def
R94331:94333 Coqlib <> zlt def
R94338:94346 Integers Make zwordsize def
R94373:94375 Coqlib <> zlt def
R94373:94375 Coqlib <> zlt def
R94403:94411 Coqlib <> zlt_false thm
R94403:94411 Coqlib <> zlt_false thm
R94434:94436 Coqlib <> zlt def
R94441:94443 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R94434:94436 Coqlib <> zlt def
R94441:94443 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R94495:94497 Coqlib <> zlt def
R94495:94497 Coqlib <> zlt def
R94538:94551 Integers Make sign_ext_above thm
R94538:94551 Integers Make sign_ext_above thm
prf 94574:94592 Make sign_zero_ext_widen
R94655:94657 Coq.Init.Logic <> :type_scope:x_'='_x not
R94629:94636 Integers Make sign_ext def
R94642:94649 Integers Make zero_ext def
R94653:94653 Integers <> x var
R94651:94651 Integers <> n var
R94638:94639 Integers <> n' var
R94658:94665 Integers Make zero_ext def
R94669:94669 Integers <> x var
R94667:94667 Integers <> n var
R94613:94616 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R94618:94620 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R94617:94617 Integers <> n var
R94617:94617 Integers <> n var
R94621:94622 Integers <> n' var
R94699:94701 Coqlib <> zlt def
R94706:94714 Integers Make zwordsize def
R94699:94701 Coqlib <> zlt def
R94706:94714 Integers Make zwordsize def
R94744:94746 Coqlib <> zlt def
R94744:94746 Coqlib <> zlt def
R94774:94782 Coqlib <> zlt_false thm
R94774:94782 Coqlib <> zlt_false thm
R94774:94782 Coqlib <> zlt_false thm
R94774:94782 Coqlib <> zlt_false thm
R94825:94827 Coqlib <> zlt def
R94825:94827 Coqlib <> zlt def
R94860:94873 Integers Make sign_ext_above thm
R94860:94873 Integers Make sign_ext_above thm
prf 94896:94910 Make zero_ext_narrow
R94974:94976 Coq.Init.Logic <> :type_scope:x_'='_x not
R94948:94955 Integers Make zero_ext def
R94960:94967 Integers Make zero_ext def
R94972:94972 Integers <> x var
R94969:94970 Integers <> n' var
R94957:94957 Integers <> n var
R94977:94984 Integers Make zero_ext def
R94988:94988 Integers <> x var
R94986:94986 Integers <> n var
R94931:94934 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<='_x not
R94936:94939 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<='_x not
R94935:94935 Integers <> n var
R94935:94935 Integers <> n var
R94940:94941 Integers <> n' var
R95021:95023 Coqlib <> zlt def
R95021:95023 Coqlib <> zlt def
R95040:95047 Coqlib <> zlt_true thm
R95040:95047 Coqlib <> zlt_true thm
prf 95103:95117 Make sign_ext_narrow
R95180:95182 Coq.Init.Logic <> :type_scope:x_'='_x not
R95154:95161 Integers Make sign_ext def
R95166:95173 Integers Make sign_ext def
R95178:95178 Integers <> x var
R95175:95176 Integers <> n' var
R95163:95163 Integers <> n var
R95183:95190 Integers Make sign_ext def
R95194:95194 Integers <> x var
R95192:95192 Integers <> n var
R95138:95140 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x_'<='_x not
R95142:95145 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x_'<='_x not
R95141:95141 Integers <> n var
R95141:95141 Integers <> n var
R95146:95147 Integers <> n' var
R95224:95226 Coqlib <> zlt def
R95230:95238 Integers Make zwordsize def
R95224:95226 Coqlib <> zlt def
R95230:95238 Integers Make zwordsize def
R95265:95267 Coqlib <> zlt def
R95290:95297 Coqlib <> zlt_true thm
R95265:95267 Coqlib <> zlt def
R95290:95297 Coqlib <> zlt_true thm
R95290:95297 Coqlib <> zlt_true thm
R95329:95331 Coqlib <> zlt def
R95329:95331 Coqlib <> zlt def
R95373:95386 Integers Make sign_ext_above thm
R95373:95386 Integers Make sign_ext_above thm
prf 95422:95441 Make zero_sign_ext_narrow
R95504:95506 Coq.Init.Logic <> :type_scope:x_'='_x not
R95478:95485 Integers Make zero_ext def
R95490:95497 Integers Make sign_ext def
R95502:95502 Integers <> x var
R95499:95500 Integers <> n' var
R95487:95487 Integers <> n var
R95507:95514 Integers Make zero_ext def
R95518:95518 Integers <> x var
R95516:95516 Integers <> n var
R95462:95464 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x_'<='_x not
R95466:95469 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x_'<='_x not
R95465:95465 Integers <> n var
R95465:95465 Integers <> n var
R95470:95471 Integers <> n' var
R95548:95550 Coqlib <> zlt def
R95555:95563 Integers Make zwordsize def
R95548:95550 Coqlib <> zlt def
R95555:95563 Integers Make zwordsize def
R95593:95595 Coqlib <> zlt def
R95593:95595 Coqlib <> zlt def
R95619:95626 Coqlib <> zlt_true thm
R95619:95626 Coqlib <> zlt_true thm
R95675:95688 Integers Make sign_ext_above thm
R95675:95688 Integers Make sign_ext_above thm
prf 95711:95723 Make zero_ext_idem
R95775:95777 Coq.Init.Logic <> :type_scope:x_'='_x not
R95750:95757 Integers Make zero_ext def
R95762:95769 Integers Make zero_ext def
R95773:95773 Integers <> x var
R95771:95771 Integers <> n var
R95759:95759 Integers <> n var
R95778:95785 Integers Make zero_ext def
R95789:95789 Integers <> x var
R95787:95787 Integers <> n var
R95741:95744 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R95745:95745 Integers <> n var
R95815:95828 Integers Make zero_ext_widen thm
R95815:95828 Integers Make zero_ext_widen thm
prf 95852:95864 Make sign_ext_idem
R95915:95917 Coq.Init.Logic <> :type_scope:x_'='_x not
R95890:95897 Integers Make sign_ext def
R95902:95909 Integers Make sign_ext def
R95913:95913 Integers <> x var
R95911:95911 Integers <> n var
R95899:95899 Integers <> n var
R95918:95925 Integers Make sign_ext def
R95929:95929 Integers <> x var
R95927:95927 Integers <> n var
R95882:95884 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x not
R95885:95885 Integers <> n var
R95955:95968 Integers Make sign_ext_widen thm
R95955:95968 Integers Make sign_ext_widen thm
prf 95992:96008 Make sign_ext_zero_ext
R96059:96061 Coq.Init.Logic <> :type_scope:x_'='_x not
R96034:96041 Integers Make sign_ext def
R96046:96053 Integers Make zero_ext def
R96057:96057 Integers <> x var
R96055:96055 Integers <> n var
R96043:96043 Integers <> n var
R96062:96069 Integers Make sign_ext def
R96073:96073 Integers <> x var
R96071:96071 Integers <> n var
R96026:96028 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x not
R96029:96029 Integers <> n var
R96103:96105 Coqlib <> zlt def
R96109:96117 Integers Make zwordsize def
R96103:96105 Coqlib <> zlt def
R96109:96117 Integers Make zwordsize def
R96147:96149 Coqlib <> zlt def
R96147:96149 Coqlib <> zlt def
R96168:96175 Coqlib <> zlt_true thm
R96168:96175 Coqlib <> zlt_true thm
R96194:96201 Coqlib <> zlt_true thm
R96194:96201 Coqlib <> zlt_true thm
R96230:96232 Coqlib <> zlt def
R96230:96232 Coqlib <> zlt def
R96257:96270 Integers Make zero_ext_above thm
R96257:96270 Integers Make zero_ext_above thm
prf 96293:96309 Make zero_ext_sign_ext
R96360:96362 Coq.Init.Logic <> :type_scope:x_'='_x not
R96335:96342 Integers Make zero_ext def
R96347:96354 Integers Make sign_ext def
R96358:96358 Integers <> x var
R96356:96356 Integers <> n var
R96344:96344 Integers <> n var
R96363:96370 Integers Make zero_ext def
R96374:96374 Integers <> x var
R96372:96372 Integers <> n var
R96327:96329 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x not
R96330:96330 Integers <> n var
R96400:96419 Integers Make zero_sign_ext_narrow thm
R96400:96419 Integers Make zero_sign_ext_narrow thm
prf 96443:96470 Make sign_ext_equal_if_zero_equal
R96545:96547 Coq.Init.Logic <> :type_scope:x_'='_x not
R96533:96540 Integers Make sign_ext def
R96544:96544 Integers <> x var
R96542:96542 Integers <> n var
R96548:96555 Integers Make sign_ext def
R96559:96559 Integers <> y var
R96557:96557 Integers <> n var
R96512:96514 Coq.Init.Logic <> :type_scope:x_'='_x not
R96500:96507 Integers Make zero_ext def
R96511:96511 Integers <> x var
R96509:96509 Integers <> n var
R96515:96522 Integers Make zero_ext def
R96526:96526 Integers <> y var
R96524:96524 Integers <> n var
R96490:96492 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x not
R96493:96493 Integers <> n var
R96591:96607 Integers Make sign_ext_zero_ext thm
R96591:96607 Integers Make sign_ext_zero_ext thm
R96631:96647 Integers Make sign_ext_zero_ext thm
R96631:96647 Integers Make sign_ext_zero_ext thm
prf 96683:96699 Make zero_ext_shru_shl
R96750:96753 Integers Make repr def
R96765:96767 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R96756:96764 Integers Make zwordsize def
R96768:96768 Integers <> n var
R96788:96790 Coq.Init.Logic <> :type_scope:x_'='_x not
R96776:96783 Integers Make zero_ext def
R96787:96787 Integers <> x var
R96785:96785 Integers <> n var
R96791:96794 Integers Make shru def
R96806:96806 Integers <> y var
R96797:96799 Integers Make shl def
R96803:96803 Integers <> y var
R96801:96801 Integers <> x var
R96719:96721 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x_'<'_x not
R96723:96725 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x_'<'_x not
R96722:96722 Integers <> n var
R96722:96722 Integers <> n var
R96726:96734 Integers Make zwordsize def
R96846:96848 Coq.Init.Logic <> :type_scope:x_'='_x not
R96836:96843 Integers Make unsigned def
R96858:96860 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R96849:96857 Integers Make zwordsize def
R96846:96848 Coq.Init.Logic <> :type_scope:x_'='_x not
R96836:96843 Integers Make unsigned def
R96858:96860 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R96849:96857 Integers Make zwordsize def
R96885:96897 Integers Make unsigned_repr thm
R96885:96897 Integers Make unsigned_repr thm
R96911:96931 Integers Make wordsize_max_unsigned thm
R96911:96931 Integers Make wordsize_max_unsigned thm
R96949:96960 Integers Make same_bits_eq thm
R96949:96960 Integers Make same_bits_eq thm
R96981:96993 Integers Make bits_zero_ext thm
R96981:96993 Integers Make bits_zero_ext thm
R97007:97015 Integers Make bits_shru thm
R97007:97015 Integers Make bits_shru thm
R97036:97038 Coqlib <> zlt def
R97036:97038 Coqlib <> zlt def
R97056:97063 Coqlib <> zlt_true thm
R97056:97063 Coqlib <> zlt_true thm
R97074:97081 Integers Make bits_shl thm
R97074:97081 Integers Make bits_shl thm
R97092:97100 Coqlib <> zlt_false thm
R97092:97100 Coqlib <> zlt_false thm
R97154:97162 Coqlib <> zlt_false thm
R97154:97162 Coqlib <> zlt_false thm
prf 97202:97217 Make sign_ext_shr_shl
R97268:97271 Integers Make repr def
R97283:97285 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R97274:97282 Integers Make zwordsize def
R97286:97286 Integers <> n var
R97306:97308 Coq.Init.Logic <> :type_scope:x_'='_x not
R97294:97301 Integers Make sign_ext def
R97305:97305 Integers <> x var
R97303:97303 Integers <> n var
R97309:97311 Integers Make shr def
R97323:97323 Integers <> y var
R97314:97316 Integers Make shl def
R97320:97320 Integers <> y var
R97318:97318 Integers <> x var
R97237:97239 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x_'<'_x not
R97241:97243 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x_'<'_x not
R97240:97240 Integers <> n var
R97240:97240 Integers <> n var
R97244:97252 Integers Make zwordsize def
R97363:97365 Coq.Init.Logic <> :type_scope:x_'='_x not
R97353:97360 Integers Make unsigned def
R97375:97377 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R97366:97374 Integers Make zwordsize def
R97363:97365 Coq.Init.Logic <> :type_scope:x_'='_x not
R97353:97360 Integers Make unsigned def
R97375:97377 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R97366:97374 Integers Make zwordsize def
R97402:97414 Integers Make unsigned_repr thm
R97402:97414 Integers Make unsigned_repr thm
R97428:97448 Integers Make wordsize_max_unsigned thm
R97428:97448 Integers Make wordsize_max_unsigned thm
R97466:97477 Integers Make same_bits_eq thm
R97466:97477 Integers Make same_bits_eq thm
R97498:97510 Integers Make bits_sign_ext thm
R97498:97510 Integers Make bits_sign_ext thm
R97524:97531 Integers Make bits_shr thm
R97524:97531 Integers Make bits_shr thm
R97552:97554 Coqlib <> zlt def
R97552:97554 Coqlib <> zlt def
R97572:97579 Coqlib <> zlt_true thm
R97572:97579 Coqlib <> zlt_true thm
R97590:97597 Integers Make bits_shl thm
R97590:97597 Integers Make bits_shl thm
R97608:97616 Coqlib <> zlt_false thm
R97608:97616 Coqlib <> zlt_false thm
R97670:97678 Coqlib <> zlt_false thm
R97670:97678 Coqlib <> zlt_false thm
R97689:97696 Integers Make bits_shl thm
R97689:97696 Integers Make bits_shl thm
R97707:97715 Coqlib <> zlt_false thm
R97707:97715 Coqlib <> zlt_false thm
prf 97890:97903 Make zero_ext_range
R97943:97946 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R97970:97972 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R97947:97954 Integers Make unsigned def
R97957:97964 Integers Make zero_ext def
R97968:97968 Integers <> x var
R97966:97966 Integers <> n var
R97947:97954 Integers Make unsigned def
R97957:97964 Integers Make zero_ext def
R97968:97968 Integers <> x var
R97966:97966 Integers <> n var
R97973:97977 Coq.ZArith.Zpower <> two_p def
R97979:97979 Integers <> n var
R97921:97924 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R97926:97928 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R97925:97925 Integers <> n var
R97925:97925 Integers <> n var
R97929:97937 Integers Make zwordsize def
R98007:98018 Integers Make zero_ext_mod thm
R98007:98018 Integers Make zero_ext_mod thm
R98033:98040 Coq.ZArith.Zdiv <> Z_mod_lt thm
R98033:98040 Coq.ZArith.Zdiv <> Z_mod_lt thm
R98049:98061 Coq.ZArith.Zpower <> two_p_gt_ZERO thm
R98049:98061 Coq.ZArith.Zpower <> two_p_gt_ZERO thm
prf 98084:98097 Make eqmod_zero_ext
R98136:98140 Integers Make eqmod def
R98179:98186 Integers Make unsigned def
R98188:98188 Integers <> x var
R98153:98160 Integers Make unsigned def
R98163:98170 Integers Make zero_ext def
R98174:98174 Integers <> x var
R98172:98172 Integers <> n var
R98143:98147 Coq.ZArith.Zpower <> two_p def
R98149:98149 Integers <> n var
R98115:98118 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R98120:98122 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R98119:98119 Integers <> n var
R98119:98119 Integers <> n var
R98123:98131 Integers Make zwordsize def
R98217:98228 Integers Make zero_ext_mod thm
R98217:98228 Integers Make zero_ext_mod thm
R98243:98251 Integers Make eqmod_sym thm
R98243:98251 Integers Make eqmod_sym thm
R98260:98268 Integers Make eqmod_mod thm
R98260:98268 Integers Make eqmod_mod thm
R98280:98292 Coq.ZArith.Zpower <> two_p_gt_ZERO thm
R98280:98292 Coq.ZArith.Zpower <> two_p_gt_ZERO thm
prf 98432:98445 Make sign_ext_range
R98495:98498 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R98520:98522 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R98483:98483 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R98484:98488 Coq.ZArith.Zpower <> two_p def
R98492:98492 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R98491:98491 Integers <> n var
R98499:98504 Integers Make signed def
R98507:98514 Integers Make sign_ext def
R98518:98518 Integers <> x var
R98516:98516 Integers <> n var
R98499:98504 Integers Make signed def
R98507:98514 Integers Make sign_ext def
R98518:98518 Integers <> x var
R98516:98516 Integers <> n var
R98523:98527 Coq.ZArith.Zpower <> two_p def
R98531:98531 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R98530:98530 Integers <> n var
R98463:98465 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x_'<'_x not
R98467:98469 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x_'<'_x not
R98466:98466 Integers <> n var
R98466:98466 Integers <> n var
R98470:98478 Integers Make zwordsize def
R98561:98576 Integers Make sign_ext_shr_shl thm
R98561:98576 Integers Make sign_ext_shr_shl thm
R98598:98600 Integers Make shl def
R98605:98608 Integers Make repr def
R98620:98622 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R98611:98619 Integers Make zwordsize def
R98598:98600 Integers Make shl def
R98605:98608 Integers Make repr def
R98620:98622 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R98611:98619 Integers Make zwordsize def
R98652:98654 Coq.ZArith.BinInt <> :Z_scope:x_'>'_x not
R98639:98643 Coq.ZArith.Zpower <> two_p def
R98647:98649 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R98668:98680 Coq.ZArith.Zpower <> two_p_gt_ZERO thm
R98652:98654 Coq.ZArith.BinInt <> :Z_scope:x_'>'_x not
R98639:98643 Coq.ZArith.Zpower <> two_p def
R98647:98649 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R98668:98680 Coq.ZArith.Zpower <> two_p_gt_ZERO thm
R98732:98734 Coq.Init.Logic <> :type_scope:x_'='_x not
R98701:98708 Integers Make unsigned def
R98711:98714 Integers Make repr def
R98726:98728 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R98717:98725 Integers Make zwordsize def
R98744:98746 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R98735:98743 Integers Make zwordsize def
R98732:98734 Coq.Init.Logic <> :type_scope:x_'='_x not
R98701:98708 Integers Make unsigned def
R98711:98714 Integers Make repr def
R98726:98728 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R98717:98725 Integers Make zwordsize def
R98744:98746 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R98735:98743 Integers Make zwordsize def
R98761:98773 Integers Make unsigned_repr thm
R98761:98773 Integers Make unsigned_repr thm
R98806:98826 Integers Make wordsize_max_unsigned thm
R98806:98826 Integers Make wordsize_max_unsigned thm
R98846:98858 Integers Make shr_div_two_p thm
R98846:98858 Integers Make shr_div_two_p thm
R98871:98881 Integers Make signed_repr thm
R98871:98881 Integers Make signed_repr thm
R98906:98920 Coqlib <> Zdiv_interval_1 thm
R98906:98920 Coqlib <> Zdiv_interval_1 thm
R98946:98958 Coq.ZArith.Zpower <> two_p_gt_ZERO thm
R98946:98958 Coq.ZArith.Zpower <> two_p_gt_ZERO thm
R98994:98996 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R98979:98980 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R98981:98985 Coq.ZArith.Zpower <> two_p def
R98989:98991 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R98997:99001 Coq.ZArith.Zpower <> two_p def
R99013:99015 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R99004:99012 Integers Make zwordsize def
R99031:99033 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R99071:99071 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R99047:99049 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R99034:99038 Coq.ZArith.Zpower <> two_p def
R99042:99044 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R99050:99054 Coq.ZArith.Zpower <> two_p def
R99066:99068 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R99057:99065 Integers Make zwordsize def
R99031:99033 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R99071:99071 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R99047:99049 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R99034:99038 Coq.ZArith.Zpower <> two_p def
R99042:99044 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R99050:99054 Coq.ZArith.Zpower <> two_p def
R99066:99068 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R99057:99065 Integers Make zwordsize def
R98994:98996 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R98979:98980 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R98981:98985 Coq.ZArith.Zpower <> two_p def
R98989:98991 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R98997:99001 Coq.ZArith.Zpower <> two_p def
R99013:99015 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R99004:99012 Integers Make zwordsize def
R99096:99107 Coq.ZArith.Zpower <> two_p_is_exp thm
R99096:99107 Coq.ZArith.Zpower <> two_p_is_exp thm
R99126:99129 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R99143:99143 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R99122:99124 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R99139:99141 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R99130:99138 Integers Make zwordsize def
R99161:99163 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R99152:99160 Integers Make zwordsize def
R99161:99163 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R99152:99160 Integers Make zwordsize def
R99126:99129 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R99143:99143 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R99122:99124 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R99139:99141 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R99130:99138 Integers Make zwordsize def
R99190:99207 Integers Make half_modulus_power thm
R99190:99207 Integers Make half_modulus_power thm
R99224:99235 Integers Make signed_range thm
R99224:99235 Integers Make signed_range thm
R99248:99257 Integers Make min_signed def
R99260:99269 Integers Make max_signed def
R99304:99318 Coqlib <> Zdiv_interval_2 thm
R99304:99318 Coqlib <> Zdiv_interval_2 thm
R99327:99338 Integers Make signed_range thm
R99327:99338 Integers Make signed_range thm
R99355:99368 Integers Make min_signed_neg thm
R99355:99368 Integers Make min_signed_neg thm
R99391:99404 Integers Make max_signed_pos thm
R99391:99404 Integers Make max_signed_pos thm
R99434:99446 Coq.ZArith.Zpower <> two_p_gt_ZERO thm
R99434:99446 Coq.ZArith.Zpower <> two_p_gt_ZERO thm
prf 99468:99482 Make eqmod_sign_ext'
R99522:99526 Integers Make eqmod def
R99565:99572 Integers Make unsigned def
R99574:99574 Integers <> x var
R99539:99546 Integers Make unsigned def
R99549:99556 Integers Make sign_ext def
R99560:99560 Integers <> x var
R99558:99558 Integers <> n var
R99529:99533 Coq.ZArith.Zpower <> two_p def
R99535:99535 Integers <> n var
R99500:99502 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x_'<'_x not
R99504:99506 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x_'<'_x not
R99503:99503 Integers <> n var
R99503:99503 Integers <> n var
R99507:99515 Integers Make zwordsize def
R99608:99615 Coq.ZArith.BinInt Z to_nat def
R99608:99615 Coq.ZArith.BinInt Z to_nat def
R99641:99643 Coq.Init.Logic <> :type_scope:x_'='_x not
R99631:99638 Coq.ZArith.BinInt Z of_nat def
R99657:99664 Coq.ZArith.Znat Z2Nat id thm
R99641:99643 Coq.Init.Logic <> :type_scope:x_'='_x not
R99631:99638 Coq.ZArith.BinInt Z of_nat def
R99657:99664 Coq.ZArith.Znat Z2Nat id thm
R99703:99721 Coqlib <> two_power_nat_two_p thm
R99703:99721 Coqlib <> two_power_nat_two_p thm
R99733:99747 Integers Make eqmod_same_bits thm
R99733:99747 Integers Make eqmod_same_bits thm
R99800:99806 Integers Make testbit def
R99809:99816 Integers Make sign_ext def
R99800:99806 Integers Make testbit def
R99809:99816 Integers Make sign_ext def
R99835:99847 Integers Make bits_sign_ext thm
R99835:99847 Integers Make bits_sign_ext thm
R99861:99868 Coqlib <> zlt_true thm
R99861:99868 Coqlib <> zlt_true thm
prf 99910:99923 Make eqmod_sign_ext
R99963:99967 Integers Make eqmod def
R100004:100011 Integers Make unsigned def
R100013:100013 Integers <> x var
R99980:99985 Integers Make signed def
R99988:99995 Integers Make sign_ext def
R99999:99999 Integers <> x var
R99997:99997 Integers <> n var
R99970:99974 Coq.ZArith.Zpower <> two_p def
R99976:99976 Integers <> n var
R99941:99943 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x_'<'_x not
R99945:99947 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x_'<'_x not
R99944:99944 Integers <> n var
R99944:99944 Integers <> n var
R99948:99956 Integers Make zwordsize def
R100058:100065 Integers Make unsigned def
R100068:100075 Integers Make sign_ext def
R100040:100050 Integers Make eqmod_trans thm
R100058:100065 Integers Make unsigned def
R100068:100075 Integers Make sign_ext def
R100040:100050 Integers Make eqmod_trans thm
R100112:100118 Integers Make modulus def
R100093:100105 Integers Make eqmod_divides thm
R100112:100118 Integers Make modulus def
R100093:100105 Integers Make eqmod_divides thm
R100127:100145 Integers Make eqm_signed_unsigned thm
R100127:100145 Integers Make eqm_signed_unsigned thm
R100159:100163 Coq.ZArith.Zpower <> two_p def
R100175:100177 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R100166:100174 Integers Make zwordsize def
R100159:100163 Coq.ZArith.Zpower <> two_p def
R100175:100177 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R100166:100174 Integers Make zwordsize def
R100193:100199 Integers Make modulus def
R100210:100228 Coqlib <> two_power_nat_two_p thm
R100210:100228 Coqlib <> two_power_nat_two_p thm
R100236:100244 Integers Make zwordsize def
R100236:100244 Integers Make zwordsize def
R100260:100271 Coq.ZArith.Zpower <> two_p_is_exp thm
R100260:100271 Coq.ZArith.Zpower <> two_p_is_exp thm
R100313:100327 Integers Make eqmod_sign_ext' thm
R100313:100327 Integers Make eqmod_sign_ext' thm
prf 100426:100439 Make one_bits_range
R100492:100494 Coq.Init.Logic <> :type_scope:x_'='_x not
R100477:100479 Integers Make ltu def
R100483:100491 Integers Make iwordsize def
R100481:100481 Integers <> i var
R100495:100498 Coq.Init.Datatypes <> true constr
R100456:100457 Coq.Lists.List <> In def
R100462:100469 Integers Make one_bits def
R100471:100471 Integers <> x var
R100459:100459 Integers <> i var
R100575:100577 Coq.Init.Logic <> :type_scope:x_'='_x not
R100553:100555 Integers Make ltu def
R100566:100574 Integers Make iwordsize def
R100558:100561 Integers Make repr def
R100563:100563 Integers <> p var
R100578:100581 Coq.Init.Datatypes <> true constr
R100532:100535 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R100537:100539 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R100536:100536 Integers <> p var
R100536:100536 Integers <> p var
R100540:100548 Integers Make zwordsize def
R100575:100577 Coq.Init.Logic <> :type_scope:x_'='_x not
R100553:100555 Integers Make ltu def
R100566:100574 Integers Make iwordsize def
R100558:100561 Integers Make repr def
R100563:100563 Integers <> p var
R100578:100581 Coq.Init.Datatypes <> true constr
R100532:100535 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R100537:100539 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R100536:100536 Integers <> p var
R100536:100536 Integers <> p var
R100540:100548 Integers Make zwordsize def
R100604:100606 Integers Make ltu def
R100609:100617 Integers Make iwordsize def
R100626:100633 Coqlib <> zlt_true thm
R100626:100633 Coqlib <> zlt_true thm
R100656:100668 Integers Make unsigned_repr thm
R100656:100668 Integers Make unsigned_repr thm
R100656:100668 Integers Make unsigned_repr thm
R100656:100668 Integers Make unsigned_repr thm
R100656:100668 Integers Make unsigned_repr thm
R100656:100668 Integers Make unsigned_repr thm
R0:-1 Integers <> y var
R100694:100714 Integers Make wordsize_max_unsigned thm
R100694:100714 Integers Make wordsize_max_unsigned thm
R100739:100759 Integers Make wordsize_max_unsigned thm
R100739:100759 Integers Make wordsize_max_unsigned thm
R100786:100793 Integers Make one_bits def
R100813:100827 Coqlib <> list_in_map_inv thm
R100813:100827 Coqlib <> list_in_map_inv thm
R100904:100911 Integers Make unsigned def
R100881:100896 Integers Make Z_one_bits_range thm
R100904:100911 Integers Make unsigned def
R100881:100896 Integers Make Z_one_bits_range thm
def 100938:100952 Make int_of_one_bits
R100958:100961 Coq.Init.Datatypes <> list ind
R100963:100965 Integers Make int rec
R100970:100972 Integers Make int rec
R100985:100985 Integers <> l var
R100996:100998 Coq.Init.Datatypes <> nil constr
R101003:101006 Integers Make zero def
R101013:101016 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R101022:101024 Integers Make add def
R101039:101053 Integers <> int_of_one_bits def
R101027:101029 Integers Make shl def
R101031:101033 Integers Make one def
prf 101074:101088 Make one_bits_decomp
R101104:101106 Coq.Init.Logic <> :type_scope:x_'='_x not
R101103:101103 Integers <> x var
R101107:101121 Integers Make int_of_one_bits def
R101124:101131 Integers Make one_bits def
R101133:101133 Integers <> x var
R101171:101174 Integers Make repr def
R101177:101186 Integers Make powerserie def
R101189:101198 Integers Make Z_one_bits def
R101210:101217 Integers Make unsigned def
R101200:101207 Integers Make wordsize def
R101171:101174 Integers Make repr def
R101177:101186 Integers Make powerserie def
R101189:101198 Integers Make Z_one_bits def
R101210:101217 Integers Make unsigned def
R101200:101207 Integers Make wordsize def
R101244:101247 Integers Make repr def
R101250:101257 Integers Make unsigned def
R101244:101247 Integers Make repr def
R101250:101257 Integers Make unsigned def
R101295:101315 Integers Make Z_one_bits_powerserie thm
R101295:101315 Integers Make Z_one_bits_powerserie thm
R101345:101352 Integers Make one_bits def
R101370:101385 Integers Make Z_one_bits_range thm
R101388:101395 Integers Make unsigned def
R101370:101385 Integers Make Z_one_bits_range thm
R101388:101395 Integers Make unsigned def
R101416:101425 Integers Make Z_one_bits def
R101437:101444 Integers Make unsigned def
R101427:101434 Integers Make wordsize def
R101416:101425 Integers Make Z_one_bits def
R101437:101444 Integers Make unsigned def
R101427:101434 Integers Make wordsize def
R101531:101533 Integers Make add def
R101542:101553 Integers Make eqm_samerepr thm
R101542:101553 Integers Make eqm_samerepr thm
R101564:101570 Integers Make eqm_add thm
R101564:101570 Integers Make eqm_add thm
R101581:101593 Integers Make shl_mul_two_p thm
R101581:101593 Integers Make shl_mul_two_p thm
R101604:101613 Integers Make mul_commut thm
R101604:101613 Integers Make mul_commut thm
R101627:101633 Integers Make mul_one thm
R101627:101633 Integers Make mul_one thm
R101642:101660 Integers Make eqm_unsigned_repr_r thm
R101642:101660 Integers Make eqm_unsigned_repr_r thm
R101674:101686 Integers Make unsigned_repr thm
R101674:101686 Integers Make unsigned_repr thm
R101724:101728 Coq.Lists.List <> in_eq thm
R101724:101728 Coq.Lists.List <> in_eq thm
R101748:101768 Integers Make wordsize_max_unsigned thm
R101748:101768 Integers Make wordsize_max_unsigned thm
prf 101886:101895 Make negate_cmp
R101943:101945 Coq.Init.Logic <> :type_scope:x_'='_x not
R101914:101916 Integers Make cmp def
R101942:101942 Integers <> y var
R101940:101940 Integers <> x var
R101919:101935 Integers Make negate_comparison def
R101937:101937 Integers <> c var
R101946:101949 Coq.Init.Datatypes <> negb def
R101952:101954 Integers Make cmp def
R101960:101960 Integers <> y var
R101958:101958 Integers <> x var
R101956:101956 Integers <> c var
R102012:102020 Coq.Bool.Bool <> negb_elim syndef
R102012:102020 Coq.Bool.Bool <> negb_elim syndef
R102012:102020 Coq.Bool.Bool <> negb_elim syndef
R102012:102020 Coq.Bool.Bool <> negb_elim syndef
R102012:102020 Coq.Bool.Bool <> negb_elim syndef
R102012:102020 Coq.Bool.Bool <> negb_elim syndef
R102012:102020 Coq.Bool.Bool <> negb_elim syndef
prf 102043:102053 Make negate_cmpu
R102102:102104 Coq.Init.Logic <> :type_scope:x_'='_x not
R102072:102075 Integers Make cmpu def
R102101:102101 Integers <> y var
R102099:102099 Integers <> x var
R102078:102094 Integers Make negate_comparison def
R102096:102096 Integers <> c var
R102105:102108 Coq.Init.Datatypes <> negb def
R102111:102114 Integers Make cmpu def
R102120:102120 Integers <> y var
R102118:102118 Integers <> x var
R102116:102116 Integers <> c var
R102172:102180 Coq.Bool.Bool <> negb_elim syndef
R102172:102180 Coq.Bool.Bool <> negb_elim syndef
R102172:102180 Coq.Bool.Bool <> negb_elim syndef
R102172:102180 Coq.Bool.Bool <> negb_elim syndef
R102172:102180 Coq.Bool.Bool <> negb_elim syndef
R102172:102180 Coq.Bool.Bool <> negb_elim syndef
R102172:102180 Coq.Bool.Bool <> negb_elim syndef
prf 102203:102210 Make swap_cmp
R102256:102258 Coq.Init.Logic <> :type_scope:x_'='_x not
R102229:102231 Integers Make cmp def
R102255:102255 Integers <> y var
R102253:102253 Integers <> x var
R102234:102248 Integers Make swap_comparison def
R102250:102250 Integers <> c var
R102259:102261 Integers Make cmp def
R102267:102267 Integers <> x var
R102265:102265 Integers <> y var
R102263:102263 Integers <> c var
R102318:102323 Integers Make eq_sym thm
R102318:102323 Integers Make eq_sym thm
R102339:102344 Integers Make eq_sym thm
R102339:102344 Integers Make eq_sym thm
prf 102361:102369 Make swap_cmpu
R102416:102418 Coq.Init.Logic <> :type_scope:x_'='_x not
R102388:102391 Integers Make cmpu def
R102415:102415 Integers <> y var
R102413:102413 Integers <> x var
R102394:102408 Integers Make swap_comparison def
R102410:102410 Integers <> c var
R102419:102422 Integers Make cmpu def
R102428:102428 Integers <> x var
R102426:102426 Integers <> y var
R102424:102424 Integers <> c var
R102479:102484 Integers Make eq_sym thm
R102479:102484 Integers Make eq_sym thm
R102500:102505 Integers Make eq_sym thm
R102500:102505 Integers Make eq_sym thm
prf 102520:102531 Make translate_eq
R102574:102576 Coq.Init.Logic <> :type_scope:x_'='_x not
R102552:102553 Integers Make eq def
R102566:102568 Integers Make add def
R102572:102572 Integers <> d var
R102570:102570 Integers <> y var
R102556:102558 Integers Make add def
R102562:102562 Integers <> d var
R102560:102560 Integers <> x var
R102577:102578 Integers Make eq def
R102582:102582 Integers <> y var
R102580:102580 Integers <> x var
R102609:102610 Integers Make eq def
R102619:102621 Coqlib <> zeq def
R102637:102644 Integers Make unsigned def
R102624:102631 Integers Make unsigned def
R102619:102621 Coqlib <> zeq def
R102637:102644 Integers Make unsigned def
R102624:102631 Integers Make unsigned def
R102667:102669 Integers Make add def
R102689:102696 Coqlib <> zeq_true thm
R102689:102696 Coqlib <> zeq_true thm
R102707:102715 Coqlib <> zeq_false thm
R102707:102715 Coqlib <> zeq_false thm
R102725:102727 Integers Make add def
R102760:102771 Integers Make eqm_small_eq thm
R102760:102771 Integers Make eqm_small_eq thm
R102801:102808 Integers Make unsigned def
R102819:102819 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R102843:102846 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R102830:102832 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R102820:102827 Integers Make unsigned def
R102833:102840 Integers Make unsigned def
R102847:102854 Integers Make unsigned def
R102819:102819 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R102843:102846 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R102830:102832 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R102820:102827 Integers Make unsigned def
R102833:102840 Integers Make unsigned def
R102847:102854 Integers Make unsigned def
R102801:102808 Integers Make unsigned def
R102871:102878 Integers Make unsigned def
R102889:102889 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R102913:102916 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R102900:102902 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R102890:102897 Integers Make unsigned def
R102903:102910 Integers Make unsigned def
R102917:102924 Integers Make unsigned def
R102889:102889 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R102913:102916 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R102900:102902 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R102890:102897 Integers Make unsigned def
R102903:102910 Integers Make unsigned def
R102917:102924 Integers Make unsigned def
R102871:102878 Integers Make unsigned def
R102938:102944 Integers Make eqm_sub thm
R102938:102944 Integers Make eqm_sub thm
R102969:102976 Integers Make unsigned def
R102979:102982 Integers Make repr def
R102995:102997 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R102985:102992 Integers Make unsigned def
R102998:103005 Integers Make unsigned def
R102953:102961 Integers Make eqm_trans thm
R102969:102976 Integers Make unsigned def
R102979:102982 Integers Make repr def
R102995:102997 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R102985:102992 Integers Make unsigned def
R102998:103005 Integers Make unsigned def
R102953:102961 Integers Make eqm_trans thm
R103054:103061 Integers Make unsigned def
R103064:103067 Integers Make repr def
R103080:103082 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R103070:103077 Integers Make unsigned def
R103083:103090 Integers Make unsigned def
R103038:103046 Integers Make eqm_trans thm
R103054:103061 Integers Make unsigned def
R103064:103067 Integers Make repr def
R103080:103082 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R103070:103077 Integers Make unsigned def
R103083:103090 Integers Make unsigned def
R103038:103046 Integers Make eqm_trans thm
prf 103179:103191 Make translate_ltu
R103335:103337 Coq.Init.Logic <> :type_scope:x_'='_x not
R103312:103314 Integers Make ltu def
R103327:103329 Integers Make add def
R103333:103333 Integers <> d var
R103331:103331 Integers <> y var
R103317:103319 Integers Make add def
R103323:103323 Integers <> d var
R103321:103321 Integers <> x var
R103338:103340 Integers Make ltu def
R103344:103344 Integers <> y var
R103342:103342 Integers <> x var
R103263:103266 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<='_x not
R103290:103293 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<='_x not
R103277:103279 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R103267:103274 Integers Make unsigned def
R103276:103276 Integers <> y var
R103280:103287 Integers Make unsigned def
R103289:103289 Integers <> d var
R103277:103279 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R103267:103274 Integers Make unsigned def
R103276:103276 Integers <> y var
R103280:103287 Integers Make unsigned def
R103289:103289 Integers <> d var
R103294:103305 Integers Make max_unsigned def
R103213:103216 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<='_x not
R103240:103243 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<='_x not
R103227:103229 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R103217:103224 Integers Make unsigned def
R103226:103226 Integers <> x var
R103230:103237 Integers Make unsigned def
R103239:103239 Integers <> d var
R103227:103229 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R103217:103224 Integers Make unsigned def
R103226:103226 Integers <> x var
R103230:103237 Integers Make unsigned def
R103239:103239 Integers <> d var
R103244:103255 Integers Make max_unsigned def
R103371:103373 Integers Make add def
R103383:103385 Integers Make ltu def
R103405:103417 Integers Make unsigned_repr thm
R103405:103417 Integers Make unsigned_repr thm
R103405:103417 Integers Make unsigned_repr thm
R103405:103417 Integers Make unsigned_repr thm
R103405:103417 Integers Make unsigned_repr thm
R103405:103417 Integers Make unsigned_repr thm
R103432:103434 Coqlib <> zlt def
R103450:103457 Integers Make unsigned def
R103437:103444 Integers Make unsigned def
R103432:103434 Coqlib <> zlt def
R103450:103457 Integers Make unsigned def
R103437:103444 Integers Make unsigned def
R103479:103486 Coqlib <> zlt_true thm
R103479:103486 Coqlib <> zlt_true thm
R103504:103512 Coqlib <> zlt_false thm
R103504:103512 Coqlib <> zlt_false thm
prf 103536:103549 Make translate_cmpu
R103698:103700 Coq.Init.Logic <> :type_scope:x_'='_x not
R103672:103675 Integers Make cmpu def
R103690:103692 Integers Make add def
R103696:103696 Integers <> d var
R103694:103694 Integers <> y var
R103680:103682 Integers Make add def
R103686:103686 Integers <> d var
R103684:103684 Integers <> x var
R103677:103677 Integers <> c var
R103701:103704 Integers Make cmpu def
R103710:103710 Integers <> y var
R103708:103708 Integers <> x var
R103706:103706 Integers <> c var
R103623:103626 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<='_x not
R103650:103653 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<='_x not
R103637:103639 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R103627:103634 Integers Make unsigned def
R103636:103636 Integers <> y var
R103640:103647 Integers Make unsigned def
R103649:103649 Integers <> d var
R103637:103639 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R103627:103634 Integers Make unsigned def
R103636:103636 Integers <> y var
R103640:103647 Integers Make unsigned def
R103649:103649 Integers <> d var
R103654:103665 Integers Make max_unsigned def
R103573:103576 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<='_x not
R103600:103603 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<='_x not
R103587:103589 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R103577:103584 Integers Make unsigned def
R103586:103586 Integers <> x var
R103590:103597 Integers Make unsigned def
R103599:103599 Integers <> d var
R103587:103589 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R103577:103584 Integers Make unsigned def
R103586:103586 Integers <> x var
R103590:103597 Integers Make unsigned def
R103599:103599 Integers <> d var
R103604:103615 Integers Make max_unsigned def
R103737:103740 Integers Make cmpu def
R103753:103764 Integers Make translate_eq thm
R103753:103764 Integers Make translate_eq thm
R103782:103794 Integers Make translate_ltu thm
R103782:103794 Integers Make translate_ltu thm
R103782:103794 Integers Make translate_ltu thm
R103782:103794 Integers Make translate_ltu thm
R103782:103794 Integers Make translate_ltu thm
R103782:103794 Integers Make translate_ltu thm
R103782:103794 Integers Make translate_ltu thm
R103782:103794 Integers Make translate_ltu thm
prf 103817:103828 Make translate_lt
R103977:103979 Coq.Init.Logic <> :type_scope:x_'='_x not
R103955:103956 Integers Make lt def
R103969:103971 Integers Make add def
R103975:103975 Integers <> d var
R103973:103973 Integers <> y var
R103959:103961 Integers Make add def
R103965:103965 Integers <> d var
R103963:103963 Integers <> x var
R103980:103981 Integers Make lt def
R103985:103985 Integers <> y var
R103983:103983 Integers <> x var
R103912:103915 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<='_x not
R103935:103938 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<='_x not
R103902:103911 Integers Make min_signed def
R103924:103926 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R103916:103921 Integers Make signed def
R103923:103923 Integers <> y var
R103927:103932 Integers Make signed def
R103934:103934 Integers <> d var
R103924:103926 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R103916:103921 Integers Make signed def
R103923:103923 Integers <> y var
R103927:103932 Integers Make signed def
R103934:103934 Integers <> d var
R103939:103948 Integers Make max_signed def
R103859:103862 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<='_x not
R103882:103885 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<='_x not
R103849:103858 Integers Make min_signed def
R103871:103873 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R103863:103868 Integers Make signed def
R103870:103870 Integers <> x var
R103874:103879 Integers Make signed def
R103881:103881 Integers <> d var
R103871:103873 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R103863:103868 Integers Make signed def
R103870:103870 Integers <> x var
R103874:103879 Integers Make signed def
R103881:103881 Integers <> d var
R103886:103895 Integers Make max_signed def
R104020:104029 Integers Make add_signed thm
R104020:104029 Integers Make add_signed thm
R104020:104029 Integers Make add_signed thm
R104020:104029 Integers Make add_signed thm
R104039:104040 Integers Make lt def
R104060:104070 Integers Make signed_repr thm
R104060:104070 Integers Make signed_repr thm
R104060:104070 Integers Make signed_repr thm
R104060:104070 Integers Make signed_repr thm
R104060:104070 Integers Make signed_repr thm
R104060:104070 Integers Make signed_repr thm
R104085:104087 Coqlib <> zlt def
R104101:104106 Integers Make signed def
R104090:104095 Integers Make signed def
R104085:104087 Coqlib <> zlt def
R104101:104106 Integers Make signed def
R104090:104095 Integers Make signed def
R104128:104135 Coqlib <> zlt_true thm
R104128:104135 Coqlib <> zlt_true thm
R104153:104161 Coqlib <> zlt_false thm
R104153:104161 Coqlib <> zlt_false thm
prf 104185:104197 Make translate_cmp
R104351:104353 Coq.Init.Logic <> :type_scope:x_'='_x not
R104326:104328 Integers Make cmp def
R104343:104345 Integers Make add def
R104349:104349 Integers <> d var
R104347:104347 Integers <> y var
R104333:104335 Integers Make add def
R104339:104339 Integers <> d var
R104337:104337 Integers <> x var
R104330:104330 Integers <> c var
R104354:104356 Integers Make cmp def
R104362:104362 Integers <> y var
R104360:104360 Integers <> x var
R104358:104358 Integers <> c var
R104283:104286 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<='_x not
R104306:104309 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<='_x not
R104273:104282 Integers Make min_signed def
R104295:104297 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R104287:104292 Integers Make signed def
R104294:104294 Integers <> y var
R104298:104303 Integers Make signed def
R104305:104305 Integers <> d var
R104295:104297 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R104287:104292 Integers Make signed def
R104294:104294 Integers <> y var
R104298:104303 Integers Make signed def
R104305:104305 Integers <> d var
R104310:104319 Integers Make max_signed def
R104230:104233 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<='_x not
R104253:104256 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<='_x not
R104220:104229 Integers Make min_signed def
R104242:104244 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R104234:104239 Integers Make signed def
R104241:104241 Integers <> x var
R104245:104250 Integers Make signed def
R104252:104252 Integers <> d var
R104242:104244 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R104234:104239 Integers Make signed def
R104241:104241 Integers <> x var
R104245:104250 Integers Make signed def
R104252:104252 Integers <> d var
R104257:104266 Integers Make max_signed def
R104389:104391 Integers Make cmp def
R104404:104415 Integers Make translate_eq thm
R104404:104415 Integers Make translate_eq thm
R104433:104444 Integers Make translate_lt thm
R104433:104444 Integers Make translate_lt thm
R104433:104444 Integers Make translate_lt thm
R104433:104444 Integers Make translate_lt thm
R104433:104444 Integers Make translate_lt thm
R104433:104444 Integers Make translate_lt thm
R104433:104444 Integers Make translate_lt thm
R104433:104444 Integers Make translate_lt thm
prf 104469:104490 Make notbool_isfalse_istrue
R104519:104525 Integers Make is_true def
R104528:104534 Integers Make notbool def
R104536:104536 Integers <> x var
R104505:104512 Integers Make is_false def
R104514:104514 Integers <> x var
R104556:104563 Integers Make is_false def
R104566:104572 Integers Make is_true def
R104575:104581 Integers Make notbool def
R104612:104618 Integers Make eq_true thm
R104612:104618 Integers Make eq_true thm
R104627:104638 Integers Make one_not_zero thm
R104627:104638 Integers Make one_not_zero thm
prf 104656:104677 Make notbool_istrue_isfalse
R104705:104712 Integers Make is_false def
R104715:104721 Integers Make notbool def
R104723:104723 Integers <> x var
R104692:104698 Integers Make is_true def
R104700:104700 Integers <> x var
R104743:104750 Integers Make is_false def
R104753:104759 Integers Make is_true def
R104762:104768 Integers Make notbool def
R104793:104799 Integers Make eq_spec thm
R104803:104806 Integers Make zero def
R104793:104799 Integers Make eq_spec thm
R104803:104806 Integers Make zero def
R104816:104817 Integers Make eq def
R104821:104824 Integers Make zero def
R104816:104817 Integers Make eq def
R104821:104824 Integers Make zero def
prf 104872:104885 Make ltu_range_test
R104953:104956 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R104965:104967 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R104957:104962 Integers Make signed def
R104964:104964 Integers <> x var
R104957:104962 Integers Make signed def
R104964:104964 Integers <> x var
R104968:104975 Integers Make unsigned def
R104977:104977 Integers <> y var
R104932:104935 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R104922:104929 Integers Make unsigned def
R104931:104931 Integers <> y var
R104936:104945 Integers Make max_signed def
R104911:104913 Coq.Init.Logic <> :type_scope:x_'='_x not
R104904:104906 Integers Make ltu def
R104910:104910 Integers <> y var
R104908:104908 Integers <> x var
R104914:104917 Coq.Init.Datatypes <> true constr
R105006:105008 Integers Make ltu def
R105026:105028 Coqlib <> zlt def
R105044:105051 Integers Make unsigned def
R105031:105038 Integers Make unsigned def
R105026:105028 Coqlib <> zlt def
R105044:105051 Integers Make unsigned def
R105031:105038 Integers Make unsigned def
R105086:105103 Integers Make signed_eq_unsigned thm
R105086:105103 Integers Make signed_eq_unsigned thm
R105120:105133 Integers Make unsigned_range thm
R105120:105133 Integers Make unsigned_range thm
prf 105167:105181 Make lt_sub_overflow
R105248:105250 Coq.Init.Logic <> :type_scope:x_'='_x not
R105200:105202 Integers Make xor def
R105229:105236 Integers Make negative def
R105239:105241 Integers Make sub def
R105245:105245 Integers <> y var
R105243:105243 Integers <> x var
R105205:105216 Integers Make sub_overflow def
R105222:105225 Integers Make zero def
R105220:105220 Integers <> y var
R105218:105218 Integers <> x var
R105254:105255 Integers Make lt def
R105259:105259 Integers <> y var
R105257:105257 Integers <> x var
R105275:105278 Integers Make zero def
R105266:105268 Integers Make one def
R105305:105312 Integers Make negative def
R105315:105326 Integers Make sub_overflow def
R105329:105330 Integers Make lt def
R105341:105350 Integers Make sub_signed thm
R105341:105350 Integers Make sub_signed thm
R105364:105374 Integers Make signed_zero thm
R105364:105374 Integers Make signed_zero thm
R105385:105394 Coq.ZArith.BinInt <> Zminus_0_r syndef
R105385:105394 Coq.ZArith.BinInt <> Zminus_0_r syndef
R105411:105422 Integers Make signed_range thm
R105428:105439 Integers Make signed_range thm
R105411:105422 Integers Make signed_range thm
R105428:105439 Integers Make signed_range thm
R105457:105462 Integers Make signed def
R105478:105483 Integers Make signed def
R105457:105462 Integers Make signed def
R105478:105483 Integers Make signed def
R105512:105521 Integers Make min_signed def
R105524:105533 Integers Make max_signed def
R105554:105569 Integers Make half_modulus_pos thm
R105571:105590 Integers Make half_modulus_modulus thm
R105554:105569 Integers Make half_modulus_pos thm
R105571:105590 Integers Make half_modulus_modulus thm
R105619:105621 Coqlib <> zle def
R105627:105629 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R105619:105621 Coqlib <> zle def
R105627:105629 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R105644:105655 Coqlib <> proj_sumbool def
R105671:105678 Coqlib <> zle_true thm
R105671:105678 Coqlib <> zle_true thm
R105713:105721 Coqlib <> zlt_false thm
R105713:105721 Coqlib <> zlt_false thm
R105750:105752 Coqlib <> zlt def
R105762:105773 Integers Make half_modulus def
R105756:105758 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R105750:105752 Coqlib <> zlt def
R105762:105773 Integers Make half_modulus def
R105756:105758 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R105788:105799 Coqlib <> proj_sumbool def
R105810:105817 Coqlib <> zle_true thm
R105810:105817 Coqlib <> zle_true thm
R105841:105851 Integers Make signed_repr thm
R105841:105851 Integers Make signed_repr thm
R105862:105870 Coqlib <> zlt_false thm
R105862:105870 Coqlib <> zlt_false thm
R105888:105895 Integers Make xor_idem thm
R105888:105895 Integers Make xor_idem thm
R105909:105918 Integers Make min_signed def
R105921:105930 Integers Make max_signed def
R105951:105962 Coqlib <> proj_sumbool def
R105973:105981 Coqlib <> zle_false thm
R105973:105981 Coqlib <> zle_false thm
R106007:106012 Integers Make signed def
R106015:106018 Integers Make repr def
R106022:106024 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R106041:106043 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R106037:106039 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R106044:106050 Integers Make modulus def
R106041:106043 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R106037:106039 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R106044:106050 Integers Make modulus def
R106007:106012 Integers Make signed def
R106015:106018 Integers Make repr def
R106022:106024 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R106066:106073 Coqlib <> zlt_true thm
R106066:106073 Coqlib <> zlt_true thm
R106091:106098 Integers Make xor_idem thm
R106091:106098 Integers Make xor_idem thm
R106114:106127 Integers Make signed_repr_eq thm
R106114:106127 Integers Make signed_repr_eq thm
R106139:106139 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R106145:106150 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R106141:106143 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R106151:106157 Integers Make modulus def
R106167:106169 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R106167:106169 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R106139:106139 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R106145:106150 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R106141:106143 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R106151:106157 Integers Make modulus def
R106187:106195 Coqlib <> zlt_false thm
R106187:106195 Coqlib <> zlt_false thm
R106225:106235 Coqlib <> Zmod_unique thm
R106225:106235 Coqlib <> Zmod_unique thm
R106261:106272 Coqlib <> proj_sumbool def
R106288:106295 Coqlib <> zle_true thm
R106288:106295 Coqlib <> zle_true thm
R106320:106330 Coq.Bool.Bool <> andb_true_r thm
R106320:106330 Coq.Bool.Bool <> andb_true_r thm
R106344:106351 Coqlib <> zlt_true thm
R106344:106351 Coqlib <> zlt_true thm
R106380:106382 Coqlib <> zlt def
R106393:106393 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R106394:106405 Integers Make half_modulus def
R106386:106388 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R106380:106382 Coqlib <> zlt def
R106393:106393 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R106394:106405 Integers Make half_modulus def
R106386:106388 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R106421:106432 Coqlib <> proj_sumbool def
R106443:106451 Coqlib <> zle_false thm
R106443:106451 Coqlib <> zle_false thm
R106477:106482 Integers Make signed def
R106485:106488 Integers Make repr def
R106492:106494 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R106511:106513 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R106507:106509 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R106514:106520 Integers Make modulus def
R106511:106513 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R106507:106509 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R106514:106520 Integers Make modulus def
R106477:106482 Integers Make signed def
R106485:106488 Integers Make repr def
R106492:106494 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R106536:106544 Coqlib <> zlt_false thm
R106536:106544 Coqlib <> zlt_false thm
R106562:106569 Integers Make xor_zero thm
R106562:106569 Integers Make xor_zero thm
R106584:106597 Integers Make signed_repr_eq thm
R106584:106597 Integers Make signed_repr_eq thm
R106609:106609 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R106615:106620 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R106611:106613 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R106621:106627 Integers Make modulus def
R106641:106643 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R106637:106639 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R106644:106650 Integers Make modulus def
R106641:106643 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R106637:106639 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R106644:106650 Integers Make modulus def
R106609:106609 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R106615:106620 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R106611:106613 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R106621:106627 Integers Make modulus def
R106667:106674 Coqlib <> zlt_true thm
R106667:106674 Coqlib <> zlt_true thm
R106712:106722 Coqlib <> Zmod_unique thm
R106712:106722 Coqlib <> Zmod_unique thm
R106753:106764 Coqlib <> proj_sumbool def
R106775:106782 Coqlib <> zle_true thm
R106775:106782 Coqlib <> zle_true thm
R106806:106816 Integers Make signed_repr thm
R106806:106816 Integers Make signed_repr thm
R106827:106834 Coqlib <> zlt_true thm
R106827:106834 Coqlib <> zlt_true thm
R106852:106861 Integers Make xor_zero_l thm
R106852:106861 Integers Make xor_zero_l thm
R106875:106884 Integers Make min_signed def
R106887:106896 Integers Make max_signed def
def 106952:106961 Make no_overlap
R106970:106972 Integers Make int rec
R106981:106981 Coq.Numbers.BinNums <> Z ind
R106991:106993 Integers Make int rec
R107002:107002 Coq.Numbers.BinNums <> Z ind
R107007:107010 Coq.Init.Datatypes <> bool ind
R107027:107034 Integers Make unsigned def
R107036:107039 Integers <> ofs1 var
R107054:107061 Integers Make unsigned def
R107063:107066 Integers <> ofs2 var
R107124:107130 Coq.Init.Datatypes <> :bool_scope:x_'&&'_x not
R107169:107169 Coq.Init.Datatypes <> :bool_scope:x_'&&'_x not
R107098:107101 Coq.Init.Datatypes <> :bool_scope:x_'&&'_x not
R107076:107078 Coqlib <> zlt def
R107091:107097 Integers Make modulus def
R107083:107085 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R107081:107082 Integers <> x1 var
R107086:107088 Integers <> sz1 var
R107102:107104 Coqlib <> zlt def
R107117:107123 Integers Make modulus def
R107109:107111 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R107107:107108 Integers <> x2 var
R107112:107114 Integers <> sz2 var
R107148:107151 Coq.Init.Datatypes <> :bool_scope:x_'||'_x not
R107131:107133 Coqlib <> zle def
R107146:107147 Integers <> x2 var
R107138:107140 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R107136:107137 Integers <> x1 var
R107141:107143 Integers <> sz1 var
R107152:107154 Coqlib <> zle def
R107167:107168 Integers <> x1 var
R107159:107161 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R107157:107158 Integers <> x2 var
R107162:107164 Integers <> sz2 var
prf 107179:107194 Make no_overlap_sound
R107353:107358 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R107325:107328 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R107319:107321 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R107295:107302 Integers Make unsigned def
R107305:107307 Integers Make add def
R107314:107317 Integers <> ofs1 var
R107309:107312 Integers <> base var
R107322:107324 Integers <> sz1 var
R107329:107336 Integers Make unsigned def
R107339:107341 Integers Make add def
R107348:107351 Integers <> ofs2 var
R107343:107346 Integers <> base var
R107389:107392 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R107383:107385 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R107359:107366 Integers Make unsigned def
R107369:107371 Integers Make add def
R107378:107381 Integers <> ofs2 var
R107373:107376 Integers <> base var
R107386:107388 Integers <> sz2 var
R107393:107400 Integers Make unsigned def
R107403:107405 Integers Make add def
R107412:107415 Integers <> ofs1 var
R107407:107410 Integers <> base var
R107282:107284 Coq.Init.Logic <> :type_scope:x_'='_x not
R107254:107263 Integers Make no_overlap def
R107279:107281 Integers <> sz2 var
R107274:107277 Integers <> ofs2 var
R107270:107272 Integers <> sz1 var
R107265:107268 Integers <> ofs1 var
R107285:107288 Coq.Init.Datatypes <> true constr
R107246:107248 Coq.ZArith.BinInt <> :Z_scope:x_'>'_x not
R107243:107245 Integers <> sz2 var
R107235:107237 Coq.ZArith.BinInt <> :Z_scope:x_'>'_x not
R107232:107234 Integers <> sz1 var
R107449:107457 Coq.Init.Datatypes <> andb_prop thm
R107449:107457 Coq.Init.Datatypes <> andb_prop thm
R107491:107499 Coq.Init.Datatypes <> andb_prop thm
R107491:107499 Coq.Init.Datatypes <> andb_prop thm
R107530:107546 Coqlib <> proj_sumbool_true thm
R107589:107605 Coqlib <> proj_sumbool_true thm
R107684:107687 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R107667:107670 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R107661:107663 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R107648:107655 Integers Make unsigned def
R107671:107678 Integers Make unsigned def
R107707:107710 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R107701:107703 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R107688:107695 Integers Make unsigned def
R107711:107718 Integers Make unsigned def
R107684:107687 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R107667:107670 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R107661:107663 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R107648:107655 Integers Make unsigned def
R107671:107678 Integers Make unsigned def
R107707:107710 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R107701:107703 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R107688:107695 Integers Make unsigned def
R107711:107718 Integers Make unsigned def
R107739:107746 Coq.Bool.Bool <> orb_prop thm
R107739:107746 Coq.Bool.Bool <> orb_prop thm
R107770:107786 Coqlib <> proj_sumbool_true thm
R107770:107786 Coqlib <> proj_sumbool_true thm
R107810:107826 Coqlib <> proj_sumbool_true thm
R107810:107826 Coqlib <> proj_sumbool_true thm
R107862:107875 Integers Make unsigned_range thm
R107884:107897 Integers Make unsigned_range thm
R107862:107875 Integers Make unsigned_range thm
R107884:107897 Integers Make unsigned_range thm
R107932:107950 Integers Make unsigned_add_either thm
R107964:107982 Integers Make unsigned_add_either thm
R107932:107950 Integers Make unsigned_add_either thm
R107964:107982 Integers Make unsigned_add_either thm
def 108077:108081 Make Zsize
R108087:108087 Coq.Numbers.BinNums <> Z ind
R108092:108092 Coq.Numbers.BinNums <> Z ind
R108105:108105 Integers <> x var
R108116:108119 Coq.Numbers.BinNums <> Zpos constr
R108126:108129 Coq.Numbers.BinNums <> Zpos constr
R108132:108139 Coq.PArith.BinPos Pos size def
def 108174:108177 Make size
R108183:108185 Integers Make int rec
R108190:108190 Coq.Numbers.BinNums <> Z ind
R108195:108199 Integers Make Zsize def
R108202:108209 Integers Make unsigned def
R108211:108211 Integers <> x var
prf 108223:108231 Make Zsize_pos
R108245:108248 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R108249:108253 Integers Make Zsize def
R108255:108255 Integers <> x var
R0:-1 Integers <> y var
prf 108344:108353 Make Zsize_pos'
R108376:108378 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x not
R108379:108383 Integers Make Zsize def
R108385:108385 Integers <> x var
R108367:108369 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x not
R108370:108370 Integers <> x var
prf 108469:108481 Make Zsize_shiftin
R108527:108529 Coq.Init.Logic <> :type_scope:x_'='_x not
R108507:108511 Integers Make Zsize def
R108514:108521 Integers Make Zshiftin def
R108525:108525 Integers <> x var
R108523:108523 Integers <> b var
R108530:108534 Coq.ZArith.BinInt <> Zsucc syndef
R108537:108541 Integers Make Zsize def
R108543:108543 Integers <> x var
R108499:108501 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x not
R108502:108502 Integers <> x var
R108663:108666 Coq.Numbers.BinNums <> Zpos constr
R108670:108671 Coq.PArith.BinPosDef <> :positive_scope:x_'~'_'1' not
R108633:108640 Integers Make Zshiftin def
R108648:108651 Coq.Numbers.BinNums <> Zpos constr
R108642:108645 Coq.Init.Datatypes <> true constr
R108633:108640 Integers Make Zshiftin def
R108648:108651 Coq.Numbers.BinNums <> Zpos constr
R108642:108645 Coq.Init.Datatypes <> true constr
R108663:108666 Coq.Numbers.BinNums <> Zpos constr
R108670:108671 Coq.PArith.BinPosDef <> :positive_scope:x_'~'_'1' not
R108702:108712 Coq.PArith.BinPos Pos add_1_r thm
R108702:108712 Coq.PArith.BinPos Pos add_1_r thm
R108763:108766 Coq.Numbers.BinNums <> Zpos constr
R108770:108771 Coq.PArith.BinPosDef <> :positive_scope:x_'~'_'0' not
R108732:108739 Integers Make Zshiftin def
R108748:108751 Coq.Numbers.BinNums <> Zpos constr
R108741:108745 Coq.Init.Datatypes <> false constr
R108732:108739 Integers Make Zshiftin def
R108748:108751 Coq.Numbers.BinNums <> Zpos constr
R108741:108745 Coq.Init.Datatypes <> false constr
R108763:108766 Coq.Numbers.BinNums <> Zpos constr
R108770:108771 Coq.PArith.BinPosDef <> :positive_scope:x_'~'_'0' not
R108802:108812 Coq.PArith.BinPos Pos add_1_r thm
R108802:108812 Coq.PArith.BinPos Pos add_1_r thm
prf 108834:108848 Make Ztestbit_size_1
R108901:108903 Coq.Init.Logic <> :type_scope:x_'='_x not
R108872:108880 Coq.ZArith.BinInt Z testbit def
R108885:108889 Coq.ZArith.BinInt <> Zpred syndef
R108892:108896 Integers Make Zsize def
R108898:108898 Integers <> x var
R108882:108882 Integers <> x var
R108904:108907 Coq.Init.Datatypes <> true constr
R108864:108866 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x not
R108867:108867 Integers <> x var
R108953:108968 Integers Make Zshiftin_pos_ind thm
R108953:108968 Integers Make Zshiftin_pos_ind thm
R108995:109007 Integers Make Zsize_shiftin thm
R108995:109007 Integers Make Zsize_shiftin thm
R109028:109033 Coq.ZArith.BinInt Z pred def
R109036:109041 Coq.ZArith.BinInt Z succ def
R109044:109048 Integers Make Zsize def
R109061:109066 Coq.ZArith.BinInt Z succ def
R109069:109074 Coq.ZArith.BinInt Z pred def
R109077:109081 Integers Make Zsize def
R109061:109066 Coq.ZArith.BinInt Z succ def
R109069:109074 Coq.ZArith.BinInt Z pred def
R109077:109081 Integers Make Zsize def
R109028:109033 Coq.ZArith.BinInt Z pred def
R109036:109041 Coq.ZArith.BinInt Z succ def
R109044:109048 Integers Make Zsize def
R109108:109128 Integers Make Ztestbit_shiftin_succ thm
R109108:109128 Integers Make Ztestbit_shiftin_succ thm
R109149:109158 Integers Make Zsize_pos' thm
R109149:109158 Integers Make Zsize_pos' thm
prf 109185:109199 Make Ztestbit_size_2
R109263:109265 Coq.Init.Logic <> :type_scope:x_'='_x not
R109250:109258 Coq.ZArith.BinInt Z testbit def
R109262:109262 Integers <> i var
R109260:109260 Integers <> x var
R109266:109270 Coq.Init.Datatypes <> false constr
R109235:109238 Coq.ZArith.BinInt <> :Z_scope:x_'>='_x not
R109234:109234 Integers <> i var
R109239:109243 Integers Make Zsize def
R109245:109245 Integers <> x var
R109215:109218 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R109219:109219 Integers <> x var
R109308:109310 Coqlib <> zeq def
R109308:109310 Coqlib <> zeq def
R109348:109357 Integers Make Ztestbit_0 thm
R109348:109357 Integers Make Ztestbit_0 thm
R109383:109398 Integers Make Zshiftin_pos_ind thm
R109383:109398 Integers Make Zshiftin_pos_ind thm
R109437:109444 Integers Make Zshiftin def
R109446:109449 Coq.Init.Datatypes <> true constr
R109437:109444 Integers Make Zshiftin def
R109446:109449 Coq.Init.Datatypes <> true constr
R109463:109478 Integers Make Ztestbit_shiftin thm
R109463:109478 Integers Make Ztestbit_shiftin thm
R109496:109504 Coqlib <> zeq_false thm
R109496:109504 Coqlib <> zeq_false thm
R109513:109522 Integers Make Ztestbit_0 thm
R109513:109522 Integers Make Ztestbit_0 thm
R109561:109573 Integers Make Zsize_shiftin thm
R109561:109573 Integers Make Zsize_shiftin thm
R109606:109615 Integers Make Zsize_pos' thm
R109606:109615 Integers Make Zsize_pos' thm
R109645:109660 Integers Make Ztestbit_shiftin thm
R109645:109660 Integers Make Ztestbit_shiftin thm
R109671:109679 Coqlib <> zeq_false thm
R109671:109679 Coqlib <> zeq_false thm
prf 109745:109760 Make Zsize_interval_1
R109786:109789 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R109791:109793 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R109790:109790 Integers <> x var
R109790:109790 Integers <> x var
R109794:109798 Coq.ZArith.Zpower <> two_p def
R109801:109805 Integers Make Zsize def
R109807:109807 Integers <> x var
R109776:109779 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R109780:109780 Integers <> x var
R109840:109842 Coq.Init.Logic <> :type_scope:x_'='_x not
R109844:109849 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R109865:109865 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R109850:109854 Coq.ZArith.Zpower <> two_p def
R109857:109861 Integers Make Zsize def
R109840:109842 Coq.Init.Logic <> :type_scope:x_'='_x not
R109844:109849 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R109865:109865 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R109850:109854 Coq.ZArith.Zpower <> two_p def
R109857:109861 Integers Make Zsize def
R109879:109893 Integers Make equal_same_bits thm
R109879:109893 Integers Make equal_same_bits thm
R109916:109933 Integers Make Ztestbit_mod_two_p thm
R109916:109933 Integers Make Ztestbit_mod_two_p thm
R109957:109959 Coqlib <> zlt def
R109964:109968 Integers Make Zsize def
R109957:109959 Coqlib <> zlt def
R109964:109968 Integers Make Zsize def
R109987:110001 Integers Make Ztestbit_size_2 thm
R109987:110001 Integers Make Ztestbit_size_2 thm
R110021:110029 Integers Make Zsize_pos thm
R110021:110029 Integers Make Zsize_pos thm
R110081:110088 Coq.ZArith.Zdiv <> Z_mod_lt thm
R110081:110088 Coq.ZArith.Zdiv <> Z_mod_lt thm
R110097:110109 Coq.ZArith.Zpower <> two_p_gt_ZERO thm
R110097:110109 Coq.ZArith.Zpower <> two_p_gt_ZERO thm
R110118:110126 Integers Make Zsize_pos thm
R110118:110126 Integers Make Zsize_pos thm
prf 110148:110163 Make Zsize_interval_2
R110211:110214 Coq.ZArith.BinInt <> :Z_scope:x_'>='_x not
R110210:110210 Integers <> n var
R110215:110219 Integers Make Zsize def
R110221:110221 Integers <> x var
R110191:110194 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R110196:110198 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R110195:110195 Integers <> x var
R110195:110195 Integers <> x var
R110199:110203 Coq.ZArith.Zpower <> two_p def
R110205:110205 Integers <> n var
R110181:110184 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R110185:110185 Integers <> n var
R110251:110258 Coq.ZArith.BinInt Z to_nat def
R110251:110258 Coq.ZArith.BinInt Z to_nat def
R110285:110287 Coq.Init.Logic <> :type_scope:x_'='_x not
R110275:110282 Coq.ZArith.BinInt Z of_nat def
R110301:110308 Coq.ZArith.Znat Z2Nat id thm
R110285:110287 Coq.Init.Logic <> :type_scope:x_'='_x not
R110275:110282 Coq.ZArith.BinInt Z of_nat def
R110301:110308 Coq.ZArith.Znat Z2Nat id thm
R110352:110370 Coqlib <> two_power_nat_two_p thm
R110352:110370 Coqlib <> two_power_nat_two_p thm
R110392:110394 Coqlib <> zeq def
R110392:110394 Coqlib <> zeq def
R110441:110443 Coqlib <> zlt def
R110448:110452 Integers Make Zsize def
R110441:110443 Coqlib <> zlt def
R110448:110452 Integers Make Zsize def
R110476:110489 Integers Make Ztestbit_above thm
R110496:110500 Coq.ZArith.BinInt <> Zpred syndef
R110503:110507 Integers Make Zsize def
R110476:110489 Integers Make Ztestbit_above thm
R110496:110500 Coq.ZArith.BinInt <> Zpred syndef
R110503:110507 Integers Make Zsize def
R110539:110553 Integers Make Ztestbit_size_1 thm
R110539:110553 Integers Make Ztestbit_size_1 thm
prf 110587:110600 Make Zsize_monotone
R110639:110642 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R110632:110636 Integers Make Zsize def
R110638:110638 Integers <> x var
R110643:110647 Integers Make Zsize def
R110649:110649 Integers <> y var
R110618:110621 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<='_x not
R110623:110626 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<='_x not
R110622:110622 Integers <> x var
R110622:110622 Integers <> x var
R110627:110627 Integers <> y var
R110675:110680 Coq.ZArith.Zorder <> Zge_le syndef
R110675:110680 Coq.ZArith.Zorder <> Zge_le syndef
R110689:110704 Integers Make Zsize_interval_2 thm
R110689:110704 Integers Make Zsize_interval_2 thm
R110713:110721 Integers Make Zsize_pos thm
R110713:110721 Integers Make Zsize_pos thm
R110735:110750 Integers Make Zsize_interval_1 thm
R110735:110750 Integers Make Zsize_interval_1 thm
prf 110788:110796 Make size_zero
R110808:110810 Coq.Init.Logic <> :type_scope:x_'='_x not
R110799:110802 Integers Make size def
R110804:110807 Integers Make zero def
R110830:110833 Integers Make size def
R110844:110856 Integers Make unsigned_zero thm
R110844:110856 Integers Make unsigned_zero thm
prf 110881:110891 Make bits_size_1
R110914:110917 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R110907:110909 Coq.Init.Logic <> :type_scope:x_'='_x not
R110906:110906 Integers <> x var
R110910:110913 Integers Make zero def
R110944:110946 Coq.Init.Logic <> :type_scope:x_'='_x not
R110918:110924 Integers Make testbit def
R110929:110933 Coq.ZArith.BinInt <> Zpred syndef
R110936:110939 Integers Make size def
R110941:110941 Integers <> x var
R110926:110926 Integers <> x var
R110947:110950 Coq.Init.Datatypes <> true constr
R110980:110982 Coqlib <> zeq def
R110985:110992 Integers Make unsigned def
R110980:110982 Coqlib <> zeq def
R110985:110992 Integers Make unsigned def
R111021:111033 Integers Make repr_unsigned thm
R111021:111033 Integers Make repr_unsigned thm
R111071:111085 Integers Make Ztestbit_size_1 thm
R111071:111085 Integers Make Ztestbit_size_1 thm
R111100:111113 Integers Make unsigned_range thm
R111100:111113 Integers Make unsigned_range thm
prf 111140:111150 Make bits_size_2
R111193:111195 Coq.Init.Logic <> :type_scope:x_'='_x not
R111182:111188 Integers Make testbit def
R111192:111192 Integers <> i var
R111190:111190 Integers <> x var
R111196:111200 Coq.Init.Datatypes <> false constr
R111173:111176 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R111167:111170 Integers Make size def
R111172:111172 Integers <> x var
R111177:111177 Integers <> i var
R111226:111240 Integers Make Ztestbit_size_2 thm
R111226:111240 Integers Make Ztestbit_size_2 thm
R111255:111268 Integers Make unsigned_range thm
R111255:111268 Integers Make unsigned_range thm
R111290:111293 Integers Make size def
R111290:111293 Integers Make size def
prf 111321:111330 Make size_range
R111346:111349 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<='_x not
R111356:111359 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<='_x not
R111350:111353 Integers Make size def
R111355:111355 Integers <> x var
R111350:111353 Integers Make size def
R111355:111355 Integers <> x var
R111360:111368 Integers Make zwordsize def
R111401:111409 Integers Make Zsize_pos thm
R111401:111409 Integers Make Zsize_pos thm
R111424:111434 Integers Make bits_size_1 thm
R111424:111434 Integers Make bits_size_1 thm
R111458:111461 Integers Make size def
R111472:111484 Integers Make unsigned_zero thm
R111472:111484 Integers Make unsigned_zero thm
R111505:111516 Integers Make wordsize_pos thm
R111505:111516 Integers Make wordsize_pos thm
R111538:111540 Coqlib <> zle def
R111551:111559 Integers Make zwordsize def
R111543:111546 Integers Make size def
R111538:111540 Coqlib <> zle def
R111551:111559 Integers Make zwordsize def
R111543:111546 Integers Make size def
R111580:111589 Integers Make bits_above thm
R111580:111589 Integers Make bits_above thm
prf 111631:111641 Make bits_size_3
R111737:111740 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R111731:111734 Integers Make size def
R111736:111736 Integers <> x var
R111741:111741 Integers <> n var
R111716:111718 Coq.Init.Logic <> :type_scope:x_'='_x not
R111705:111711 Integers Make testbit def
R111715:111715 Integers <> i var
R111713:111713 Integers <> x var
R111719:111723 Coq.Init.Datatypes <> false constr
R111684:111687 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R111689:111691 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R111683:111683 Integers <> n var
R111688:111688 Integers <> i var
R111688:111688 Integers <> i var
R111692:111700 Integers Make zwordsize def
R111661:111664 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R111665:111665 Integers <> n var
R111771:111773 Coqlib <> zle def
R111776:111779 Integers Make size def
R111771:111773 Coqlib <> zle def
R111776:111779 Integers Make size def
R111807:111817 Integers Make bits_size_1 thm
R111807:111817 Integers Make bits_size_1 thm
R111842:111845 Integers Make size def
R111856:111868 Integers Make unsigned_zero thm
R111856:111868 Integers Make unsigned_zero thm
R111898:111903 Coq.ZArith.BinInt Z pred def
R111906:111909 Integers Make size def
R111898:111903 Coq.ZArith.BinInt Z pred def
R111906:111909 Integers Make size def
R111950:111959 Integers Make size_range thm
R111950:111959 Integers Make size_range thm
prf 111986:111996 Make bits_size_4
R112124:112126 Coq.Init.Logic <> :type_scope:x_'='_x not
R112118:112121 Integers Make size def
R112123:112123 Integers <> x var
R112127:112127 Integers <> n var
R112103:112105 Coq.Init.Logic <> :type_scope:x_'='_x not
R112092:112098 Integers Make testbit def
R112102:112102 Integers <> i var
R112100:112100 Integers <> x var
R112106:112110 Coq.Init.Datatypes <> false constr
R112071:112074 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R112076:112078 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R112070:112070 Integers <> n var
R112075:112075 Integers <> i var
R112075:112075 Integers <> i var
R112079:112087 Integers Make zwordsize def
R112046:112048 Coq.Init.Logic <> :type_scope:x_'='_x not
R112027:112033 Integers Make testbit def
R112038:112042 Coq.ZArith.BinInt <> Zpred syndef
R112044:112044 Integers <> n var
R112035:112035 Integers <> x var
R112049:112052 Coq.Init.Datatypes <> true constr
R112016:112019 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R112020:112020 Integers <> n var
R112163:112166 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R112157:112160 Integers Make size def
R112163:112166 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R112157:112160 Integers Make size def
R112181:112191 Integers Make bits_size_3 thm
R112181:112191 Integers Make bits_size_3 thm
R112212:112214 Coqlib <> zlt def
R112217:112220 Integers Make size def
R112212:112214 Coqlib <> zlt def
R112217:112220 Integers Make size def
R112239:112249 Integers Make bits_size_2 thm
R112239:112249 Integers Make bits_size_2 thm
prf 112301:112315 Make size_interval_1
R112331:112334 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R112345:112347 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R112335:112342 Integers Make unsigned def
R112344:112344 Integers <> x var
R112335:112342 Integers Make unsigned def
R112344:112344 Integers <> x var
R112348:112352 Coq.ZArith.Zpower <> two_p def
R112355:112358 Integers Make size def
R112360:112360 Integers <> x var
R112387:112402 Integers Make Zsize_interval_1 thm
R112387:112402 Integers Make Zsize_interval_1 thm
R112417:112430 Integers Make unsigned_range thm
R112417:112430 Integers Make unsigned_range thm
prf 112457:112471 Make size_interval_2
R112528:112531 Coq.ZArith.BinInt <> :Z_scope:x_'>='_x not
R112527:112527 Integers <> n var
R112532:112535 Integers Make size def
R112537:112537 Integers <> x var
R112499:112502 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R112513:112515 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R112503:112510 Integers Make unsigned def
R112512:112512 Integers <> x var
R112503:112510 Integers Make unsigned def
R112512:112512 Integers <> x var
R112516:112520 Coq.ZArith.Zpower <> two_p def
R112522:112522 Integers <> n var
R112489:112492 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R112493:112493 Integers <> n var
R112563:112578 Integers Make Zsize_interval_2 thm
R112563:112578 Integers Make Zsize_interval_2 thm
prf 112601:112608 Make size_and
R112639:112642 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R112625:112628 Integers Make size def
R112631:112633 Integers Make and def
R112637:112637 Integers <> b var
R112635:112635 Integers <> a var
R112643:112647 Coq.ZArith.BinInt Z min def
R112659:112662 Integers Make size def
R112664:112664 Integers <> b var
R112650:112653 Integers Make size def
R112655:112655 Integers <> a var
R112697:112700 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R112701:112705 Coq.ZArith.BinInt Z min def
R112717:112720 Integers Make size def
R112708:112711 Integers Make size def
R112697:112700 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R112701:112705 Coq.ZArith.BinInt Z min def
R112717:112720 Integers Make size def
R112708:112711 Integers Make size def
R112743:112752 Integers Make size_range thm
R112758:112767 Integers Make size_range thm
R112743:112752 Integers Make size_range thm
R112758:112767 Integers Make size_range thm
R112795:112805 Integers Make bits_size_3 thm
R112795:112805 Integers Make bits_size_3 thm
R112832:112839 Integers Make bits_and thm
R112832:112839 Integers Make bits_and thm
R112885:112895 Integers Make bits_size_2 thm
R112885:112895 Integers Make bits_size_2 thm
R112926:112936 Integers Make bits_size_2 thm
R112926:112936 Integers Make bits_size_2 thm
R112948:112959 Coq.Bool.Bool <> andb_false_r thm
R112948:112959 Coq.Bool.Bool <> andb_false_r thm
prf 112995:113006 Make and_interval
R113024:113027 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R113046:113048 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R113028:113035 Integers Make unsigned def
R113038:113040 Integers Make and def
R113044:113044 Integers <> b var
R113042:113042 Integers <> a var
R113028:113035 Integers Make unsigned def
R113038:113040 Integers Make and def
R113044:113044 Integers <> b var
R113042:113042 Integers <> a var
R113049:113053 Coq.ZArith.Zpower <> two_p def
R113056:113060 Coq.ZArith.BinInt Z min def
R113072:113075 Integers Make size def
R113077:113077 Integers <> b var
R113063:113066 Integers Make size def
R113068:113068 Integers <> a var
R113114:113128 Integers Make size_interval_1 thm
R113131:113133 Integers Make and def
R113114:113128 Integers Make size_interval_1 thm
R113131:113133 Integers Make and def
R113183:113186 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R113161:113165 Coq.ZArith.Zpower <> two_p def
R113168:113171 Integers Make size def
R113174:113176 Integers Make and def
R113187:113191 Coq.ZArith.Zpower <> two_p def
R113194:113198 Coq.ZArith.BinInt Z min def
R113210:113213 Integers Make size def
R113201:113204 Integers Make size def
R113183:113186 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R113161:113165 Coq.ZArith.Zpower <> two_p def
R113168:113171 Integers Make size def
R113174:113176 Integers Make and def
R113187:113191 Coq.ZArith.Zpower <> two_p def
R113194:113198 Coq.ZArith.BinInt Z min def
R113210:113213 Integers Make size def
R113201:113204 Integers Make size def
R113229:113242 Coqlib <> two_p_monotone thm
R113229:113242 Coqlib <> two_p_monotone thm
R113264:113273 Integers Make size_range thm
R113276:113278 Integers Make and def
R113264:113273 Integers Make size_range thm
R113276:113278 Integers Make and def
R113303:113310 Integers Make size_and thm
R113303:113310 Integers Make size_and thm
prf 113337:113343 Make size_or
R113373:113375 Coq.Init.Logic <> :type_scope:x_'='_x not
R113360:113363 Integers Make size def
R113366:113367 Integers Make or def
R113371:113371 Integers <> b var
R113369:113369 Integers <> a var
R113376:113380 Coq.ZArith.BinInt Z max def
R113392:113395 Integers Make size def
R113397:113397 Integers <> b var
R113383:113386 Integers Make size def
R113388:113388 Integers <> a var
R113430:113439 Integers Make size_range thm
R113445:113454 Integers Make size_range thm
R113430:113439 Integers Make size_range thm
R113445:113454 Integers Make size_range thm
R113480:113490 Integers Make bits_size_1 thm
R113480:113490 Integers Make bits_size_1 thm
R113515:113523 Integers Make size_zero thm
R113515:113523 Integers Make size_zero thm
R113534:113542 Integers Make or_zero_l thm
R113534:113542 Integers Make or_zero_l thm
R113570:113580 Integers Make bits_size_1 thm
R113570:113580 Integers Make bits_size_1 thm
R113605:113613 Integers Make size_zero thm
R113605:113613 Integers Make size_zero thm
R113624:113630 Integers Make or_zero thm
R113624:113630 Integers Make or_zero thm
R113702:113712 Integers Make bits_size_4 thm
R113702:113712 Integers Make bits_size_4 thm
R0:-1 Integers <> y var
R113730:113736 Integers Make bits_or thm
R113730:113736 Integers Make bits_or thm
R113757:113766 Coq.Bool.Bool <> orb_true_r thm
R113757:113766 Coq.Bool.Bool <> orb_true_r thm
R113798:113804 Integers Make bits_or thm
R113798:113804 Integers Make bits_or thm
R113816:113826 Integers Make bits_size_2 thm
R113816:113826 Integers Make bits_size_2 thm
R113816:113826 Integers Make bits_size_2 thm
R113816:113826 Integers Make bits_size_2 thm
R113865:113875 Integers Make bits_size_4 thm
R113865:113875 Integers Make bits_size_4 thm
R0:-1 Integers <> y var
R113893:113899 Integers Make bits_or thm
R113893:113899 Integers Make bits_or thm
R113920:113929 Coq.Bool.Bool <> orb_true_l thm
R113920:113929 Coq.Bool.Bool <> orb_true_l thm
R113945:113947 Coqlib <> zeq def
R113950:113953 Integers Make size def
R113945:113947 Coqlib <> zeq def
R113950:113953 Integers Make size def
R113969:113975 Integers Make testbit def
R113992:114006 Coq.ZArith.BinInt Z testbit_neg_r thm
R113992:114006 Coq.ZArith.BinInt Z testbit_neg_r thm
R114062:114068 Integers Make bits_or thm
R114062:114068 Integers Make bits_or thm
R114080:114090 Integers Make bits_size_2 thm
R114080:114090 Integers Make bits_size_2 thm
R114080:114090 Integers Make bits_size_2 thm
R114080:114090 Integers Make bits_size_2 thm
prf 114137:114147 Make or_interval
R114165:114168 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R114186:114188 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R114169:114176 Integers Make unsigned def
R114179:114180 Integers Make or def
R114184:114184 Integers <> b var
R114182:114182 Integers <> a var
R114169:114176 Integers Make unsigned def
R114179:114180 Integers Make or def
R114184:114184 Integers <> b var
R114182:114182 Integers <> a var
R114189:114193 Coq.ZArith.Zpower <> two_p def
R114196:114200 Coq.ZArith.BinInt Z max def
R114212:114215 Integers Make size def
R114217:114217 Integers <> b var
R114203:114206 Integers Make size def
R114208:114208 Integers <> a var
R114250:114256 Integers Make size_or thm
R114250:114256 Integers Make size_or thm
R114265:114279 Integers Make size_interval_1 thm
R114265:114279 Integers Make size_interval_1 thm
prf 114297:114304 Make size_xor
R114335:114338 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R114321:114324 Integers Make size def
R114327:114329 Integers Make xor def
R114333:114333 Integers <> b var
R114331:114331 Integers <> a var
R114339:114343 Coq.ZArith.BinInt Z max def
R114355:114358 Integers Make size def
R114360:114360 Integers <> b var
R114346:114349 Integers Make size def
R114351:114351 Integers <> a var
R114393:114396 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R114397:114401 Coq.ZArith.BinInt Z max def
R114413:114416 Integers Make size def
R114404:114407 Integers Make size def
R114393:114396 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R114397:114401 Coq.ZArith.BinInt Z max def
R114413:114416 Integers Make size def
R114404:114407 Integers Make size def
R114439:114448 Integers Make size_range thm
R114454:114463 Integers Make size_range thm
R114439:114448 Integers Make size_range thm
R114454:114463 Integers Make size_range thm
R114491:114501 Integers Make bits_size_3 thm
R114491:114501 Integers Make bits_size_3 thm
R114528:114535 Integers Make bits_xor thm
R114528:114535 Integers Make bits_xor thm
R114547:114557 Integers Make bits_size_2 thm
R114547:114557 Integers Make bits_size_2 thm
R114547:114557 Integers Make bits_size_2 thm
R114547:114557 Integers Make bits_size_2 thm
prf 114624:114635 Make xor_interval
R114653:114656 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R114675:114677 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R114657:114664 Integers Make unsigned def
R114667:114669 Integers Make xor def
R114673:114673 Integers <> b var
R114671:114671 Integers <> a var
R114657:114664 Integers Make unsigned def
R114667:114669 Integers Make xor def
R114673:114673 Integers <> b var
R114671:114671 Integers <> a var
R114678:114682 Coq.ZArith.Zpower <> two_p def
R114685:114689 Coq.ZArith.BinInt Z max def
R114701:114704 Integers Make size def
R114706:114706 Integers <> b var
R114692:114695 Integers Make size def
R114697:114697 Integers <> a var
R114743:114757 Integers Make size_interval_1 thm
R114760:114762 Integers Make xor def
R114743:114757 Integers Make size_interval_1 thm
R114760:114762 Integers Make xor def
R114812:114815 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R114790:114794 Coq.ZArith.Zpower <> two_p def
R114797:114800 Integers Make size def
R114803:114805 Integers Make xor def
R114816:114820 Coq.ZArith.Zpower <> two_p def
R114823:114827 Coq.ZArith.BinInt Z max def
R114839:114842 Integers Make size def
R114830:114833 Integers Make size def
R114812:114815 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R114790:114794 Coq.ZArith.Zpower <> two_p def
R114797:114800 Integers Make size def
R114803:114805 Integers Make xor def
R114816:114820 Coq.ZArith.Zpower <> two_p def
R114823:114827 Coq.ZArith.BinInt Z max def
R114839:114842 Integers Make size def
R114830:114833 Integers Make size def
R114858:114871 Coqlib <> two_p_monotone thm
R114858:114871 Coqlib <> two_p_monotone thm
R114893:114902 Integers Make size_range thm
R114905:114907 Integers Make xor def
R114893:114902 Integers Make size_range thm
R114905:114907 Integers Make xor def
R114932:114939 Integers Make size_xor thm
R114932:114939 Integers Make size_xor thm
R114961:114964 Integers <> <> mod
mod 115039:115049 <> Wordsize_32
def 115065:115072 Wordsize_32 wordsize
prf 115094:115110 Wordsize_32 wordsize_not_zero
R115121:115124 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R115113:115120 Integers Wordsize_32 wordsize def
R115148:115155 Integers Wordsize_32 wordsize def
R115179:115189 Integers <> <> mod
R115210:115229 Integers Wordsize_32 wordsize def
R115248:115251 Integers <> <> modtype
R115253:115263 Integers <> <> modtype
mod 115241:115243 <> Int
R115280:115299 Integers Wordsize_32 wordsize def
syndef 115313:115315 <> int
R115320:115326 Integers Int int rec
prf 115337:115364 <> int_wordsize_divides_modulus
R115369:115375 Coq.ZArith.Znumtheory <> Zdivide syndef
R115401:115411 Integers Int modulus def
R115378:115385 Coq.ZArith.BinInt <> Z_of_nat syndef
R115387:115398 Integers Int wordsize def
R115431:115435 Coq.ZArith.Zpower <> two_p def
R115440:115440 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R115431:115435 Coq.ZArith.Zpower <> two_p def
R115440:115440 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
mod 115473:115482 <> Wordsize_8
def 115498:115505 Wordsize_8 wordsize
prf 115526:115542 Wordsize_8 wordsize_not_zero
R115553:115556 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R115545:115552 Integers Wordsize_8 wordsize def
R115580:115587 Integers Wordsize_8 wordsize def
R115611:115620 Integers <> <> mod
R115641:115659 Integers Wordsize_8 wordsize def
R115679:115682 Integers <> <> modtype
R115684:115693 Integers <> <> modtype
mod 115671:115674 <> Byte
R115710:115728 Integers Wordsize_8 wordsize def
syndef 115742:115745 <> byte
R115750:115757 Integers Byte int rec
mod 115768:115778 <> Wordsize_64
def 115794:115801 Wordsize_64 wordsize
prf 115823:115839 Wordsize_64 wordsize_not_zero
R115850:115853 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R115842:115849 Integers Wordsize_64 wordsize def
R115877:115884 Integers Wordsize_64 wordsize def
R115908:115918 Integers <> <> mod
R115939:115958 Integers Wordsize_64 wordsize def
mod 115970:115974 <> Int64
R115986:115989 Integers <> <> modtype
R115991:116001 Integers <> <> modtype
def 116070:116079 Int64 iwordsize'
R116082:116088 Integers Int int rec
R116093:116100 Integers Int repr def
R116102:116110 Integers Int64 zwordsize def
def 116125:116128 Int64 shl'
R116134:116136 Integers Int64 int rec
R116143:116149 Integers Int int rec
R116153:116155 Integers Int64 int rec
R116162:116165 Integers Int64 repr def
R116168:116175 Coq.ZArith.BinInt Z shiftl def
R116191:116202 Integers Int unsigned def
R116204:116204 Integers <> y var
R116178:116185 Integers Int64 unsigned def
R116187:116187 Integers <> x var
def 116220:116224 Int64 shru'
R116230:116232 Integers Int64 int rec
R116239:116245 Integers Int int rec
R116249:116251 Integers Int64 int rec
R116258:116261 Integers Int64 repr def
R116264:116271 Coq.ZArith.BinInt Z shiftr def
R116287:116298 Integers Int unsigned def
R116300:116300 Integers <> y var
R116274:116281 Integers Int64 unsigned def
R116283:116283 Integers <> x var
def 116316:116319 Int64 shr'
R116325:116327 Integers Int64 int rec
R116334:116340 Integers Int int rec
R116344:116346 Integers Int64 int rec
R116353:116356 Integers Int64 repr def
R116359:116366 Coq.ZArith.BinInt Z shiftr def
R116380:116391 Integers Int unsigned def
R116393:116393 Integers <> y var
R116369:116374 Integers Int64 signed def
R116376:116376 Integers <> x var
prf 116405:116413 Int64 bits_shl'
R116478:116482 Coq.Init.Logic <> :type_scope:x_'='_x not
R116458:116464 Integers Int64 testbit def
R116477:116477 Integers <> i var
R116467:116470 Integers Int64 shl' def
R116474:116474 Integers <> y var
R116472:116472 Integers <> x var
R116486:116488 Coqlib <> zlt def
R116493:116504 Integers Int unsigned def
R116506:116506 Integers <> y var
R116490:116490 Integers <> i var
R116525:116531 Integers Int64 testbit def
R116537:116539 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R116536:116536 Integers <> i var
R116540:116551 Integers Int unsigned def
R116553:116553 Integers <> y var
R116533:116533 Integers <> x var
R116514:116518 Coq.Init.Datatypes <> false constr
R116435:116438 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R116440:116442 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R116439:116439 Integers <> i var
R116439:116439 Integers <> i var
R116443:116451 Integers Int64 zwordsize def
R116581:116584 Integers Int64 shl' def
R116595:116606 Integers Int64 testbit_repr thm
R116595:116606 Integers Int64 testbit_repr thm
R116628:116630 Coqlib <> zlt def
R116635:116646 Integers Int unsigned def
R116628:116630 Coqlib <> zlt def
R116635:116646 Integers Int unsigned def
R116662:116678 Coq.ZArith.BinInt Z shiftl_spec_low thm
R116662:116678 Coq.ZArith.BinInt Z shiftl_spec_low thm
R116695:116712 Coq.ZArith.BinInt Z shiftl_spec_high thm
R116695:116712 Coq.ZArith.BinInt Z shiftl_spec_high thm
prf 116741:116750 Int64 bits_shru'
R116816:116820 Coq.Init.Logic <> :type_scope:x_'='_x not
R116795:116801 Integers Int64 testbit def
R116815:116815 Integers <> i var
R116804:116808 Integers Int64 shru' def
R116812:116812 Integers <> y var
R116810:116810 Integers <> x var
R116824:116826 Coqlib <> zlt def
R116849:116857 Integers Int64 zwordsize def
R116830:116832 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R116829:116829 Integers <> i var
R116833:116844 Integers Int unsigned def
R116846:116846 Integers <> y var
R116900:116904 Coq.Init.Datatypes <> false constr
R116864:116870 Integers Int64 testbit def
R116876:116878 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R116875:116875 Integers <> i var
R116879:116890 Integers Int unsigned def
R116892:116892 Integers <> y var
R116872:116872 Integers <> x var
R116772:116775 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R116777:116779 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R116776:116776 Integers <> i var
R116776:116776 Integers <> i var
R116780:116788 Integers Int64 zwordsize def
R116931:116935 Integers Int64 shru' def
R116946:116957 Integers Int64 testbit_repr thm
R116946:116957 Integers Int64 testbit_repr thm
R116977:116989 Coq.ZArith.BinInt Z shiftr_spec thm
R116977:116989 Coq.ZArith.BinInt Z shiftr_spec thm
R116998:117004 Integers Int64 testbit def
R117010:117012 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R117013:117024 Integers Int unsigned def
R116998:117004 Integers Int64 testbit def
R117010:117012 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R117013:117024 Integers Int unsigned def
R117043:117045 Coqlib <> zlt def
R117068:117076 Integers Int64 zwordsize def
R117049:117051 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R117052:117063 Integers Int unsigned def
R117043:117045 Coqlib <> zlt def
R117068:117076 Integers Int64 zwordsize def
R117049:117051 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R117052:117063 Integers Int unsigned def
R117096:117105 Integers Int64 bits_above thm
R117096:117105 Integers Int64 bits_above thm
prf 117136:117144 Int64 bits_shr'
R117209:117213 Coq.Init.Logic <> :type_scope:x_'='_x not
R117189:117195 Integers Int64 testbit def
R117208:117208 Integers <> i var
R117198:117201 Integers Int64 shr' def
R117205:117205 Integers <> y var
R117203:117203 Integers <> x var
R117214:117220 Integers Int64 testbit def
R117228:117230 Coqlib <> zlt def
R117253:117261 Integers Int64 zwordsize def
R117234:117236 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R117233:117233 Integers <> i var
R117237:117248 Integers Int unsigned def
R117250:117250 Integers <> y var
R117301:117303 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R117292:117300 Integers Int64 zwordsize def
R117269:117271 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R117268:117268 Integers <> i var
R117272:117283 Integers Int unsigned def
R117285:117285 Integers <> y var
R117222:117222 Integers <> x var
R117166:117169 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R117171:117173 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R117170:117170 Integers <> i var
R117170:117170 Integers <> i var
R117174:117182 Integers Int64 zwordsize def
R117332:117335 Integers Int64 shr' def
R117346:117357 Integers Int64 testbit_repr thm
R117346:117357 Integers Int64 testbit_repr thm
R117377:117389 Coq.ZArith.BinInt Z shiftr_spec thm
R117377:117389 Coq.ZArith.BinInt Z shiftr_spec thm
R117398:117408 Integers Int64 bits_signed thm
R117398:117408 Integers Int64 bits_signed thm
R117426:117443 Integers Int unsigned_range thm
R117426:117443 Integers Int unsigned_range thm
def 117538:117543 Int64 loword
R117549:117551 Integers Int64 int rec
R117556:117562 Integers Int int rec
R117567:117574 Integers Int repr def
R117577:117584 Integers Int64 unsigned def
R117586:117586 Integers <> n var
def 117602:117607 Int64 hiword
R117613:117615 Integers Int64 int rec
R117620:117626 Integers Int int rec
R117631:117638 Integers Int repr def
R117641:117648 Integers Int64 unsigned def
R117651:117654 Integers Int64 shru def
R117659:117662 Integers Int64 repr def
R117664:117676 Integers Int zwordsize def
R117656:117656 Integers <> n var
def 117694:117700 Int64 ofwords
R117710:117716 Integers Int int rec
R117721:117723 Integers Int64 int rec
R117730:117731 Integers Int64 or def
R117786:117789 Integers Int64 repr def
R117792:117803 Integers Int unsigned def
R117805:117806 Integers <> lo var
R117734:117736 Integers Int64 shl def
R117764:117767 Integers Int64 repr def
R117769:117781 Integers Int zwordsize def
R117739:117742 Integers Int64 repr def
R117745:117756 Integers Int unsigned def
R117758:117759 Integers <> hi var
prf 117818:117828 Int64 bits_loword
R117895:117897 Coq.Init.Logic <> :type_scope:x_'='_x not
R117871:117881 Integers Int testbit def
R117894:117894 Integers <> i var
R117884:117889 Integers Int64 loword def
R117891:117891 Integers <> n var
R117898:117904 Integers Int64 testbit def
R117908:117908 Integers <> i var
R117906:117906 Integers <> n var
R117846:117849 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R117851:117853 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R117850:117850 Integers <> i var
R117850:117850 Integers <> i var
R117854:117866 Integers Int zwordsize def
R117935:117940 Integers Int64 loword def
R117951:117966 Integers Int testbit_repr thm
R117951:117966 Integers Int testbit_repr thm
prf 117988:117998 Int64 bits_hiword
R118065:118067 Coq.Init.Logic <> :type_scope:x_'='_x not
R118041:118051 Integers Int testbit def
R118064:118064 Integers <> i var
R118054:118059 Integers Int64 hiword def
R118061:118061 Integers <> n var
R118068:118074 Integers Int64 testbit def
R118080:118082 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R118079:118079 Integers <> i var
R118083:118095 Integers Int zwordsize def
R118076:118076 Integers <> n var
R118016:118019 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R118021:118023 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R118020:118020 Integers <> i var
R118020:118020 Integers <> i var
R118024:118036 Integers Int zwordsize def
R118123:118128 Integers Int64 hiword def
R118139:118154 Integers Int testbit_repr thm
R118139:118154 Integers Int testbit_repr thm
R118182:118184 Coq.Init.Logic <> :type_scope:x_'='_x not
R118173:118181 Integers Int64 zwordsize def
R118186:118188 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R118189:118201 Integers Int zwordsize def
R118182:118184 Coq.Init.Logic <> :type_scope:x_'='_x not
R118173:118181 Integers Int64 zwordsize def
R118186:118188 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R118189:118201 Integers Int zwordsize def
R118228:118234 Integers Int64 testbit def
R118237:118240 Integers Int64 shru def
R118245:118248 Integers Int64 repr def
R118250:118262 Integers Int zwordsize def
R118228:118234 Integers Int64 testbit def
R118237:118240 Integers Int64 shru def
R118245:118248 Integers Int64 repr def
R118250:118262 Integers Int zwordsize def
R118278:118286 Integers Int64 bits_shru thm
R118278:118286 Integers Int64 bits_shru thm
R118335:118347 Integers Int zwordsize def
R118299:118306 Integers Int64 unsigned def
R118309:118312 Integers Int64 repr def
R118314:118326 Integers Int zwordsize def
R118299:118306 Integers Int64 unsigned def
R118309:118312 Integers Int64 repr def
R118314:118326 Integers Int zwordsize def
R118335:118347 Integers Int zwordsize def
R118358:118365 Coqlib <> zlt_true thm
R118358:118365 Coqlib <> zlt_true thm
prf 118395:118406 Int64 bits_ofwords
R118476:118480 Coq.Init.Logic <> :type_scope:x_'='_x not
R118451:118457 Integers Int64 testbit def
R118475:118475 Integers <> i var
R118460:118466 Integers Int64 ofwords def
R118471:118472 Integers <> lo var
R118468:118469 Integers <> hi var
R118484:118486 Coqlib <> zlt def
R118490:118502 Integers Int zwordsize def
R118488:118488 Integers <> i var
R118531:118541 Integers Int testbit def
R118548:118550 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R118547:118547 Integers <> i var
R118551:118563 Integers Int zwordsize def
R118543:118544 Integers <> hi var
R118509:118519 Integers Int testbit def
R118524:118524 Integers <> i var
R118521:118522 Integers <> lo var
R118428:118431 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R118433:118435 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R118432:118432 Integers <> i var
R118432:118432 Integers <> i var
R118436:118444 Integers Int64 zwordsize def
R118591:118597 Integers Int64 ofwords def
R118608:118614 Integers Int64 bits_or thm
R118608:118614 Integers Int64 bits_or thm
R118631:118638 Integers Int64 bits_shl thm
R118631:118638 Integers Int64 bits_shl thm
R118694:118706 Integers Int zwordsize def
R118658:118665 Integers Int64 unsigned def
R118668:118671 Integers Int64 repr def
R118673:118685 Integers Int zwordsize def
R118658:118665 Integers Int64 unsigned def
R118668:118671 Integers Int64 repr def
R118673:118685 Integers Int zwordsize def
R118694:118706 Integers Int zwordsize def
R118729:118731 Coq.Init.Logic <> :type_scope:x_'='_x not
R118720:118728 Integers Int64 zwordsize def
R118733:118735 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R118736:118748 Integers Int zwordsize def
R118729:118731 Coq.Init.Logic <> :type_scope:x_'='_x not
R118720:118728 Integers Int64 zwordsize def
R118733:118735 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R118736:118748 Integers Int zwordsize def
R118779:118781 Coqlib <> zlt def
R118785:118797 Integers Int zwordsize def
R118779:118781 Coqlib <> zlt def
R118785:118797 Integers Int zwordsize def
R118811:118822 Integers Int64 testbit_repr thm
R118811:118822 Integers Int64 testbit_repr thm
R118843:118854 Integers Int64 testbit_repr thm
R118843:118854 Integers Int64 testbit_repr thm
R118843:118854 Integers Int64 testbit_repr thm
R118843:118854 Integers Int64 testbit_repr thm
R118871:118881 Integers Int testbit def
R118871:118881 Integers Int testbit def
R118898:118911 Integers Int bits_above thm
R118898:118911 Integers Int bits_above thm
R118920:118930 Coq.Bool.Bool <> orb_false_r thm
R118920:118930 Coq.Bool.Bool <> orb_false_r thm
prf 118961:118970 Int64 lo_ofwords
R119011:119013 Coq.Init.Logic <> :type_scope:x_'='_x not
R118989:118994 Integers Int64 loword def
R118997:119003 Integers Int64 ofwords def
R119008:119009 Integers <> lo var
R119005:119006 Integers <> hi var
R119014:119015 Integers <> lo var
R119041:119056 Integers Int same_bits_eq thm
R119041:119056 Integers Int same_bits_eq thm
R119078:119088 Integers Int64 bits_loword thm
R119078:119088 Integers Int64 bits_loword thm
R119105:119116 Integers Int64 bits_ofwords thm
R119105:119116 Integers Int64 bits_ofwords thm
R119125:119132 Coqlib <> zlt_true thm
R119125:119132 Coqlib <> zlt_true thm
R119162:119164 Coq.Init.Logic <> :type_scope:x_'='_x not
R119153:119161 Integers Int64 zwordsize def
R119166:119168 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R119169:119181 Integers Int zwordsize def
R119162:119164 Coq.Init.Logic <> :type_scope:x_'='_x not
R119153:119161 Integers Int64 zwordsize def
R119166:119168 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R119169:119181 Integers Int zwordsize def
prf 119219:119228 Int64 hi_ofwords
R119269:119271 Coq.Init.Logic <> :type_scope:x_'='_x not
R119247:119252 Integers Int64 hiword def
R119255:119261 Integers Int64 ofwords def
R119266:119267 Integers <> lo var
R119263:119264 Integers <> hi var
R119272:119273 Integers <> hi var
R119299:119314 Integers Int same_bits_eq thm
R119299:119314 Integers Int same_bits_eq thm
R119336:119346 Integers Int64 bits_hiword thm
R119336:119346 Integers Int64 bits_hiword thm
R119363:119374 Integers Int64 bits_ofwords thm
R119363:119374 Integers Int64 bits_ofwords thm
R119387:119395 Coqlib <> zlt_false thm
R119387:119395 Coqlib <> zlt_false thm
R119441:119443 Coq.Init.Logic <> :type_scope:x_'='_x not
R119432:119440 Integers Int64 zwordsize def
R119445:119447 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R119448:119460 Integers Int zwordsize def
R119441:119443 Coq.Init.Logic <> :type_scope:x_'='_x not
R119432:119440 Integers Int64 zwordsize def
R119445:119447 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R119448:119460 Integers Int zwordsize def
prf 119498:119514 Int64 ofwords_recompose
R119558:119560 Coq.Init.Logic <> :type_scope:x_'='_x not
R119529:119535 Integers Int64 ofwords def
R119549:119554 Integers Int64 loword def
R119556:119556 Integers <> n var
R119538:119543 Integers Int64 hiword def
R119545:119545 Integers <> n var
R119561:119561 Integers <> n var
R119587:119598 Integers Int64 same_bits_eq thm
R119587:119598 Integers Int64 same_bits_eq thm
R119617:119628 Integers Int64 bits_ofwords thm
R119617:119628 Integers Int64 bits_ofwords thm
R119650:119652 Coqlib <> zlt def
R119656:119668 Integers Int zwordsize def
R119650:119652 Coqlib <> zlt def
R119656:119668 Integers Int zwordsize def
R119681:119691 Integers Int64 bits_loword thm
R119681:119691 Integers Int64 bits_loword thm
R119712:119722 Integers Int64 bits_hiword thm
R119712:119722 Integers Int64 bits_hiword thm
R119761:119763 Coq.Init.Logic <> :type_scope:x_'='_x not
R119752:119760 Integers Int64 zwordsize def
R119765:119767 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R119768:119780 Integers Int zwordsize def
R119761:119763 Coq.Init.Logic <> :type_scope:x_'='_x not
R119752:119760 Integers Int64 zwordsize def
R119765:119767 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R119768:119780 Integers Int zwordsize def
prf 119818:119828 Int64 ofwords_add
R119860:119862 Coq.Init.Logic <> :type_scope:x_'='_x not
R119847:119853 Integers Int64 ofwords def
R119858:119859 Integers <> lo var
R119855:119856 Integers <> hi var
R119863:119866 Integers Int64 repr def
R119895:119897 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R119884:119886 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R119869:119880 Integers Int unsigned def
R119882:119883 Integers <> hi var
R119887:119891 Coq.ZArith.Zpower <> two_p def
R119898:119909 Integers Int unsigned def
R119911:119912 Integers <> lo var
R119940:119946 Integers Int64 ofwords def
R119957:119973 Integers Int64 shifted_or_is_add thm
R119957:119973 Integers Int64 shifted_or_is_add thm
R119985:119996 Integers Int64 eqm_samerepr thm
R119985:119996 Integers Int64 eqm_samerepr thm
R120005:120011 Integers Int64 eqm_add thm
R120005:120011 Integers Int64 eqm_add thm
R120020:120027 Integers Int64 eqm_mult thm
R120020:120027 Integers Int64 eqm_mult thm
R120039:120045 Integers Int64 eqm_sym thm
R120054:120070 Integers Int64 eqm_unsigned_repr thm
R120039:120045 Integers Int64 eqm_sym thm
R120054:120070 Integers Int64 eqm_unsigned_repr thm
R120081:120088 Integers Int64 eqm_refl thm
R120081:120088 Integers Int64 eqm_refl thm
R120100:120106 Integers Int64 eqm_sym thm
R120115:120131 Integers Int64 eqm_unsigned_repr thm
R120100:120106 Integers Int64 eqm_sym thm
R120115:120131 Integers Int64 eqm_unsigned_repr thm
R120143:120155 Integers Int zwordsize def
R120173:120181 Integers Int64 zwordsize def
R120143:120155 Integers Int zwordsize def
R120173:120181 Integers Int64 zwordsize def
R120209:120221 Integers Int64 unsigned_repr thm
R120209:120221 Integers Int64 unsigned_repr thm
R120236:120253 Integers Int unsigned_range thm
R120236:120253 Integers Int unsigned_range thm
R120310:120312 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x not
R120294:120309 Integers Int max_unsigned def
R120313:120324 Integers Int64 max_unsigned def
R120310:120312 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x not
R120294:120309 Integers Int max_unsigned def
R120313:120324 Integers Int64 max_unsigned def
R120361:120380 Integers Int unsigned_range_2 thm
R120361:120380 Integers Int unsigned_range_2 thm
prf 120406:120417 Int64 ofwords_add'
R120460:120462 Coq.Init.Logic <> :type_scope:x_'='_x not
R120436:120443 Integers Int64 unsigned def
R120446:120452 Integers Int64 ofwords def
R120457:120458 Integers <> lo var
R120454:120455 Integers <> hi var
R120489:120491 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R120478:120480 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R120463:120474 Integers Int unsigned def
R120476:120477 Integers <> hi var
R120481:120485 Coq.ZArith.Zpower <> two_p def
R120492:120503 Integers Int unsigned def
R120505:120506 Integers <> lo var
R120534:120544 Integers Int64 ofwords_add thm
R120534:120544 Integers Int64 ofwords_add thm
R120553:120565 Integers Int64 unsigned_repr thm
R120553:120565 Integers Int64 unsigned_repr thm
R120582:120599 Integers Int unsigned_range thm
R120606:120623 Integers Int unsigned_range thm
R120582:120599 Integers Int unsigned_range thm
R120606:120623 Integers Int unsigned_range thm
R120656:120666 Integers Int modulus def
R120641:120645 Coq.ZArith.Zpower <> two_p def
R120641:120645 Coq.ZArith.Zpower <> two_p def
R120656:120666 Integers Int modulus def
R120678:120688 Integers Int modulus def
R120678:120688 Integers Int modulus def
R120716:120727 Integers Int64 max_unsigned def
R120716:120727 Integers Int64 max_unsigned def
prf 120778:120789 Int64 eqm_mul_2p32
R120821:120823 Integers Int64 eqm def
R120842:120844 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R120841:120841 Integers <> y var
R120845:120849 Coq.ZArith.Zpower <> two_p def
R120827:120829 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R120826:120826 Integers <> x var
R120830:120834 Coq.ZArith.Zpower <> two_p def
R120806:120812 Integers Int eqm def
R120816:120816 Integers <> y var
R120814:120814 Integers <> x var
R120944:120948 Coq.ZArith.Zpower <> two_p def
R120926:120936 Integers Int modulus def
R120926:120936 Integers Int modulus def
R120944:120948 Coq.ZArith.Zpower <> two_p def
R120987:120989 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R120979:120983 Coq.ZArith.Zpower <> two_p def
R120990:120994 Coq.ZArith.Zpower <> two_p def
R120965:120971 Integers Int64 modulus def
R120965:120971 Integers Int64 modulus def
R120987:120989 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R120979:120983 Coq.ZArith.Zpower <> two_p def
R120990:120994 Coq.ZArith.Zpower <> two_p def
prf 121021:121033 Int64 ofwords_add''
R121074:121076 Coq.Init.Logic <> :type_scope:x_'='_x not
R121052:121057 Integers Int64 signed def
R121060:121066 Integers Int64 ofwords def
R121071:121072 Integers <> lo var
R121068:121069 Integers <> hi var
R121101:121103 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R121090:121092 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R121077:121086 Integers Int signed def
R121088:121089 Integers <> hi var
R121093:121097 Coq.ZArith.Zpower <> two_p def
R121104:121115 Integers Int unsigned def
R121117:121118 Integers <> lo var
R121146:121156 Integers Int64 ofwords_add thm
R121146:121156 Integers Int64 ofwords_add thm
R121170:121173 Integers Int64 repr def
R121202:121204 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R121191:121193 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R121176:121187 Integers Int unsigned def
R121194:121198 Coq.ZArith.Zpower <> two_p def
R121205:121216 Integers Int unsigned def
R121234:121237 Integers Int64 repr def
R121264:121266 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R121253:121255 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R121240:121249 Integers Int signed def
R121256:121260 Coq.ZArith.Zpower <> two_p def
R121267:121278 Integers Int unsigned def
R121234:121237 Integers Int64 repr def
R121264:121266 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R121253:121255 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R121240:121249 Integers Int signed def
R121256:121260 Coq.ZArith.Zpower <> two_p def
R121267:121278 Integers Int unsigned def
R121170:121173 Integers Int64 repr def
R121202:121204 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R121191:121193 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R121176:121187 Integers Int unsigned def
R121194:121198 Coq.ZArith.Zpower <> two_p def
R121205:121216 Integers Int unsigned def
R121294:121304 Integers Int64 signed_repr thm
R121294:121304 Integers Int64 signed_repr thm
R121321:121336 Integers Int signed_range thm
R121343:121360 Integers Int unsigned_range thm
R121321:121336 Integers Int signed_range thm
R121343:121360 Integers Int unsigned_range thm
R121393:121403 Integers Int modulus def
R121378:121382 Coq.ZArith.Zpower <> two_p def
R121378:121382 Coq.ZArith.Zpower <> two_p def
R121393:121403 Integers Int modulus def
R121446:121448 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R121432:121445 Integers Int min_signed def
R121449:121459 Integers Int modulus def
R121415:121424 Integers Int64 min_signed def
R121415:121424 Integers Int64 min_signed def
R121446:121448 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R121432:121445 Integers Int min_signed def
R121449:121459 Integers Int modulus def
R121531:121533 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R121517:121519 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R121503:121505 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R121489:121502 Integers Int max_signed def
R121506:121516 Integers Int modulus def
R121520:121530 Integers Int modulus def
R121472:121481 Integers Int64 max_signed def
R121472:121481 Integers Int64 max_signed def
R121531:121533 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R121517:121519 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R121503:121505 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R121489:121502 Integers Int max_signed def
R121506:121516 Integers Int modulus def
R121520:121530 Integers Int modulus def
R121547:121557 Integers Int modulus def
R121547:121557 Integers Int modulus def
R121593:121604 Integers Int64 eqm_samerepr thm
R121593:121604 Integers Int64 eqm_samerepr thm
R121613:121619 Integers Int64 eqm_add thm
R121613:121619 Integers Int64 eqm_add thm
R121628:121639 Integers Int64 eqm_mul_2p32 thm
R121628:121639 Integers Int64 eqm_mul_2p32 thm
R121648:121670 Integers Int eqm_signed_unsigned thm
R121648:121670 Integers Int eqm_signed_unsigned thm
R121679:121686 Integers Int64 eqm_refl thm
R121679:121686 Integers Int64 eqm_refl thm
prf 121768:121790 Int64 decompose_bitwise_binop
R122068:122070 Coq.Init.Logic <> :type_scope:x_'='_x not
R122033:122035 Integers <> f64 var
R122054:122060 Integers Int64 ofwords def
R122065:122066 Integers <> yl var
R122062:122063 Integers <> yh var
R122038:122044 Integers Int64 ofwords def
R122049:122050 Integers <> xl var
R122046:122047 Integers <> xh var
R122071:122077 Integers Int64 ofwords def
R122092:122094 Integers <> f32 var
R122099:122100 Integers <> yl var
R122096:122097 Integers <> xl var
R122080:122082 Integers <> f32 var
R122087:122088 Integers <> yh var
R122084:122085 Integers <> xh var
R121986:121988 Coq.Init.Logic <> :type_scope:x_'='_x not
R121963:121973 Integers Int testbit def
R121985:121985 Integers <> i var
R121976:121978 Integers <> f32 var
R121982:121982 Integers <> y var
R121980:121980 Integers <> x var
R121989:121989 Integers <> f var
R122010:122020 Integers Int testbit def
R122024:122024 Integers <> i var
R122022:122022 Integers <> y var
R121992:122002 Integers Int testbit def
R122006:122006 Integers <> i var
R122004:122004 Integers <> x var
R121938:121941 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R121943:121945 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R121942:121942 Integers <> i var
R121942:121942 Integers <> i var
R121946:121958 Integers Int zwordsize def
R121883:121885 Coq.Init.Logic <> :type_scope:x_'='_x not
R121864:121870 Integers Int64 testbit def
R121882:121882 Integers <> i var
R121873:121875 Integers <> f64 var
R121879:121879 Integers <> y var
R121877:121877 Integers <> x var
R121886:121886 Integers <> f var
R121903:121909 Integers Int64 testbit def
R121913:121913 Integers <> i var
R121911:121911 Integers <> y var
R121889:121895 Integers Int64 testbit def
R121899:121899 Integers <> i var
R121897:121897 Integers <> x var
R121843:121846 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R121848:121850 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R121847:121847 Integers <> i var
R121847:121847 Integers <> i var
R121851:121859 Integers Int64 zwordsize def
R122127:122144 Integers Int64 same_bits_eq thm
R122127:122144 Integers Int64 same_bits_eq thm
R122186:122197 Integers Int64 bits_ofwords thm
R122186:122197 Integers Int64 bits_ofwords thm
R122186:122197 Integers Int64 bits_ofwords thm
R122186:122197 Integers Int64 bits_ofwords thm
R122186:122197 Integers Int64 bits_ofwords thm
R122227:122229 Coq.Init.Logic <> :type_scope:x_'='_x not
R122218:122226 Integers Int64 zwordsize def
R122231:122233 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R122234:122246 Integers Int zwordsize def
R122227:122229 Coq.Init.Logic <> :type_scope:x_'='_x not
R122218:122226 Integers Int64 zwordsize def
R122231:122233 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R122234:122246 Integers Int zwordsize def
R122277:122279 Coqlib <> zlt def
R122283:122295 Integers Int zwordsize def
R122277:122279 Coqlib <> zlt def
R122283:122295 Integers Int zwordsize def
prf 122338:122350 Int64 decompose_and
R122412:122414 Coq.Init.Logic <> :type_scope:x_'='_x not
R122377:122379 Integers Int64 and def
R122398:122404 Integers Int64 ofwords def
R122409:122410 Integers <> yl var
R122406:122407 Integers <> yh var
R122382:122388 Integers Int64 ofwords def
R122393:122394 Integers <> xl var
R122390:122391 Integers <> xh var
R122415:122421 Integers Int64 ofwords def
R122440:122446 Integers Int and def
R122451:122452 Integers <> yl var
R122448:122449 Integers <> xl var
R122424:122430 Integers Int and def
R122435:122436 Integers <> yh var
R122432:122433 Integers <> xh var
R122508:122511 Coq.Init.Datatypes <> andb def
R122479:122501 Integers Int64 decompose_bitwise_binop thm
R122508:122511 Coq.Init.Datatypes <> andb def
R122479:122501 Integers Int64 decompose_bitwise_binop thm
R122522:122529 Integers Int64 bits_and thm
R122522:122529 Integers Int64 bits_and thm
R122538:122549 Integers Int bits_and thm
R122538:122549 Integers Int bits_and thm
prf 122564:122575 Int64 decompose_or
R122636:122638 Coq.Init.Logic <> :type_scope:x_'='_x not
R122602:122603 Integers Int64 or def
R122622:122628 Integers Int64 ofwords def
R122633:122634 Integers <> yl var
R122630:122631 Integers <> yh var
R122606:122612 Integers Int64 ofwords def
R122617:122618 Integers <> xl var
R122614:122615 Integers <> xh var
R122639:122645 Integers Int64 ofwords def
R122663:122668 Integers Int or def
R122673:122674 Integers <> yl var
R122670:122671 Integers <> xl var
R122648:122653 Integers Int or def
R122658:122659 Integers <> yh var
R122655:122656 Integers <> xh var
R122730:122732 Coq.Init.Datatypes <> orb def
R122701:122723 Integers Int64 decompose_bitwise_binop thm
R122730:122732 Coq.Init.Datatypes <> orb def
R122701:122723 Integers Int64 decompose_bitwise_binop thm
R122743:122749 Integers Int64 bits_or thm
R122743:122749 Integers Int64 bits_or thm
R122758:122768 Integers Int bits_or thm
R122758:122768 Integers Int bits_or thm
prf 122783:122795 Int64 decompose_xor
R122857:122859 Coq.Init.Logic <> :type_scope:x_'='_x not
R122822:122824 Integers Int64 xor def
R122843:122849 Integers Int64 ofwords def
R122854:122855 Integers <> yl var
R122851:122852 Integers <> yh var
R122827:122833 Integers Int64 ofwords def
R122838:122839 Integers <> xl var
R122835:122836 Integers <> xh var
R122860:122866 Integers Int64 ofwords def
R122885:122891 Integers Int xor def
R122896:122897 Integers <> yl var
R122893:122894 Integers <> xl var
R122869:122875 Integers Int xor def
R122880:122881 Integers <> yh var
R122877:122878 Integers <> xh var
R122953:122956 Coq.Init.Datatypes <> xorb def
R122924:122946 Integers Int64 decompose_bitwise_binop thm
R122953:122956 Coq.Init.Datatypes <> xorb def
R122924:122946 Integers Int64 decompose_bitwise_binop thm
R122967:122974 Integers Int64 bits_xor thm
R122967:122974 Integers Int64 bits_xor thm
R122983:122994 Integers Int bits_xor thm
R122983:122994 Integers Int bits_xor thm
prf 123009:123021 Int64 decompose_not
R123061:123063 Coq.Init.Logic <> :type_scope:x_'='_x not
R123042:123044 Integers Int64 not def
R123047:123053 Integers Int64 ofwords def
R123058:123059 Integers <> xl var
R123055:123056 Integers <> xh var
R123064:123070 Integers Int64 ofwords def
R123086:123092 Integers Int not def
R123094:123095 Integers <> xl var
R123073:123079 Integers Int not def
R123081:123082 Integers <> xh var
R123123:123125 Integers Int64 not def
R123128:123134 Integers Int not def
R123148:123160 Integers Int64 decompose_xor thm
R123148:123160 Integers Int64 decompose_xor thm
R123182:123194 Integers Int64 eq_spec thm
R123202:123208 Integers Int64 ofwords def
R123219:123226 Integers Int mone def
R123210:123217 Integers Int mone def
R123196:123199 Integers Int64 mone def
R123182:123194 Integers Int64 eq_spec thm
R123202:123208 Integers Int64 ofwords def
R123219:123226 Integers Int mone def
R123210:123217 Integers Int mone def
R123196:123199 Integers Int64 mone def
prf 123243:123257 Int64 decompose_shl_1
R123343:123347 Coq.Init.Logic <> :type_scope:x_'='_x not
R123321:123324 Integers Int64 shl' def
R123342:123342 Integers <> y var
R123327:123333 Integers Int64 ofwords def
R123338:123339 Integers <> xl var
R123335:123336 Integers <> xh var
R123348:123354 Integers Int64 ofwords def
R123431:123437 Integers Int shl def
R123442:123442 Integers <> y var
R123439:123440 Integers <> xl var
R123357:123362 Integers Int or def
R123380:123387 Integers Int shru def
R123393:123399 Integers Int sub def
R123415:123415 Integers <> y var
R123401:123413 Integers Int iwordsize def
R123389:123390 Integers <> xl var
R123365:123371 Integers Int shl def
R123376:123376 Integers <> y var
R123373:123374 Integers <> xh var
R123281:123284 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R123299:123301 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R123285:123296 Integers Int unsigned def
R123298:123298 Integers <> y var
R123285:123296 Integers Int unsigned def
R123298:123298 Integers <> y var
R123302:123314 Integers Int zwordsize def
R123511:123513 Coq.Init.Logic <> :type_scope:x_'='_x not
R123473:123484 Integers Int unsigned def
R123487:123493 Integers Int sub def
R123495:123507 Integers Int iwordsize def
R123527:123529 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R123514:123526 Integers Int zwordsize def
R123530:123541 Integers Int unsigned def
R123511:123513 Coq.Init.Logic <> :type_scope:x_'='_x not
R123473:123484 Integers Int unsigned def
R123487:123493 Integers Int sub def
R123495:123507 Integers Int iwordsize def
R123527:123529 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R123514:123526 Integers Int zwordsize def
R123530:123541 Integers Int unsigned def
R123558:123564 Integers Int sub def
R123575:123591 Integers Int unsigned_repr thm
R123575:123591 Integers Int unsigned_repr thm
R123613:123638 Integers Int unsigned_repr_wordsize thm
R123613:123638 Integers Int unsigned_repr_wordsize thm
R123652:123676 Integers Int wordsize_max_unsigned thm
R123652:123676 Integers Int wordsize_max_unsigned thm
R123707:123709 Coq.Init.Logic <> :type_scope:x_'='_x not
R123698:123706 Integers Int64 zwordsize def
R123711:123713 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R123714:123726 Integers Int zwordsize def
R123707:123709 Coq.Init.Logic <> :type_scope:x_'='_x not
R123698:123706 Integers Int64 zwordsize def
R123711:123713 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R123714:123726 Integers Int zwordsize def
R123753:123770 Integers Int64 same_bits_eq thm
R123753:123770 Integers Int64 same_bits_eq thm
R123791:123799 Integers Int64 bits_shl' thm
R123791:123799 Integers Int64 bits_shl' thm
R123828:123839 Integers Int64 bits_ofwords thm
R123828:123839 Integers Int64 bits_ofwords thm
R123862:123864 Coqlib <> zlt def
R123868:123880 Integers Int zwordsize def
R123862:123864 Coqlib <> zlt def
R123868:123880 Integers Int zwordsize def
R123892:123903 Integers Int bits_shl thm
R123892:123903 Integers Int bits_shl thm
R123928:123930 Coqlib <> zlt def
R123935:123946 Integers Int unsigned def
R123928:123930 Coqlib <> zlt def
R123935:123946 Integers Int unsigned def
R123970:123981 Integers Int64 bits_ofwords thm
R123970:123981 Integers Int64 bits_ofwords thm
R124001:124008 Coqlib <> zlt_true thm
R124001:124008 Coqlib <> zlt_true thm
R124036:124044 Coqlib <> zlt_false thm
R124036:124044 Coqlib <> zlt_false thm
R124064:124075 Integers Int64 bits_ofwords thm
R124064:124075 Integers Int64 bits_ofwords thm
R124098:124108 Integers Int bits_or thm
R124098:124108 Integers Int bits_or thm
R124128:124139 Integers Int bits_shl thm
R124128:124139 Integers Int bits_shl thm
R124162:124174 Integers Int bits_shru thm
R124162:124174 Integers Int bits_shru thm
R124210:124212 Coqlib <> zlt def
R124236:124248 Integers Int zwordsize def
R124216:124218 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R124219:124230 Integers Int unsigned def
R124210:124212 Coqlib <> zlt def
R124236:124248 Integers Int zwordsize def
R124216:124218 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R124219:124230 Integers Int unsigned def
R124263:124270 Coqlib <> zlt_true thm
R124263:124270 Coqlib <> zlt_true thm
R124290:124297 Coqlib <> zlt_true thm
R124290:124297 Coqlib <> zlt_true thm
R124319:124329 Coq.Bool.Bool <> orb_false_l thm
R124319:124329 Coq.Bool.Bool <> orb_false_l thm
R124359:124367 Coqlib <> zlt_false thm
R124359:124367 Coqlib <> zlt_false thm
R124387:124395 Coqlib <> zlt_false thm
R124387:124395 Coqlib <> zlt_false thm
R124418:124428 Coq.Bool.Bool <> orb_false_r thm
R124418:124428 Coq.Bool.Bool <> orb_false_r thm
prf 124459:124473 Int64 decompose_shl_2
R124567:124571 Coq.Init.Logic <> :type_scope:x_'='_x not
R124545:124548 Integers Int64 shl' def
R124566:124566 Integers <> y var
R124551:124557 Integers Int64 ofwords def
R124562:124563 Integers <> xl var
R124559:124560 Integers <> xh var
R124572:124578 Integers Int64 ofwords def
R124619:124626 Integers Int zero def
R124581:124587 Integers Int shl def
R124593:124599 Integers Int sub def
R124603:124615 Integers Int iwordsize def
R124601:124601 Integers <> y var
R124589:124590 Integers <> xl var
R124509:124512 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R124527:124529 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R124496:124508 Integers Int zwordsize def
R124513:124524 Integers Int unsigned def
R124526:124526 Integers <> y var
R124513:124524 Integers Int unsigned def
R124526:124526 Integers <> y var
R124530:124538 Integers Int64 zwordsize def
R124665:124667 Coq.Init.Logic <> :type_scope:x_'='_x not
R124656:124664 Integers Int64 zwordsize def
R124669:124671 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R124672:124684 Integers Int zwordsize def
R124665:124667 Coq.Init.Logic <> :type_scope:x_'='_x not
R124656:124664 Integers Int64 zwordsize def
R124669:124671 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R124672:124684 Integers Int zwordsize def
R124751:124753 Coq.Init.Logic <> :type_scope:x_'='_x not
R124713:124724 Integers Int unsigned def
R124727:124733 Integers Int sub def
R124737:124749 Integers Int iwordsize def
R124768:124770 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R124754:124765 Integers Int unsigned def
R124771:124783 Integers Int zwordsize def
R124751:124753 Coq.Init.Logic <> :type_scope:x_'='_x not
R124713:124724 Integers Int unsigned def
R124727:124733 Integers Int sub def
R124737:124749 Integers Int iwordsize def
R124768:124770 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R124754:124765 Integers Int unsigned def
R124771:124783 Integers Int zwordsize def
R124798:124804 Integers Int sub def
R124815:124831 Integers Int unsigned_repr thm
R124815:124831 Integers Int unsigned_repr thm
R124853:124878 Integers Int unsigned_repr_wordsize thm
R124853:124878 Integers Int unsigned_repr_wordsize thm
R124893:124912 Integers Int unsigned_range_2 thm
R124893:124912 Integers Int unsigned_range_2 thm
R124935:124952 Integers Int64 same_bits_eq thm
R124935:124952 Integers Int64 same_bits_eq thm
R124973:124981 Integers Int64 bits_shl' thm
R124973:124981 Integers Int64 bits_shl' thm
R125010:125021 Integers Int64 bits_ofwords thm
R125010:125021 Integers Int64 bits_ofwords thm
R125044:125046 Coqlib <> zlt def
R125050:125062 Integers Int zwordsize def
R125044:125046 Coqlib <> zlt def
R125050:125062 Integers Int zwordsize def
R125074:125081 Coqlib <> zlt_true thm
R125074:125081 Coqlib <> zlt_true thm
R125099:125111 Integers Int bits_zero thm
R125099:125111 Integers Int bits_zero thm
R125124:125135 Integers Int bits_shl thm
R125124:125135 Integers Int bits_shl thm
R125160:125162 Coqlib <> zlt def
R125167:125178 Integers Int unsigned def
R125160:125162 Coqlib <> zlt def
R125167:125178 Integers Int unsigned def
R125195:125202 Coqlib <> zlt_true thm
R125195:125202 Coqlib <> zlt_true thm
R125231:125239 Coqlib <> zlt_false thm
R125231:125239 Coqlib <> zlt_false thm
R125262:125273 Integers Int64 bits_ofwords thm
R125262:125273 Integers Int64 bits_ofwords thm
R125293:125300 Coqlib <> zlt_true thm
R125293:125300 Coqlib <> zlt_true thm
prf 125341:125356 Int64 decompose_shru_1
R125443:125447 Coq.Init.Logic <> :type_scope:x_'='_x not
R125420:125424 Integers Int64 shru' def
R125442:125442 Integers <> y var
R125427:125433 Integers Int64 ofwords def
R125438:125439 Integers <> xl var
R125435:125436 Integers <> xh var
R125448:125454 Integers Int64 ofwords def
R125483:125488 Integers Int or def
R125507:125513 Integers Int shl def
R125519:125525 Integers Int sub def
R125541:125541 Integers <> y var
R125527:125539 Integers Int iwordsize def
R125515:125516 Integers <> xh var
R125491:125498 Integers Int shru def
R125503:125503 Integers <> y var
R125500:125501 Integers <> xl var
R125457:125464 Integers Int shru def
R125469:125469 Integers <> y var
R125466:125467 Integers <> xh var
R125380:125383 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R125398:125400 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R125384:125395 Integers Int unsigned def
R125397:125397 Integers <> y var
R125384:125395 Integers Int unsigned def
R125397:125397 Integers <> y var
R125401:125413 Integers Int zwordsize def
R125612:125614 Coq.Init.Logic <> :type_scope:x_'='_x not
R125574:125585 Integers Int unsigned def
R125588:125594 Integers Int sub def
R125596:125608 Integers Int iwordsize def
R125628:125630 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R125615:125627 Integers Int zwordsize def
R125631:125642 Integers Int unsigned def
R125612:125614 Coq.Init.Logic <> :type_scope:x_'='_x not
R125574:125585 Integers Int unsigned def
R125588:125594 Integers Int sub def
R125596:125608 Integers Int iwordsize def
R125628:125630 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R125615:125627 Integers Int zwordsize def
R125631:125642 Integers Int unsigned def
R125659:125665 Integers Int sub def
R125676:125692 Integers Int unsigned_repr thm
R125676:125692 Integers Int unsigned_repr thm
R125714:125739 Integers Int unsigned_repr_wordsize thm
R125714:125739 Integers Int unsigned_repr_wordsize thm
R125753:125777 Integers Int wordsize_max_unsigned thm
R125753:125777 Integers Int wordsize_max_unsigned thm
R125808:125810 Coq.Init.Logic <> :type_scope:x_'='_x not
R125799:125807 Integers Int64 zwordsize def
R125812:125814 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R125815:125827 Integers Int zwordsize def
R125808:125810 Coq.Init.Logic <> :type_scope:x_'='_x not
R125799:125807 Integers Int64 zwordsize def
R125812:125814 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R125815:125827 Integers Int zwordsize def
R125854:125871 Integers Int64 same_bits_eq thm
R125854:125871 Integers Int64 same_bits_eq thm
R125892:125901 Integers Int64 bits_shru' thm
R125892:125901 Integers Int64 bits_shru' thm
R125930:125941 Integers Int64 bits_ofwords thm
R125930:125941 Integers Int64 bits_ofwords thm
R125964:125966 Coqlib <> zlt def
R125970:125982 Integers Int zwordsize def
R125964:125966 Coqlib <> zlt def
R125970:125982 Integers Int zwordsize def
R125996:126003 Coqlib <> zlt_true thm
R125996:126003 Coqlib <> zlt_true thm
R126026:126037 Integers Int64 bits_ofwords thm
R126026:126037 Integers Int64 bits_ofwords thm
R126059:126069 Integers Int bits_or thm
R126059:126069 Integers Int bits_or thm
R126089:126100 Integers Int bits_shl thm
R126089:126100 Integers Int bits_shl thm
R126123:126135 Integers Int bits_shru thm
R126123:126135 Integers Int bits_shru thm
R126171:126173 Coqlib <> zlt def
R126197:126209 Integers Int zwordsize def
R126177:126179 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R126180:126191 Integers Int unsigned def
R126171:126173 Coqlib <> zlt def
R126197:126209 Integers Int zwordsize def
R126177:126179 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R126180:126191 Integers Int unsigned def
R126224:126231 Coqlib <> zlt_true thm
R126224:126231 Coqlib <> zlt_true thm
R126253:126263 Coq.Bool.Bool <> orb_false_r thm
R126253:126263 Coq.Bool.Bool <> orb_false_r thm
R126282:126290 Coqlib <> zlt_false thm
R126282:126290 Coqlib <> zlt_false thm
R126313:126323 Coq.Bool.Bool <> orb_false_l thm
R126313:126323 Coq.Bool.Bool <> orb_false_l thm
R126352:126364 Integers Int bits_shru thm
R126352:126364 Integers Int bits_shru thm
R126389:126391 Coqlib <> zlt def
R126414:126422 Integers Int64 zwordsize def
R126395:126397 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R126398:126409 Integers Int unsigned def
R126389:126391 Coqlib <> zlt def
R126414:126422 Integers Int64 zwordsize def
R126395:126397 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R126398:126409 Integers Int unsigned def
R126436:126447 Integers Int64 bits_ofwords thm
R126436:126447 Integers Int64 bits_ofwords thm
R126470:126477 Coqlib <> zlt_true thm
R126470:126477 Coqlib <> zlt_true thm
R126497:126505 Coqlib <> zlt_false thm
R126497:126505 Coqlib <> zlt_false thm
R126544:126552 Coqlib <> zlt_false thm
R126544:126552 Coqlib <> zlt_false thm
prf 126582:126597 Int64 decompose_shru_2
R126692:126696 Coq.Init.Logic <> :type_scope:x_'='_x not
R126669:126673 Integers Int64 shru' def
R126691:126691 Integers <> y var
R126676:126682 Integers Int64 ofwords def
R126687:126688 Integers <> xl var
R126684:126685 Integers <> xh var
R126697:126703 Integers Int64 ofwords def
R126715:126722 Integers Int shru def
R126728:126734 Integers Int sub def
R126738:126750 Integers Int iwordsize def
R126736:126736 Integers <> y var
R126724:126725 Integers <> xh var
R126705:126712 Integers Int zero def
R126633:126636 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R126651:126653 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R126620:126632 Integers Int zwordsize def
R126637:126648 Integers Int unsigned def
R126650:126650 Integers <> y var
R126637:126648 Integers Int unsigned def
R126650:126650 Integers <> y var
R126654:126662 Integers Int64 zwordsize def
R126791:126793 Coq.Init.Logic <> :type_scope:x_'='_x not
R126782:126790 Integers Int64 zwordsize def
R126795:126797 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R126798:126810 Integers Int zwordsize def
R126791:126793 Coq.Init.Logic <> :type_scope:x_'='_x not
R126782:126790 Integers Int64 zwordsize def
R126795:126797 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R126798:126810 Integers Int zwordsize def
R126877:126879 Coq.Init.Logic <> :type_scope:x_'='_x not
R126839:126850 Integers Int unsigned def
R126853:126859 Integers Int sub def
R126863:126875 Integers Int iwordsize def
R126894:126896 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R126880:126891 Integers Int unsigned def
R126897:126909 Integers Int zwordsize def
R126877:126879 Coq.Init.Logic <> :type_scope:x_'='_x not
R126839:126850 Integers Int unsigned def
R126853:126859 Integers Int sub def
R126863:126875 Integers Int iwordsize def
R126894:126896 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R126880:126891 Integers Int unsigned def
R126897:126909 Integers Int zwordsize def
R126924:126930 Integers Int sub def
R126941:126957 Integers Int unsigned_repr thm
R126941:126957 Integers Int unsigned_repr thm
R126979:127004 Integers Int unsigned_repr_wordsize thm
R126979:127004 Integers Int unsigned_repr_wordsize thm
R127019:127038 Integers Int unsigned_range_2 thm
R127019:127038 Integers Int unsigned_range_2 thm
R127061:127078 Integers Int64 same_bits_eq thm
R127061:127078 Integers Int64 same_bits_eq thm
R127099:127108 Integers Int64 bits_shru' thm
R127099:127108 Integers Int64 bits_shru' thm
R127137:127148 Integers Int64 bits_ofwords thm
R127137:127148 Integers Int64 bits_ofwords thm
R127171:127173 Coqlib <> zlt def
R127177:127189 Integers Int zwordsize def
R127171:127173 Coqlib <> zlt def
R127177:127189 Integers Int zwordsize def
R127203:127215 Integers Int bits_shru thm
R127203:127215 Integers Int bits_shru thm
R127251:127253 Coqlib <> zlt def
R127276:127284 Integers Int64 zwordsize def
R127257:127259 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R127260:127271 Integers Int unsigned def
R127251:127253 Coqlib <> zlt def
R127276:127284 Integers Int64 zwordsize def
R127257:127259 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R127260:127271 Integers Int unsigned def
R127298:127305 Coqlib <> zlt_true thm
R127298:127305 Coqlib <> zlt_true thm
R127325:127336 Integers Int64 bits_ofwords thm
R127325:127336 Integers Int64 bits_ofwords thm
R127359:127367 Coqlib <> zlt_false thm
R127359:127367 Coqlib <> zlt_false thm
R127406:127414 Coqlib <> zlt_false thm
R127406:127414 Coqlib <> zlt_false thm
R127442:127450 Coqlib <> zlt_false thm
R127442:127450 Coqlib <> zlt_false thm
R127468:127480 Integers Int bits_zero thm
R127468:127480 Integers Int bits_zero thm
prf 127495:127509 Int64 decompose_shr_1
R127595:127599 Coq.Init.Logic <> :type_scope:x_'='_x not
R127573:127576 Integers Int64 shr' def
R127594:127594 Integers <> y var
R127579:127585 Integers Int64 ofwords def
R127590:127591 Integers <> xl var
R127587:127588 Integers <> xh var
R127600:127606 Integers Int64 ofwords def
R127634:127639 Integers Int or def
R127658:127664 Integers Int shl def
R127670:127676 Integers Int sub def
R127692:127692 Integers <> y var
R127678:127690 Integers Int iwordsize def
R127666:127667 Integers <> xh var
R127642:127649 Integers Int shru def
R127654:127654 Integers <> y var
R127651:127652 Integers <> xl var
R127609:127615 Integers Int shr def
R127620:127620 Integers <> y var
R127617:127618 Integers <> xh var
R127533:127536 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R127551:127553 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R127537:127548 Integers Int unsigned def
R127550:127550 Integers <> y var
R127537:127548 Integers Int unsigned def
R127550:127550 Integers <> y var
R127554:127566 Integers Int zwordsize def
R127763:127765 Coq.Init.Logic <> :type_scope:x_'='_x not
R127725:127736 Integers Int unsigned def
R127739:127745 Integers Int sub def
R127747:127759 Integers Int iwordsize def
R127779:127781 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R127766:127778 Integers Int zwordsize def
R127782:127793 Integers Int unsigned def
R127763:127765 Coq.Init.Logic <> :type_scope:x_'='_x not
R127725:127736 Integers Int unsigned def
R127739:127745 Integers Int sub def
R127747:127759 Integers Int iwordsize def
R127779:127781 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R127766:127778 Integers Int zwordsize def
R127782:127793 Integers Int unsigned def
R127810:127816 Integers Int sub def
R127827:127843 Integers Int unsigned_repr thm
R127827:127843 Integers Int unsigned_repr thm
R127865:127890 Integers Int unsigned_repr_wordsize thm
R127865:127890 Integers Int unsigned_repr_wordsize thm
R127904:127928 Integers Int wordsize_max_unsigned thm
R127904:127928 Integers Int wordsize_max_unsigned thm
R127959:127961 Coq.Init.Logic <> :type_scope:x_'='_x not
R127950:127958 Integers Int64 zwordsize def
R127963:127965 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R127966:127978 Integers Int zwordsize def
R127959:127961 Coq.Init.Logic <> :type_scope:x_'='_x not
R127950:127958 Integers Int64 zwordsize def
R127963:127965 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R127966:127978 Integers Int zwordsize def
R128005:128022 Integers Int64 same_bits_eq thm
R128005:128022 Integers Int64 same_bits_eq thm
R128043:128051 Integers Int64 bits_shr' thm
R128043:128051 Integers Int64 bits_shr' thm
R128080:128091 Integers Int64 bits_ofwords thm
R128080:128091 Integers Int64 bits_ofwords thm
R128114:128116 Coqlib <> zlt def
R128120:128132 Integers Int zwordsize def
R128114:128116 Coqlib <> zlt def
R128120:128132 Integers Int zwordsize def
R128146:128153 Coqlib <> zlt_true thm
R128146:128153 Coqlib <> zlt_true thm
R128176:128187 Integers Int64 bits_ofwords thm
R128176:128187 Integers Int64 bits_ofwords thm
R128209:128219 Integers Int bits_or thm
R128209:128219 Integers Int bits_or thm
R128239:128250 Integers Int bits_shl thm
R128239:128250 Integers Int bits_shl thm
R128273:128285 Integers Int bits_shru thm
R128273:128285 Integers Int bits_shru thm
R128321:128323 Coqlib <> zlt def
R128347:128359 Integers Int zwordsize def
R128327:128329 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R128330:128341 Integers Int unsigned def
R128321:128323 Coqlib <> zlt def
R128347:128359 Integers Int zwordsize def
R128327:128329 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R128330:128341 Integers Int unsigned def
R128374:128381 Coqlib <> zlt_true thm
R128374:128381 Coqlib <> zlt_true thm
R128403:128413 Coq.Bool.Bool <> orb_false_r thm
R128403:128413 Coq.Bool.Bool <> orb_false_r thm
R128432:128440 Coqlib <> zlt_false thm
R128432:128440 Coqlib <> zlt_false thm
R128463:128473 Coq.Bool.Bool <> orb_false_l thm
R128463:128473 Coq.Bool.Bool <> orb_false_l thm
R128502:128513 Integers Int bits_shr thm
R128502:128513 Integers Int bits_shr thm
R128538:128540 Coqlib <> zlt def
R128563:128571 Integers Int64 zwordsize def
R128544:128546 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R128547:128558 Integers Int unsigned def
R128538:128540 Coqlib <> zlt def
R128563:128571 Integers Int64 zwordsize def
R128544:128546 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R128547:128558 Integers Int unsigned def
R128585:128596 Integers Int64 bits_ofwords thm
R128585:128596 Integers Int64 bits_ofwords thm
R128619:128626 Coqlib <> zlt_true thm
R128619:128626 Coqlib <> zlt_true thm
R128646:128654 Coqlib <> zlt_false thm
R128646:128654 Coqlib <> zlt_false thm
R128693:128701 Coqlib <> zlt_false thm
R128693:128701 Coqlib <> zlt_false thm
R128721:128732 Integers Int64 bits_ofwords thm
R128721:128732 Integers Int64 bits_ofwords thm
R128755:128763 Coqlib <> zlt_false thm
R128755:128763 Coqlib <> zlt_false thm
prf 128796:128810 Int64 decompose_shr_2
R128904:128908 Coq.Init.Logic <> :type_scope:x_'='_x not
R128882:128885 Integers Int64 shr' def
R128903:128903 Integers <> y var
R128888:128894 Integers Int64 ofwords def
R128899:128900 Integers <> xl var
R128896:128897 Integers <> xh var
R128909:128915 Integers Int64 ofwords def
R128973:128979 Integers Int shr def
R128985:128991 Integers Int sub def
R128995:129007 Integers Int iwordsize def
R128993:128993 Integers <> y var
R128981:128982 Integers <> xh var
R128918:128924 Integers Int shr def
R128930:128936 Integers Int sub def
R128952:128958 Integers Int one def
R128938:128950 Integers Int iwordsize def
R128926:128927 Integers <> xh var
R128846:128849 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R128864:128866 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R128833:128845 Integers Int zwordsize def
R128850:128861 Integers Int unsigned def
R128863:128863 Integers <> y var
R128850:128861 Integers Int unsigned def
R128863:128863 Integers <> y var
R128867:128875 Integers Int64 zwordsize def
R129048:129050 Coq.Init.Logic <> :type_scope:x_'='_x not
R129039:129047 Integers Int64 zwordsize def
R129052:129054 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R129055:129067 Integers Int zwordsize def
R129048:129050 Coq.Init.Logic <> :type_scope:x_'='_x not
R129039:129047 Integers Int64 zwordsize def
R129052:129054 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R129055:129067 Integers Int zwordsize def
R129134:129136 Coq.Init.Logic <> :type_scope:x_'='_x not
R129096:129107 Integers Int unsigned def
R129110:129116 Integers Int sub def
R129120:129132 Integers Int iwordsize def
R129151:129153 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R129137:129148 Integers Int unsigned def
R129154:129166 Integers Int zwordsize def
R129134:129136 Coq.Init.Logic <> :type_scope:x_'='_x not
R129096:129107 Integers Int unsigned def
R129110:129116 Integers Int sub def
R129120:129132 Integers Int iwordsize def
R129151:129153 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R129137:129148 Integers Int unsigned def
R129154:129166 Integers Int zwordsize def
R129181:129187 Integers Int sub def
R129198:129214 Integers Int unsigned_repr thm
R129198:129214 Integers Int unsigned_repr thm
R129236:129261 Integers Int unsigned_repr_wordsize thm
R129236:129261 Integers Int unsigned_repr_wordsize thm
R129276:129295 Integers Int unsigned_range_2 thm
R129276:129295 Integers Int unsigned_range_2 thm
R129318:129335 Integers Int64 same_bits_eq thm
R129318:129335 Integers Int64 same_bits_eq thm
R129356:129364 Integers Int64 bits_shr' thm
R129356:129364 Integers Int64 bits_shr' thm
R129393:129404 Integers Int64 bits_ofwords thm
R129393:129404 Integers Int64 bits_ofwords thm
R129427:129429 Coqlib <> zlt def
R129433:129445 Integers Int zwordsize def
R129427:129429 Coqlib <> zlt def
R129433:129445 Integers Int zwordsize def
R129459:129470 Integers Int bits_shr thm
R129459:129470 Integers Int bits_shr thm
R129506:129508 Coqlib <> zlt def
R129531:129539 Integers Int64 zwordsize def
R129512:129514 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R129515:129526 Integers Int unsigned def
R129506:129508 Coqlib <> zlt def
R129531:129539 Integers Int64 zwordsize def
R129512:129514 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R129515:129526 Integers Int unsigned def
R129553:129560 Coqlib <> zlt_true thm
R129553:129560 Coqlib <> zlt_true thm
R129580:129591 Integers Int64 bits_ofwords thm
R129580:129591 Integers Int64 bits_ofwords thm
R129614:129622 Coqlib <> zlt_false thm
R129614:129622 Coqlib <> zlt_false thm
R129661:129669 Coqlib <> zlt_false thm
R129661:129669 Coqlib <> zlt_false thm
R129689:129700 Integers Int64 bits_ofwords thm
R129689:129700 Integers Int64 bits_ofwords thm
R129723:129731 Coqlib <> zlt_false thm
R129723:129731 Coqlib <> zlt_false thm
R129759:129770 Integers Int bits_shr thm
R129759:129770 Integers Int bits_shr thm
R129858:129860 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R129845:129857 Integers Int zwordsize def
R129793:129804 Integers Int unsigned def
R129807:129813 Integers Int sub def
R129829:129835 Integers Int one def
R129815:129827 Integers Int iwordsize def
R129793:129804 Integers Int unsigned def
R129807:129813 Integers Int sub def
R129829:129835 Integers Int one def
R129815:129827 Integers Int iwordsize def
R129858:129860 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R129845:129857 Integers Int zwordsize def
R129877:129879 Coqlib <> zlt def
R129902:129910 Integers Int64 zwordsize def
R129883:129885 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R129886:129897 Integers Int unsigned def
R129924:129935 Integers Int64 bits_ofwords thm
R129877:129879 Coqlib <> zlt def
R129902:129910 Integers Int64 zwordsize def
R129883:129885 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R129886:129897 Integers Int unsigned def
R129924:129935 Integers Int64 bits_ofwords thm
R129924:129935 Integers Int64 bits_ofwords thm
R129967:129975 Coqlib <> zlt_false thm
R129967:129975 Coqlib <> zlt_false thm
R130009:130011 Coqlib <> zlt def
R130055:130067 Integers Int zwordsize def
R130031:130034 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R130052:130052 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R130015:130017 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R130018:130030 Integers Int zwordsize def
R130048:130050 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R130035:130047 Integers Int zwordsize def
R130009:130011 Coqlib <> zlt def
R130055:130067 Integers Int zwordsize def
R130031:130034 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R130052:130052 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R130015:130017 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R130018:130030 Integers Int zwordsize def
R130048:130050 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R130035:130047 Integers Int zwordsize def
R130098:130106 Coqlib <> zlt_false thm
R130098:130106 Coqlib <> zlt_false thm
R130140:130142 Coqlib <> zlt def
R130186:130198 Integers Int zwordsize def
R130162:130165 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R130183:130183 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R130146:130148 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R130149:130161 Integers Int zwordsize def
R130179:130181 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R130166:130178 Integers Int zwordsize def
R130140:130142 Coqlib <> zlt def
R130186:130198 Integers Int zwordsize def
R130162:130165 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R130183:130183 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R130146:130148 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R130149:130161 Integers Int zwordsize def
R130179:130181 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R130166:130178 Integers Int zwordsize def
prf 130221:130233 Int64 decompose_add
R130295:130299 Coq.Init.Logic <> :type_scope:x_'='_x not
R130260:130262 Integers Int64 add def
R130281:130287 Integers Int64 ofwords def
R130292:130293 Integers <> yl var
R130289:130290 Integers <> yh var
R130265:130271 Integers Int64 ofwords def
R130276:130277 Integers <> xl var
R130273:130274 Integers <> xh var
R130300:130306 Integers Int64 ofwords def
R130376:130382 Integers Int add def
R130387:130388 Integers <> yl var
R130384:130385 Integers <> xl var
R130309:130315 Integers Int add def
R130334:130346 Integers Int add_carry def
R130354:130361 Integers Int zero def
R130351:130352 Integers <> yl var
R130348:130349 Integers <> xl var
R130318:130324 Integers Int add def
R130329:130330 Integers <> yh var
R130326:130327 Integers <> xh var
R130427:130437 Integers Int64 ofwords_add thm
R130427:130437 Integers Int64 ofwords_add thm
R130448:130459 Integers Int64 add_unsigned thm
R130448:130459 Integers Int64 add_unsigned thm
R130470:130481 Integers Int64 eqm_samerepr thm
R130470:130481 Integers Int64 eqm_samerepr thm
R130497:130508 Integers Int64 ofwords_add' thm
R130497:130508 Integers Int64 ofwords_add' thm
R130497:130508 Integers Int64 ofwords_add' thm
R130497:130508 Integers Int64 ofwords_add' thm
R130520:130541 Integers Int unsigned_add_carry thm
R130520:130541 Integers Int unsigned_add_carry thm
R130565:130577 Integers Int add_carry def
R130585:130592 Integers Int zero def
R130565:130577 Integers Int add_carry def
R130585:130592 Integers Int zero def
R130609:130620 Integers Int unsigned def
R130638:130649 Integers Int unsigned def
R130669:130680 Integers Int unsigned def
R130698:130709 Integers Int unsigned def
R130609:130620 Integers Int unsigned def
R130638:130649 Integers Int unsigned def
R130669:130680 Integers Int unsigned def
R130698:130709 Integers Int unsigned def
R130743:130747 Coq.ZArith.Zpower <> two_p def
R130725:130735 Integers Int modulus def
R130725:130735 Integers Int modulus def
R130743:130747 Coq.ZArith.Zpower <> two_p def
R130783:130786 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R130805:130805 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R130778:130780 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R130767:130769 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R130770:130774 Coq.ZArith.Zpower <> two_p def
R130800:130802 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R130789:130791 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R130792:130796 Coq.ZArith.Zpower <> two_p def
R130839:130842 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R130850:130850 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R130819:130819 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R130827:130830 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R130822:130824 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R130831:130835 Coq.ZArith.Zpower <> two_p def
R130845:130847 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R130839:130842 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R130850:130850 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R130819:130819 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R130827:130830 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R130822:130824 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R130831:130835 Coq.ZArith.Zpower <> two_p def
R130845:130847 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R130783:130786 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R130805:130805 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R130778:130780 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R130767:130769 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R130770:130774 Coq.ZArith.Zpower <> two_p def
R130800:130802 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R130789:130791 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R130792:130796 Coq.ZArith.Zpower <> two_p def
R130925:130942 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R130979:130979 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R130914:130916 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R130873:130884 Integers Int unsigned def
R130887:130893 Integers Int add def
R130896:130902 Integers Int add def
R130917:130921 Coq.ZArith.Zpower <> two_p def
R130950:130952 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R130945:130947 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R130968:130970 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R130953:130964 Integers Int unsigned def
R130971:130975 Coq.ZArith.Zpower <> two_p def
R131065:131079 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R131087:131087 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R130993:130993 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R131053:131056 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R131035:131037 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R130994:131005 Integers Int unsigned def
R131008:131014 Integers Int add def
R131017:131023 Integers Int add def
R131038:131049 Integers Int unsigned def
R131057:131061 Coq.ZArith.Zpower <> two_p def
R131082:131084 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R131065:131079 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R131087:131087 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R130993:130993 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R131053:131056 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R131035:131037 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R130994:131005 Integers Int unsigned def
R131008:131014 Integers Int add def
R131017:131023 Integers Int add def
R131038:131049 Integers Int unsigned def
R131057:131061 Coq.ZArith.Zpower <> two_p def
R131082:131084 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R130925:130942 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R130979:130979 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R130914:130916 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R130873:130884 Integers Int unsigned def
R130887:130893 Integers Int add def
R130896:130902 Integers Int add def
R130917:130921 Coq.ZArith.Zpower <> two_p def
R130950:130952 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R130945:130947 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R130968:130970 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R130953:130964 Integers Int unsigned def
R130971:130975 Coq.ZArith.Zpower <> two_p def
R131107:131113 Integers Int64 eqm_add thm
R131107:131113 Integers Int64 eqm_add thm
R131125:131132 Integers Int64 eqm_refl thm
R131125:131132 Integers Int64 eqm_refl thm
R131141:131152 Integers Int64 eqm_mul_2p32 thm
R131141:131152 Integers Int64 eqm_mul_2p32 thm
R131168:131170 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R131181:131181 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R131207:131210 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R131189:131191 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R131184:131186 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R131192:131203 Integers Int unsigned def
R131211:131222 Integers Int unsigned def
R131181:131181 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R131207:131210 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R131189:131191 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R131184:131186 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R131192:131203 Integers Int unsigned def
R131211:131222 Integers Int unsigned def
R131168:131170 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R131245:131255 Integers Int eqm_sub thm
R131245:131255 Integers Int eqm_sub thm
R131267:131278 Integers Int eqm_refl thm
R131267:131278 Integers Int eqm_refl thm
R131289:131311 Integers Int eqm_unsigned_repr_l thm
R131289:131311 Integers Int eqm_unsigned_repr_l thm
R131320:131330 Integers Int eqm_add thm
R131320:131330 Integers Int eqm_add thm
R131342:131353 Integers Int eqm_refl thm
R131342:131353 Integers Int eqm_refl thm
R131365:131387 Integers Int eqm_unsigned_repr_l thm
R131365:131387 Integers Int eqm_unsigned_repr_l thm
R131396:131407 Integers Int eqm_refl thm
R131396:131407 Integers Int eqm_refl thm
prf 131423:131435 Int64 decompose_sub
R131497:131501 Coq.Init.Logic <> :type_scope:x_'='_x not
R131462:131464 Integers Int64 sub def
R131483:131489 Integers Int64 ofwords def
R131494:131495 Integers <> yl var
R131491:131492 Integers <> yh var
R131467:131473 Integers Int64 ofwords def
R131478:131479 Integers <> xl var
R131475:131476 Integers <> xh var
R131502:131508 Integers Int64 ofwords def
R131579:131585 Integers Int sub def
R131590:131591 Integers <> yl var
R131587:131588 Integers <> xl var
R131511:131517 Integers Int sub def
R131536:131549 Integers Int sub_borrow def
R131557:131564 Integers Int zero def
R131554:131555 Integers <> yl var
R131551:131552 Integers <> xl var
R131520:131526 Integers Int sub def
R131531:131532 Integers <> yh var
R131528:131529 Integers <> xh var
R131630:131640 Integers Int64 ofwords_add thm
R131630:131640 Integers Int64 ofwords_add thm
R131651:131662 Integers Int64 eqm_samerepr thm
R131651:131662 Integers Int64 eqm_samerepr thm
R131678:131689 Integers Int64 ofwords_add' thm
R131678:131689 Integers Int64 ofwords_add' thm
R131678:131689 Integers Int64 ofwords_add' thm
R131678:131689 Integers Int64 ofwords_add' thm
R131701:131723 Integers Int unsigned_sub_borrow thm
R131701:131723 Integers Int unsigned_sub_borrow thm
R131747:131760 Integers Int sub_borrow def
R131768:131775 Integers Int zero def
R131747:131760 Integers Int sub_borrow def
R131768:131775 Integers Int zero def
R131792:131803 Integers Int unsigned def
R131821:131832 Integers Int unsigned def
R131852:131863 Integers Int unsigned def
R131881:131892 Integers Int unsigned def
R131792:131803 Integers Int unsigned def
R131821:131832 Integers Int unsigned def
R131852:131863 Integers Int unsigned def
R131881:131892 Integers Int unsigned def
R131926:131930 Coq.ZArith.Zpower <> two_p def
R131908:131918 Integers Int modulus def
R131908:131918 Integers Int modulus def
R131926:131930 Coq.ZArith.Zpower <> two_p def
R131966:131969 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R131988:131988 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R131961:131963 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R131950:131952 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R131953:131957 Coq.ZArith.Zpower <> two_p def
R131983:131985 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R131972:131974 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R131975:131979 Coq.ZArith.Zpower <> two_p def
R132022:132025 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R132033:132033 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R132002:132002 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R132010:132013 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R132005:132007 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R132014:132018 Coq.ZArith.Zpower <> two_p def
R132028:132030 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R132022:132025 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R132033:132033 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R132002:132002 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R132010:132013 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R132005:132007 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R132014:132018 Coq.ZArith.Zpower <> two_p def
R132028:132030 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R131966:131969 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R131988:131988 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R131961:131963 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R131950:131952 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R131953:131957 Coq.ZArith.Zpower <> two_p def
R131983:131985 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R131972:131974 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R131975:131979 Coq.ZArith.Zpower <> two_p def
R132108:132125 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R132162:132162 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R132097:132099 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R132056:132067 Integers Int unsigned def
R132070:132076 Integers Int sub def
R132079:132085 Integers Int sub def
R132100:132104 Coq.ZArith.Zpower <> two_p def
R132133:132135 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R132128:132130 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R132151:132153 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R132136:132147 Integers Int unsigned def
R132154:132158 Coq.ZArith.Zpower <> two_p def
R132248:132262 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R132270:132270 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R132176:132176 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R132236:132239 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R132218:132220 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R132177:132188 Integers Int unsigned def
R132191:132197 Integers Int sub def
R132200:132206 Integers Int sub def
R132221:132232 Integers Int unsigned def
R132240:132244 Coq.ZArith.Zpower <> two_p def
R132265:132267 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R132248:132262 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R132270:132270 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R132176:132176 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R132236:132239 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R132218:132220 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R132177:132188 Integers Int unsigned def
R132191:132197 Integers Int sub def
R132200:132206 Integers Int sub def
R132221:132232 Integers Int unsigned def
R132240:132244 Coq.ZArith.Zpower <> two_p def
R132265:132267 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R132108:132125 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R132162:132162 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R132097:132099 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R132056:132067 Integers Int unsigned def
R132070:132076 Integers Int sub def
R132079:132085 Integers Int sub def
R132100:132104 Coq.ZArith.Zpower <> two_p def
R132133:132135 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R132128:132130 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R132151:132153 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R132136:132147 Integers Int unsigned def
R132154:132158 Coq.ZArith.Zpower <> two_p def
R132290:132296 Integers Int64 eqm_add thm
R132290:132296 Integers Int64 eqm_add thm
R132308:132315 Integers Int64 eqm_refl thm
R132308:132315 Integers Int64 eqm_refl thm
R132324:132335 Integers Int64 eqm_mul_2p32 thm
R132324:132335 Integers Int64 eqm_mul_2p32 thm
R132351:132353 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R132364:132364 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R132390:132393 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R132372:132374 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R132367:132369 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R132375:132386 Integers Int unsigned def
R132394:132405 Integers Int unsigned def
R132364:132364 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R132390:132393 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R132372:132374 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R132367:132369 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R132375:132386 Integers Int unsigned def
R132394:132405 Integers Int unsigned def
R132351:132353 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R132428:132438 Integers Int eqm_add thm
R132428:132438 Integers Int eqm_add thm
R132450:132461 Integers Int eqm_refl thm
R132450:132461 Integers Int eqm_refl thm
R132472:132494 Integers Int eqm_unsigned_repr_l thm
R132472:132494 Integers Int eqm_unsigned_repr_l thm
R132503:132513 Integers Int eqm_add thm
R132503:132513 Integers Int eqm_add thm
R132525:132536 Integers Int eqm_refl thm
R132525:132536 Integers Int eqm_refl thm
R132548:132570 Integers Int eqm_unsigned_repr_l thm
R132548:132570 Integers Int eqm_unsigned_repr_l thm
R132579:132590 Integers Int eqm_refl thm
R132579:132590 Integers Int eqm_refl thm
prf 132606:132619 Int64 decompose_sub'
R132681:132685 Coq.Init.Logic <> :type_scope:x_'='_x not
R132646:132648 Integers Int64 sub def
R132667:132673 Integers Int64 ofwords def
R132678:132679 Integers <> yl var
R132675:132676 Integers <> yh var
R132651:132657 Integers Int64 ofwords def
R132662:132663 Integers <> xl var
R132659:132660 Integers <> xh var
R132686:132692 Integers Int64 ofwords def
R132781:132787 Integers Int sub def
R132792:132793 Integers <> yl var
R132789:132790 Integers <> xl var
R132695:132701 Integers Int add def
R132730:132742 Integers Int add_carry def
R132760:132766 Integers Int one def
R132748:132754 Integers Int not def
R132756:132757 Integers <> yl var
R132744:132745 Integers <> xl var
R132704:132710 Integers Int add def
R132716:132722 Integers Int not def
R132724:132725 Integers <> yh var
R132712:132713 Integers <> xh var
R132822:132834 Integers Int64 decompose_sub thm
R132822:132834 Integers Int64 decompose_sub thm
R132857:132880 Integers Int sub_borrow_add_carry thm
R132857:132880 Integers Int sub_borrow_add_carry thm
R132901:132917 Integers Int sub_add_not_3 thm
R132901:132917 Integers Int sub_add_not_3 thm
R132928:132940 Integers Int xor_assoc thm
R132928:132940 Integers Int xor_assoc thm
R132951:132962 Integers Int xor_idem thm
R132951:132962 Integers Int xor_idem thm
R132976:132987 Integers Int xor_zero thm
R132976:132987 Integers Int xor_zero thm
R133006:133019 Integers Int xor_zero_l thm
R133006:133019 Integers Int xor_zero_l thm
R133029:133041 Integers Int add_carry def
R133056:133058 Coqlib <> zlt def
R133129:133139 Integers Int modulus def
R133104:133106 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R133076:133078 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R133061:133072 Integers Int unsigned def
R133079:133090 Integers Int unsigned def
R133093:133099 Integers Int not def
R133107:133118 Integers Int unsigned def
R133120:133126 Integers Int one def
R133174:133185 Integers Int mkint_eq thm
R133056:133058 Coqlib <> zlt def
R133129:133139 Integers Int modulus def
R133104:133106 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R133076:133078 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R133061:133072 Integers Int unsigned def
R133079:133090 Integers Int unsigned def
R133093:133099 Integers Int not def
R133107:133118 Integers Int unsigned def
R133120:133126 Integers Int one def
R133174:133185 Integers Int mkint_eq thm
R133174:133185 Integers Int mkint_eq thm
def 133211:133214 Int64 mul'
R133222:133228 Integers Int int rec
R133233:133235 Integers Int64 int rec
R133240:133243 Integers Int64 repr def
R133260:133262 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R133246:133257 Integers Int unsigned def
R133259:133259 Integers <> x var
R133263:133274 Integers Int unsigned def
R133276:133276 Integers <> y var
prf 133287:133296 Int64 mul'_mulhu
R133321:133323 Coq.Init.Logic <> :type_scope:x_'='_x not
R133313:133316 Integers Int64 mul' def
R133320:133320 Integers <> y var
R133318:133318 Integers <> x var
R133324:133330 Integers Int64 ofwords def
R133349:133355 Integers Int mul def
R133359:133359 Integers <> y var
R133357:133357 Integers <> x var
R133333:133341 Integers Int mulhu def
R133345:133345 Integers <> y var
R133343:133343 Integers <> x var
R133391:133401 Integers Int64 ofwords_add thm
R133391:133401 Integers Int64 ofwords_add thm
R133411:133414 Integers Int64 mul' def
R133417:133425 Integers Int mulhu def
R133428:133434 Integers Int mul def
R133464:133466 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R133450:133461 Integers Int unsigned def
R133467:133478 Integers Int unsigned def
R133464:133466 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R133450:133461 Integers Int unsigned def
R133467:133478 Integers Int unsigned def
R133498:133500 Coq.ZArith.BinInt <> :Z_scope:x_'/'_x not
R133501:133511 Integers Int modulus def
R133498:133500 Coq.ZArith.BinInt <> :Z_scope:x_'/'_x not
R133501:133511 Integers Int modulus def
R133527:133531 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R133532:133542 Integers Int modulus def
R133527:133531 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R133532:133542 Integers Int modulus def
R133563:133566 Integers Int64 repr def
R133585:133587 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R133571:133573 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R133574:133584 Integers Int modulus def
R133563:133566 Integers Int64 repr def
R133585:133587 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R133571:133573 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R133574:133584 Integers Int modulus def
R133613:133622 Coq.ZArith.BinInt <> Zmult_comm syndef
R133613:133622 Coq.ZArith.BinInt <> Zmult_comm syndef
R133631:133642 Coq.ZArith.Zdiv <> Z_div_mod_eq thm
R133631:133642 Coq.ZArith.Zdiv <> Z_div_mod_eq thm
R133651:133665 Integers Int modulus_pos thm
R133651:133665 Integers Int modulus_pos thm
R133677:133688 Integers Int64 eqm_samerepr thm
R133677:133688 Integers Int64 eqm_samerepr thm
R133697:133703 Integers Int64 eqm_add thm
R133697:133703 Integers Int64 eqm_add thm
R133712:133723 Integers Int64 eqm_mul_2p32 thm
R133712:133723 Integers Int64 eqm_mul_2p32 thm
R133752:133771 Integers Int unsigned_repr_eq thm
R133752:133771 Integers Int unsigned_repr_eq thm
R133780:133787 Integers Int64 eqm_refl thm
R133780:133787 Integers Int64 eqm_refl thm
prf 133802:133814 Int64 decompose_mul
R133876:133880 Coq.Init.Logic <> :type_scope:x_'='_x not
R133841:133843 Integers Int64 mul def
R133862:133868 Integers Int64 ofwords def
R133873:133874 Integers <> yl var
R133870:133871 Integers <> yh var
R133846:133852 Integers Int64 ofwords def
R133857:133858 Integers <> xl var
R133854:133855 Integers <> xh var
R133881:133887 Integers Int64 ofwords def
R133974:133979 Integers Int64 loword def
R133982:133985 Integers Int64 mul' def
R133990:133991 Integers <> yl var
R133987:133988 Integers <> xl var
R133890:133896 Integers Int add def
R133947:133953 Integers Int mul def
R133958:133959 Integers <> yl var
R133955:133956 Integers <> xh var
R133899:133905 Integers Int add def
R133930:133936 Integers Int mul def
R133941:133942 Integers <> yh var
R133938:133939 Integers <> xl var
R133908:133913 Integers Int64 hiword def
R133916:133919 Integers Int64 mul' def
R133924:133925 Integers <> yl var
R133921:133922 Integers <> xl var
R134027:134032 Integers Int64 loword def
R134035:134038 Integers Int64 mul' def
R134060:134065 Integers Int64 hiword def
R134068:134071 Integers Int64 mul' def
R134027:134032 Integers Int64 loword def
R134035:134038 Integers Int64 mul' def
R134060:134065 Integers Int64 hiword def
R134068:134071 Integers Int64 mul' def
R134118:134120 Coq.Init.Logic <> :type_scope:x_'='_x not
R134097:134104 Integers Int64 unsigned def
R134107:134110 Integers Int64 mul' def
R134147:134149 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R134136:134138 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R134121:134132 Integers Int unsigned def
R134139:134143 Coq.ZArith.Zpower <> two_p def
R134150:134161 Integers Int unsigned def
R134118:134120 Coq.Init.Logic <> :type_scope:x_'='_x not
R134097:134104 Integers Int64 unsigned def
R134107:134110 Integers Int64 mul' def
R134147:134149 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R134136:134138 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R134121:134132 Integers Int unsigned def
R134139:134143 Coq.ZArith.Zpower <> two_p def
R134150:134161 Integers Int unsigned def
R134184:134200 Integers Int64 ofwords_recompose thm
R134203:134206 Integers Int64 mul' def
R134184:134200 Integers Int64 ofwords_recompose thm
R134203:134206 Integers Int64 mul' def
R134223:134234 Integers Int64 ofwords_add' thm
R134223:134234 Integers Int64 ofwords_add' thm
R134259:134269 Integers Int64 ofwords_add thm
R134259:134269 Integers Int64 ofwords_add thm
R134279:134281 Integers Int64 mul def
R134293:134304 Integers Int64 ofwords_add' thm
R134293:134304 Integers Int64 ofwords_add' thm
R134293:134304 Integers Int64 ofwords_add' thm
R134293:134304 Integers Int64 ofwords_add' thm
R134320:134331 Integers Int unsigned def
R134349:134360 Integers Int unsigned def
R134380:134391 Integers Int unsigned def
R134409:134420 Integers Int unsigned def
R134320:134331 Integers Int unsigned def
R134349:134360 Integers Int unsigned def
R134380:134391 Integers Int unsigned def
R134409:134420 Integers Int unsigned def
R134440:134451 Integers Int unsigned def
R134440:134451 Integers Int unsigned def
R134474:134485 Integers Int unsigned def
R134474:134485 Integers Int unsigned def
R134513:134516 Integers Int64 repr def
R134556:134558 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R134519:134519 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R134544:134547 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R134520:134520 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R134533:134536 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R134523:134525 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R134528:134530 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R134539:134541 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R134548:134552 Coq.ZArith.Zpower <> two_p def
R134513:134516 Integers Int64 repr def
R134556:134558 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R134519:134519 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R134544:134547 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R134520:134520 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R134533:134536 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R134523:134525 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R134528:134530 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R134539:134541 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R134548:134552 Coq.ZArith.Zpower <> two_p def
R134573:134584 Integers Int64 eqm_samerepr thm
R134573:134584 Integers Int64 eqm_samerepr thm
R134593:134599 Integers Int64 eqm_add thm
R134593:134599 Integers Int64 eqm_add thm
R134611:134618 Integers Int64 eqm_refl thm
R134611:134618 Integers Int64 eqm_refl thm
R134630:134641 Integers Int64 eqm_mul_2p32 thm
R134630:134641 Integers Int64 eqm_mul_2p32 thm
R134654:134669 Integers Int add_unsigned thm
R134654:134669 Integers Int add_unsigned thm
R134678:134700 Integers Int eqm_unsigned_repr_l thm
R134678:134700 Integers Int eqm_unsigned_repr_l thm
R134709:134719 Integers Int eqm_add thm
R134709:134719 Integers Int eqm_add thm
R134732:134747 Integers Int add_unsigned thm
R134732:134747 Integers Int add_unsigned thm
R134756:134778 Integers Int eqm_unsigned_repr_l thm
R134756:134778 Integers Int eqm_unsigned_repr_l thm
R134787:134797 Integers Int eqm_add thm
R134787:134797 Integers Int eqm_add thm
R134808:134819 Integers Int eqm_refl thm
R134808:134819 Integers Int eqm_refl thm
R134831:134837 Integers Int mul def
R134846:134868 Integers Int eqm_unsigned_repr_l thm
R134846:134868 Integers Int eqm_unsigned_repr_l thm
R134877:134888 Integers Int eqm_refl thm
R134877:134888 Integers Int eqm_refl thm
R134900:134906 Integers Int mul def
R134915:134937 Integers Int eqm_unsigned_repr_l thm
R134915:134937 Integers Int eqm_unsigned_repr_l thm
R134946:134957 Integers Int eqm_refl thm
R134946:134957 Integers Int eqm_refl thm
R134976:134979 Integers Int64 repr def
R135003:135005 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R134982:134989 Integers Int64 unsigned def
R134992:134995 Integers Int64 mul' def
R135006:135006 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R135024:135027 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R135014:135016 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R135009:135011 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R135019:135021 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R135028:135032 Coq.ZArith.Zpower <> two_p def
R134976:134979 Integers Int64 repr def
R135003:135005 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R134982:134989 Integers Int64 unsigned def
R134992:134995 Integers Int64 mul' def
R135006:135006 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R135024:135027 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R135014:135016 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R135009:135011 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R135019:135021 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R135028:135032 Coq.ZArith.Zpower <> two_p def
R135086:135089 Integers Int64 repr def
R135100:135102 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R135095:135097 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R135103:135103 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R135121:135124 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R135111:135113 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R135106:135108 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R135116:135118 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R135125:135129 Coq.ZArith.Zpower <> two_p def
R135086:135089 Integers Int64 repr def
R135100:135102 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R135095:135097 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R135103:135103 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R135121:135124 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R135111:135113 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R135106:135108 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R135116:135118 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R135125:135129 Coq.ZArith.Zpower <> two_p def
R135146:135157 Integers Int64 eqm_samerepr thm
R135146:135157 Integers Int64 eqm_samerepr thm
R135166:135172 Integers Int64 eqm_add thm
R135166:135172 Integers Int64 eqm_add thm
R135184:135191 Integers Int64 eqm_refl thm
R135184:135191 Integers Int64 eqm_refl thm
R135204:135207 Integers Int64 mul' def
R135216:135234 Integers Int64 eqm_unsigned_repr_l thm
R135216:135234 Integers Int64 eqm_unsigned_repr_l thm
R135243:135250 Integers Int64 eqm_refl thm
R135243:135250 Integers Int64 eqm_refl thm
R135269:135272 Integers Int64 repr def
R135276:135279 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R135320:135320 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R135287:135289 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R135282:135284 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R135290:135290 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R135308:135311 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R135298:135300 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R135293:135295 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R135303:135305 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R135312:135316 Coq.ZArith.Zpower <> two_p def
R135269:135272 Integers Int64 repr def
R135276:135279 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R135320:135320 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R135287:135289 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R135282:135284 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R135290:135290 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R135308:135311 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R135298:135300 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R135293:135295 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R135303:135305 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R135312:135316 Coq.ZArith.Zpower <> two_p def
R135335:135343 Coq.ZArith.BinInt <> Zplus_0_l syndef
R135335:135343 Coq.ZArith.BinInt <> Zplus_0_l syndef
R135369:135372 Integers Int64 repr def
R135406:135409 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R135450:135450 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R135382:135385 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R135405:135405 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R135377:135379 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R135394:135396 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R135386:135390 Coq.ZArith.Zpower <> two_p def
R135397:135401 Coq.ZArith.Zpower <> two_p def
R135417:135419 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R135412:135414 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R135420:135420 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R135438:135441 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R135428:135430 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R135423:135425 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R135433:135435 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R135442:135446 Coq.ZArith.Zpower <> two_p def
R135369:135372 Integers Int64 repr def
R135406:135409 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R135450:135450 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R135382:135385 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R135405:135405 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R135377:135379 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R135394:135396 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R135386:135390 Coq.ZArith.Zpower <> two_p def
R135397:135401 Coq.ZArith.Zpower <> two_p def
R135417:135419 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R135412:135414 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R135420:135420 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R135438:135441 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R135428:135430 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R135423:135425 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R135433:135435 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R135442:135446 Coq.ZArith.Zpower <> two_p def
R135463:135474 Integers Int64 eqm_samerepr thm
R135463:135474 Integers Int64 eqm_samerepr thm
R135483:135489 Integers Int64 eqm_add thm
R135483:135489 Integers Int64 eqm_add thm
R135501:135508 Integers Int64 eqm_refl thm
R135501:135508 Integers Int64 eqm_refl thm
R135548:135554 Integers Int64 modulus def
R135530:135532 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R135522:135526 Coq.ZArith.Zpower <> two_p def
R135533:135537 Coq.ZArith.Zpower <> two_p def
R135530:135532 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R135522:135526 Coq.ZArith.Zpower <> two_p def
R135533:135537 Coq.ZArith.Zpower <> two_p def
R135548:135554 Integers Int64 modulus def
R135569:135571 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R135565:135566 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R135569:135571 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R135565:135566 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
prf 135614:135628 Int64 decompose_mul_2
R135690:135694 Coq.Init.Logic <> :type_scope:x_'='_x not
R135655:135657 Integers Int64 mul def
R135676:135682 Integers Int64 ofwords def
R135687:135688 Integers <> yl var
R135684:135685 Integers <> yh var
R135660:135666 Integers Int64 ofwords def
R135671:135672 Integers <> xl var
R135668:135669 Integers <> xh var
R135695:135701 Integers Int64 ofwords def
R135784:135790 Integers Int mul def
R135795:135796 Integers <> yl var
R135792:135793 Integers <> xl var
R135704:135710 Integers Int add def
R135757:135763 Integers Int mul def
R135768:135769 Integers <> yl var
R135765:135766 Integers <> xh var
R135713:135719 Integers Int add def
R135740:135746 Integers Int mul def
R135751:135752 Integers <> yh var
R135748:135749 Integers <> xl var
R135722:135730 Integers Int mulhu def
R135735:135736 Integers <> yl var
R135732:135733 Integers <> xl var
R135825:135837 Integers Int64 decompose_mul thm
R135825:135837 Integers Int64 decompose_mul thm
R135848:135857 Integers Int64 mul'_mulhu thm
R135848:135857 Integers Int64 mul'_mulhu thm
R135871:135880 Integers Int64 hi_ofwords thm
R135883:135892 Integers Int64 lo_ofwords thm
R135871:135880 Integers Int64 hi_ofwords thm
R135883:135892 Integers Int64 lo_ofwords thm
prf 135913:135925 Int64 decompose_ltu
R135987:135989 Coq.Init.Logic <> :type_scope:x_'='_x not
R135952:135954 Integers Int64 ltu def
R135973:135979 Integers Int64 ofwords def
R135984:135985 Integers <> yl var
R135981:135982 Integers <> yh var
R135957:135963 Integers Int64 ofwords def
R135968:135969 Integers <> xl var
R135965:135966 Integers <> xh var
R135993:135998 Integers Int eq def
R136003:136004 Integers <> yh var
R136000:136001 Integers <> xh var
R136030:136036 Integers Int ltu def
R136041:136042 Integers <> yh var
R136038:136039 Integers <> xh var
R136011:136017 Integers Int ltu def
R136022:136023 Integers <> yl var
R136019:136020 Integers <> xl var
R136069:136071 Integers Int64 ltu def
R136084:136095 Integers Int64 ofwords_add' thm
R136084:136095 Integers Int64 ofwords_add' thm
R136084:136095 Integers Int64 ofwords_add' thm
R136084:136095 Integers Int64 ofwords_add' thm
R136105:136111 Integers Int ltu def
R136114:136119 Integers Int eq def
R136134:136136 Coqlib <> zeq def
R136157:136168 Integers Int unsigned def
R136139:136150 Integers Int unsigned def
R136134:136136 Coqlib <> zeq def
R136157:136168 Integers Int unsigned def
R136139:136150 Integers Int unsigned def
R136199:136201 Coqlib <> zlt def
R136222:136233 Integers Int unsigned def
R136204:136215 Integers Int unsigned def
R136199:136201 Coqlib <> zlt def
R136222:136233 Integers Int unsigned def
R136204:136215 Integers Int unsigned def
R136250:136257 Coqlib <> zlt_true thm
R136250:136257 Coqlib <> zlt_true thm
R136275:136283 Coqlib <> zlt_false thm
R136275:136283 Coqlib <> zlt_false thm
R136318:136328 Integers Int modulus def
R136303:136307 Coq.ZArith.Zpower <> two_p def
R136303:136307 Coq.ZArith.Zpower <> two_p def
R136318:136328 Integers Int modulus def
R136346:136363 Integers Int unsigned_range thm
R136370:136387 Integers Int unsigned_range thm
R136346:136363 Integers Int unsigned_range thm
R136370:136387 Integers Int unsigned_range thm
R136404:136414 Integers Int modulus def
R136404:136414 Integers Int modulus def
R136453:136455 Coqlib <> zlt def
R136476:136487 Integers Int unsigned def
R136458:136469 Integers Int unsigned def
R136453:136455 Coqlib <> zlt def
R136476:136487 Integers Int unsigned def
R136458:136469 Integers Int unsigned def
R136503:136510 Coqlib <> zlt_true thm
R136503:136510 Coqlib <> zlt_true thm
R136528:136536 Coqlib <> zlt_false thm
R136528:136536 Coqlib <> zlt_false thm
prf 136558:136570 Int64 decompose_leu
R136639:136643 Coq.Init.Logic <> :type_scope:x_'='_x not
R136597:136600 Coq.Init.Datatypes <> negb def
R136603:136605 Integers Int64 ltu def
R136624:136630 Integers Int64 ofwords def
R136635:136636 Integers <> xl var
R136632:136633 Integers <> xh var
R136608:136614 Integers Int64 ofwords def
R136619:136620 Integers <> yl var
R136616:136617 Integers <> yh var
R136647:136652 Integers Int eq def
R136657:136658 Integers <> yh var
R136654:136655 Integers <> xh var
R136691:136697 Integers Int ltu def
R136702:136703 Integers <> yh var
R136699:136700 Integers <> xh var
R136665:136668 Coq.Init.Datatypes <> negb def
R136671:136677 Integers Int ltu def
R136682:136683 Integers <> xl var
R136679:136680 Integers <> yl var
R136731:136743 Integers Int64 decompose_ltu thm
R136731:136743 Integers Int64 decompose_ltu thm
R136754:136763 Integers Int eq_sym thm
R136754:136763 Integers Int eq_sym thm
R136775:136780 Integers Int eq def
R136793:136795 Coqlib <> zeq def
R136816:136827 Integers Int unsigned def
R136798:136809 Integers Int unsigned def
R136793:136795 Coqlib <> zeq def
R136816:136827 Integers Int unsigned def
R136798:136809 Integers Int unsigned def
R136853:136859 Integers Int ltu def
R136872:136874 Coqlib <> zlt def
R136895:136906 Integers Int unsigned def
R136877:136888 Integers Int unsigned def
R136872:136874 Coqlib <> zlt def
R136895:136906 Integers Int unsigned def
R136877:136888 Integers Int unsigned def
R136925:136933 Coqlib <> zlt_false thm
R136925:136933 Coqlib <> zlt_false thm
R136961:136968 Coqlib <> zlt_true thm
R136961:136968 Coqlib <> zlt_true thm
prf 136998:137009 Int64 decompose_lt
R137070:137072 Coq.Init.Logic <> :type_scope:x_'='_x not
R137036:137037 Integers Int64 lt def
R137056:137062 Integers Int64 ofwords def
R137067:137068 Integers <> yl var
R137064:137065 Integers <> yh var
R137040:137046 Integers Int64 ofwords def
R137051:137052 Integers <> xl var
R137048:137049 Integers <> xh var
R137076:137081 Integers Int eq def
R137086:137087 Integers <> yh var
R137083:137084 Integers <> xh var
R137113:137118 Integers Int lt def
R137123:137124 Integers <> yh var
R137120:137121 Integers <> xh var
R137094:137100 Integers Int ltu def
R137105:137106 Integers <> yl var
R137102:137103 Integers <> xl var
R137151:137152 Integers Int64 lt def
R137165:137177 Integers Int64 ofwords_add'' thm
R137165:137177 Integers Int64 ofwords_add'' thm
R137165:137177 Integers Int64 ofwords_add'' thm
R137165:137177 Integers Int64 ofwords_add'' thm
R137188:137200 Integers Int eq_signed thm
R137188:137200 Integers Int eq_signed thm
R137216:137218 Coqlib <> zeq def
R137237:137246 Integers Int signed def
R137221:137230 Integers Int signed def
R137216:137218 Coqlib <> zeq def
R137237:137246 Integers Int signed def
R137221:137230 Integers Int signed def
R137274:137280 Integers Int ltu def
R137293:137295 Coqlib <> zlt def
R137316:137327 Integers Int unsigned def
R137298:137309 Integers Int unsigned def
R137293:137295 Coqlib <> zlt def
R137316:137327 Integers Int unsigned def
R137298:137309 Integers Int unsigned def
R137344:137351 Coqlib <> zlt_true thm
R137344:137351 Coqlib <> zlt_true thm
R137369:137377 Coqlib <> zlt_false thm
R137369:137377 Coqlib <> zlt_false thm
R137412:137422 Integers Int modulus def
R137397:137401 Coq.ZArith.Zpower <> two_p def
R137397:137401 Coq.ZArith.Zpower <> two_p def
R137412:137422 Integers Int modulus def
R137440:137457 Integers Int unsigned_range thm
R137464:137481 Integers Int unsigned_range thm
R137440:137457 Integers Int unsigned_range thm
R137464:137481 Integers Int unsigned_range thm
R137498:137508 Integers Int modulus def
R137498:137508 Integers Int modulus def
R137544:137549 Integers Int lt def
R137562:137564 Coqlib <> zlt def
R137583:137592 Integers Int signed def
R137567:137576 Integers Int signed def
R137562:137564 Coqlib <> zlt def
R137583:137592 Integers Int signed def
R137567:137576 Integers Int signed def
R137608:137615 Coqlib <> zlt_true thm
R137608:137615 Coqlib <> zlt_true thm
R137633:137641 Coqlib <> zlt_false thm
R137633:137641 Coqlib <> zlt_false thm
prf 137663:137674 Int64 decompose_le
R137742:137746 Coq.Init.Logic <> :type_scope:x_'='_x not
R137701:137704 Coq.Init.Datatypes <> negb def
R137707:137708 Integers Int64 lt def
R137727:137733 Integers Int64 ofwords def
R137738:137739 Integers <> xl var
R137735:137736 Integers <> xh var
R137711:137717 Integers Int64 ofwords def
R137722:137723 Integers <> yl var
R137719:137720 Integers <> yh var
R137750:137755 Integers Int eq def
R137760:137761 Integers <> yh var
R137757:137758 Integers <> xh var
R137794:137799 Integers Int lt def
R137804:137805 Integers <> yh var
R137801:137802 Integers <> xh var
R137768:137771 Coq.Init.Datatypes <> negb def
R137774:137780 Integers Int ltu def
R137785:137786 Integers <> xl var
R137782:137783 Integers <> yl var
R137833:137844 Integers Int64 decompose_lt thm
R137833:137844 Integers Int64 decompose_lt thm
R137855:137864 Integers Int eq_sym thm
R137855:137864 Integers Int eq_sym thm
R137877:137889 Integers Int eq_signed thm
R137877:137889 Integers Int eq_signed thm
R137902:137904 Coqlib <> zeq def
R137923:137932 Integers Int signed def
R137907:137916 Integers Int signed def
R137902:137904 Coqlib <> zeq def
R137923:137932 Integers Int signed def
R137907:137916 Integers Int signed def
R137958:137963 Integers Int lt def
R137976:137978 Coqlib <> zlt def
R137997:138006 Integers Int signed def
R137981:137990 Integers Int signed def
R137976:137978 Coqlib <> zlt def
R137997:138006 Integers Int signed def
R137981:137990 Integers Int signed def
R138025:138033 Coqlib <> zlt_false thm
R138025:138033 Coqlib <> zlt_false thm
R138061:138068 Coqlib <> zlt_true thm
R138061:138068 Coqlib <> zlt_true thm
R138096:138100 Integers <> <> mod
R138116:138135 Integers Wordsize_64 wordsize def
syndef 138149:138153 <> int64
R138158:138166 Integers Int64 int rec
R138184:138191 Integers Int repr def
R138193:138202 Integers Int64 repr def
R138204:138212 Integers Byte repr def
